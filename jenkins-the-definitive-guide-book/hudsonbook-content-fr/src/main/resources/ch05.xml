<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-build-jobs">
  <title>Configurer vos tâches de Build</title>
  <sect1 id="sect-build-jobs-introduction">
    <title>Introduction</title>
    <para><indexterm id="I_indexterm5_d1e4965" significance="normal"><primary>tâches de build</primary></indexterm>Les tâches de build sont les éléments de base d'un serveur
        d'Intégration Continue.</para>
    <para>Une tâche de build est une manière de compiler, tester, empaqueter,
        déployer ou d'effectuer des actions sur votre projet. Les tâches de build
        apparaissent sous plusieurs formes ; vous pouvez compiler et tester unitairement
        votre application, créer des rapports qualimétriques pour votre code source,
        générer de la documentation, empaqueter une application pour une livraison,
        la déployer en environnement de production, exécuter un test de fumée automatisé
        ou n'importe quelles autres tâches similaires.</para>
    <para>Un projet logiciel aura généralement plusieurs tâches de build attachées.
        Vous pourriez démarrer avec une tâche de build dédiée qui exécute tous les tests unitaires
        par exemple. Si ceux-ci se terminent avec succès, vous pourriez poursuivre
        avec une tâche de build exécutant des tests d'intégration plus longs, faire tourner la
        qualimétrie sur le code ou générer la documentation technique avant d'<phrase role="keep-together">empaqueter</phrase> votre application
        web pour la déployer sur un serveur de test.</para>
    <para>Dans Jenkins, les tâches de build sont simples à configurer.  Dans ce
        chapitre, nous verrons les différents types de tâches de build et la manière de les
        configurer. Dans les chapitres suivants, nous irons plus loin en regardant
        comment organiser plusieurs tâches de build, comment configurer un séquençage
        pour la promotion de builds et comment automatiser la procédure de
        déploiement. Démarrons pour l'instant avec la manière de configurer une
        tâche basique de build dans Jenkins.</para>
  </sect1>
  <sect1 id="sect-build-jobs">
    <title>Tâches de Build Jenkins</title>
    <para>Créer des<indexterm class="startofrange" id="ch05-create" significance="normal"><primary>tâches de build</primary><secondary>créer</secondary></indexterm> une nouvelle tâche de build dans Jenkins est simple : cliquez simplement sur
        le lien “Nouveau Job” du menu dans le tableau de bord de Jenkins. Jenkins supporte différents
        <indexterm id="I_indexterm5_d1e4989" significance="normal"><primary>tâches de build</primary><secondary>types de</secondary></indexterm><indexterm id="I_indexterm5_d1e4994" significance="normal"><primary>tâches de build</primary><seealso>tâches de build free-style; tâches de build Apache Maven</seealso></indexterm> types de tâches de build qui vous sont présentés lorsque vous choisissez de créer
        un nouveau job (voir <xref linkend="fig-hudson-build-types"/>).</para>
    <variablelist>
      <varlistentry>
        <term>Projet free-style</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5008" significance="normal"><primary>tâches de build free-style</primary></indexterm>Les tâches de build free-style sont des tâches de build générales
          apportant une grande flexibilité.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Projet Apache Maven</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5017" significance="normal"><primary>tâches de build Apache Maven</primary></indexterm>Le “projet maven2/3” est une tâche de build spécialement
              adaptée aux projets Apache Maven. Jenkins comprend les fichiers <filename moreinfo="none">pom</filename> et la structure des projets Apache Maven et peut
              utiliser les informations glanées dans le fichier <filename moreinfo="none">pom</filename> pour réduire les efforts de configuration nécessaires
              à la configuration de votre projet.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Contrôler un job externe</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5032" significance="normal"><primary>tâches de build</primary><secondary>externe, contrôler</secondary></indexterm><indexterm id="I_indexterm5_d1e5037" significance="normal"><primary>jobs externes, contrôler</primary></indexterm>La tache de build “Contrôler un job externe” vous permet de
              garder un oeil sur des processus non-interactifs externes comme <indexterm id="I_indexterm5_d1e5041" significance="normal"><primary>tâches cron</primary><see>jobs externes</see></indexterm>des tâches cron.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Projet multi-configuration</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5052" significance="normal"><primary>tâches de build multi-configuration</primary></indexterm><indexterm id="I_indexterm5_d1e5055" significance="normal"><primary>tâches de build matrix</primary><see>tâches de build multi-configuration</see></indexterm>Le “projet multi-configuration” (également référencé comme
              “projet matrix”) vous permet de faire tourner la même tâche de build avec différentes configurations.
              Cette puissante fonctionnalité peut être utile pour tester une application
              dans des environnements différents, avec différentes bases de données ou
              même sur différentes machines de build. Nous regarderons plus en détails la manière
              de configurer ces tâches de build multi-configuration plus loin dans ce livre.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <figure float="0" id="fig-hudson-build-types">
      <title>Jenkins supporte quatre principaux types de tâches de build</title>
      <mediaobject id="I_mediaobject5_d1e5064">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0501.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0501.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Vous <indexterm id="I_indexterm5_d1e5071" significance="normal"><primary>tâches de build</primary><secondary>copier</secondary></indexterm>pouvez également copier un job existant ce qui est une très bonne façon
        de créer un nouveau job avec une configuration très similaire à une tâche de build existante,
        à l'exception de quelques détails de configuration.</para>
    <para>Dans ce chapitre, nous nous concentrerons sur les deux premiers types de tâches de build
        qui sont les plus couramment utilisées. Les autres seront discutés plus loin.
        Démarrons avec l'option la plus flexible : la<indexterm id="I_indexterm5_d1e5079" class="endofrange" startref="ch05-create" significance="normal"><primary/></indexterm> tâche de build free-style.</para>
  </sect1>
  <sect1 id="sect-build-jobs-freestyle">
    <title>Créer une tâche de build free-style</title>
    <para>La <indexterm class="startofrange" id="ch05-free" significance="normal"><primary>tâches de build free-style</primary></indexterm>tâche de build free-style est l'option la
        plus flexible et la plus configurable et peut être utilisée pour n'importe quel type de projet. Elle est assez rapide à mettre en place et la plupart des
        options de configuration vues ici sont également disponible dans les autres
        types de tâches de build.</para>
    <sect2 id="sect-general-options">
      <title>Options Générales</title>
      <para>La première section que vous voyez lorsque vous créez un job de type
          free-style contient les informations générales du projet comme son nom
          unique ou sa description ainsi que d'autres indiquant comment et où la
          tâche de build doit être exécutée (voir <xref linkend="fig-hudson-new-project-general"/>).</para>
      <figure float="none" id="fig-hudson-new-project-general">
        <title>Créer une nouvelle tâche de build</title>
        <mediaobject id="I_mediaobject5_d1e5101">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0502.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0502.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Le <indexterm id="I_indexterm5_d1e5108" significance="normal"><primary>tâches de build free-style</primary><secondary>nommage</secondary></indexterm>nom du projet peut être n'importe lequel mais il
          est bon de noter qu'il sera utilisé comme repertoire du projet et dans les URLs du job. J'évite donc généralement d'utiliser des
          noms avec des espaces. La <indexterm id="I_indexterm5_d1e5114" significance="normal"><primary>tâche de build free-style</primary><secondary>description de, pour la page de démarrage du projet</secondary></indexterm>description du projet
          apparaîtra sur la page de démarrage du projet — utilisez la pour
          donner une idée générale sur le but de la tâche de build et son contexte. Les tags
          HTML y sont acceptés.</para>
      <para>Les autres options sont plus techniques et nous reviendrons sur
          quelques unes plus en détails dans la suite de ce guide.</para>
      <para>Un<indexterm id="I_indexterm5_d1e5124" significance="normal"><primary>tâches de build free-style</primary><secondary>historique de build pour, nombre de builds à conserver</secondary></indexterm><indexterm id="I_indexterm5_d1e5129" significance="normal"><primary>historique de build</primary><secondary>nombre de builds à conserver</secondary></indexterm> des aspects importants est la manière dont vous allez gérer l'historique
          de vos builds. Les tâches de build peuvent consommer beaucoup d'espace disque particulièrement
          si vous archivez les artefacts de vos builds (les fichiers binaires tels que JARs,
          WARs, TARs, etc. générés par votre tâche de build). Même sans artefacts, garder un
          enregistrement pour chaque tâche de build consomme de la mémoire et de l'espace disque
          supplémentaire et cela n'est peut être pas justifié selon la nature de votre tâche de build.
          Par exemple, pour un job de qualimétrie générant des rapports sur
          l'analyse statique et la couverture de votre code dans le temps, vous pourriez
          vouloir garder une trace de vos builds pendant toute la durée du projet. Cependant,
          pour une tâche de build qui déploie automatiquement une application sur un serveur de test,
          garder un historique et les artefacts pour la postérité est peut être beaucoup
          moins important.</para>
      <para>L'option de suppression des anciens builds vous permet de limiter le nombre
          de builds conservés dans l'historique. Vous pouvez aussi bien demander à
          Jenkins de ne garder que les builds récents (Jenkins supprimera les builds après
          un certain nombre de jours) ou ne garder pas plus qu'un nombre déterminé de builds.
          Si un build en particulier a une valeur sentimentale pour vous, vous pouvez
          toujours demander à Jenkins de le conserver à tout jamais en utilisant le bouton
          de conservation sans limite de temps sur la page de détails du build (voir <xref linkend="fig-jenkins-keep-forever"/>).
          Notez que ce bouton n'apparaitra seulement que si vous avez demandé à Jenkins de
          supprimer les anciens builds.</para>
      <figure float="0" id="fig-jenkins-keep-forever">
        <title>Conserver un build sans limite de temps</title>
        <mediaobject id="I_mediaobject5_d1e5142">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0503.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0503.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>En plus de cela, Jenkins ne supprimera jamais le dernier build stable qui
          s'est terminé avec succès, peu importe son ancienneté. Par exemple, si vous limitez
          Jenkins pour ne conserver que les vingt derniers builds et que votre dernier build
          qui s'est terminé avec succès s'est exécuté trente builds plus tôt, Jenkins
          le conservera en plus des vingt derniers builds échoués.</para>
      <para>Vous<indexterm id="I_indexterm5_d1e5151" significance="normal"><primary>tâches de build free-style</primary><secondary>désactiver</secondary></indexterm> avez aussi la
          possibilité de désactiver une tâche. Une tâche désactivée ne sera pas exécutée tant que
          vous ne l'aurez pas réactivé. Utiliser cette option lorsque vous venez de créer
          votre job est cependant assez rare. D'un autre côté, cette option est souvent utile
          lorsque vous devez suspendre temporairement une tâche pendant une maintenance ou une
          grande refactorisation du projet et plus généralement lorsqu'une notification d'echec
          de la tâche de build ne sera pas utile à l'équipe.</para>
    </sect2>
    <sect2>
      <title>Options avancées du projet</title>
      <para>Les options avancées du projet contiennent, comme l'indique le
          nom de cette section, des options de configuration moins courantes.
          Vous devrez cliquer sur le bouton Avancé pour les faire apparaitre.
          (voir <xref linkend="fig-hudson-new-project-advanced"/>).</para>
      <figure float="none" id="fig-hudson-new-project-advanced">
        <title>Pour afficher les options avancées, vous devez cliquer sur le bouton
            Avancé...</title>
        <mediaobject id="I_mediaobject5_d1e5167">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0504.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0504.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>L'option<indexterm id="I_indexterm5_d1e5174" significance="normal"><primary>tâches de build free-style</primary><secondary>période d'attente</secondary></indexterm><indexterm id="I_indexterm5_d1e5179" significance="normal"><primary>période d'attente avant que le build ne soit lancé</primary></indexterm> période d'attente dans la configuration du job vous permet simplement
          d'outrepasser la période d'attente définie globalement dans la configuration
          du système de Jenkins (voir <xref linkend="sect-configuration-system"/>). Cette
          option est principalement utilisée pour les systèmes de gestion de version qui ne
          supportent pas les commits atomiques, comme par exemple
          <indexterm id="I_indexterm5_d1e5185" significance="normal"><primary>CVS</primary><secondary>retarder la construction d'un job</secondary></indexterm>CVS, mais également dans les équipes où les développeurs ont
          pour habitude de diviser le commit de leur travail en plusieurs petites contributions.</para>
      <para>L'option<indexterm id="I_indexterm5_d1e5193" significance="normal"><primary>tâches de build free-style</primary><secondary>bloquer pour un projet en amont</secondary></indexterm> “Empêcher le build quand un projet en amont est en cours de build” est utile lorsque plusieurs
          projets liés sont affectés par un seul commit mais qu'ils doivent être construits
          dans un ordre spécifique. Si vous activez cette option, Jenkins attendra que toutes
          les tâches de build en amont (voir <xref linkend="sect-build-triggers"/>) soient terminés
          avant de démarrer le build.</para>
      <para>Par exemple, lorsque vous livrez une nouvelle version d'un projet Apache
          Maven multimodule, la mise à jour du numéro de version se fera dans plusieurs,
          voir l'ensemble, des modules du projet. Supposons que nous ayons ajouté une application
          web au projet Game of Life que nous avons utilisé dans le <xref linkend="chapter-first-steps"/>,
          et que nous l'ayons ajouté sous la forme d'un projet Apache Maven séparé. Lorsque que
          nous livrons une nouvelle version de ce projet, aussi bien le numéro de version du core que celui de
          l'application web seront mis à jour (voir <xref linkend="fig-hudson-new-job-version-updates"/>).
          Avant de pouvoir construire l'application web, nous devons construire une nouvelle version
          du module core de Game of Life. Si vous avez cependant des tâches de build free-style séparés
          pour chaque module, les tâches de build de l'application web et du core démarreraient
          simultanément. Le build de l'application web échouera si le build du core n'a pas produit
          de nouvelle version du module du core, même s'il n'y a pas de test échoué.</para>
      <para>Pour éviter ce problème, vous pourriez configurer la tâche de build de l'application web
          pour ne démarrer <emphasis>seulement</emphasis> lorsque le build du core s'est terminé
          avec succès. Cela signifie cependant que l'application web ne serai jamais construite
          si des changements été effectué uniquement pour celle-ci et non pour le module core.
          Une meilleure approche est alors d'utiliser l'option “Construire à la suite d'autres
          projets (projets en amont)”. Dans ce cas, lorsqu'un numéro de version a été mis à jour
          dans le contrôle de version, Jenkins programmera les deux builds pour leur exécution.
          Il attendra cependant que le build du module core se soit terminé pour démarrer le build
          de l'application web.</para>
      <figure float="none" id="fig-hudson-new-job-version-updates">
        <title>L'option “Empêcher le build quand un projet en aval est en cours de build” est
            utile quand un simple commit affecte plusieurs projets dépendants les uns des autres.</title>
        <mediaobject id="I_mediaobject5_d1e5215">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0505.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0505.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Vous <indexterm id="I_indexterm5_d1e5222" significance="normal"><primary>tâches de build free-style</primary><secondary>espace de travail pour, surcharger</secondary></indexterm>pouvez également surcharger l'espace de travail par défaut utilisé par Jenkins pour
          y tirer le code source et construire votre projet. De manière générale, Jenkins
          créera un espace de travail spécifique pour votre projet accessible
          dans le répertoire de la tâche de build de votre projet (voir <xref linkend="sec-hudson-home-directory-contents"/>). Cela fonctionne dans
          presque tous les cas. Il y a cependant des cas dans lesquels vous
          pourriez avoir besoin de forcer Jenkins à utiliser un espace de travail
          différent grâce à cette option. Un example serait le cas où vous
          auriez besoin de construire plusieurs tâches de build dans un même espace de
          travail. Vous pouvez définir un répertoire de travail différent en <phrase role="keep-together">cochant</phrase> l'option “Utiliser un répertoire de travail spécifique”
          et en spécifiant le chemin vous même. Ce chemin peut aussi bien être absolu ou relatif au
          répertoire de base de Jenkins.</para>
      <para>Nous verrons d'autres options avancées qui apparaissent dans
          cette section plus loin dans ce <indexterm id="I_indexterm5_d1e5235" class="endofrange" startref="ch05-free" significance="normal"><primary/></indexterm> livre.</para>
    </sect2>
  </sect1>
  <sect1 id="sect-subversion">
    <title>Configuring Source Code Management</title>
    <para>In<indexterm class="startofrange" id="ch05-scm" significance="normal"><primary>SCM (Source Code Management)</primary></indexterm> its most basic role, a Continuous Integration server
    monitors your version control system, and checks out the latest changes as
    they occur. The server then compiles and tests the most recent version of
    the code. Alternatively, it may simply check out and build the latest
    version of your source code on a regular basis. In either case, tight
    integration with your version control system is essential.</para>
    <para>Because of its fundamental role, SCM configuration options in
    Jenkins are identical across all sorts of build jobs. Jenkins <indexterm id="I_indexterm5_d1e5249" significance="normal"><primary>version control systems</primary><secondary>supported by Jenkins</secondary></indexterm><indexterm id="I_indexterm5_d1e5254" significance="normal"><primary>Jenkins</primary><secondary>version control systems supported by</secondary></indexterm>supports CVS and Subversion out of the box, with built-in
    support for Git, and also integrates with a large number of other version
    control systems via plugins. At the time of writing, SCM plugin support
    includes Accurev, Bazaar, BitKeeper, ClearCase, CMVC, Dimensions, Git, CA
    Harvest, Mercurial, Perforce, PVCS, StarTeam, CM/Synergy, Microsoft Team
    Foundation Server, and even Visual SourceSafe. In the rest of this
    section, we will look at how to configure some of the more common SCM
    tools.</para>
    <sect2>
      <title>Working with Subversion</title>
      <para>Subversion<indexterm class="startofrange" id="ch05-sub1" significance="normal"><primary>freestyle build jobs</primary><secondary>Subversion used with</secondary></indexterm><indexterm class="startofrange" id="ch05-sub2" significance="normal"><primary>Subversion</primary><secondary sortas="free-style">with freestyle build jobs</secondary></indexterm> is one of the most widely used version control systems,
      and Jenkins comes bundled with full Subversion support (see <xref linkend="fig-hudson-new-job-svn"/>). To use source code from a
      Subversion repository, you simply provide the corresponding Subversion
      URL—it will work fine with any of the three Subversion protocols of
      (http, svn, or file). Jenkins will check that the URL is valid as soon
      as you enter it. If the repository requires authentication, Jenkins will
      prompt you for the corresponding credentials automatically, and store
      them for any other build jobs that access this repository.</para>
      <figure float="0" id="fig-hudson-new-job-svn">
        <title>Jenkins provides built-in support for Subversion</title>
        <mediaobject id="I_mediaobject5_d1e5281">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0506.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0506.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>By default, Jenkins will check out the repository contents into a
      subdirectory of your workspace, whose name will match the last element
      in the Subversion URL. So if your Subversion URL is <ulink url="svn://localhost/gameoflife/trunk"/>, Jenkins will check out
      the repository contents to a directory called <filename moreinfo="none">trunk</filename> in the build job workspace. If you
      would prefer another directory name, just enter the directory name you
      want in the <command moreinfo="none">Local module directory</command>
      field. Place a period (“.”) here if you want Jenkins to check the source
      code directly into the workspace.</para>
      <para>Occasionally you may need to get source code from more than one
      Subversion URL. In this case, just use the “Add more locations...”
      button to add as many additional <phrase role="keep-together">repository</phrase> sources as you need.</para>
      <para>A well-designed build process should not modify the source code,
      or leave any extra files that might confuse your version control system
      or the build process. Both generated artifacts and temporary files (such
      as log files, reports, test data or file-based databases) should go in a
      directory set aside for this purpose (such as the <filename moreinfo="none">target</filename> directory in Maven builds), and/or be
      configured to be ignored by your version control repository. They should
      also be deleted as part of the build process, once the build has
      finished with them. This is also an important part of ensuring a clean
      and reproducible build <phrase role="keep-together">process—</phrase>for
      a given version of your source code, your build should behave in exactly
      the same way, no matter where or when it is run. Locally changed source
      code files, and the presence of temporary files, both have the potential
      of compromising this.</para>
      <para>You can fine-tune the way Jenkins obtains the latest source code
      from your Subversion repository by selecting an appropriate value in the
      Check-out Strategy drop-down list. If your project is well-behaved,
      however, you may be able to speed things up substantially by selecting
      “Use ‘svn update’ as much as possible”. This is the fastest option, but
      may leave artifacts and files from previous builds in your workspace. To
      be on the safe side, you may want to use the second option (“Use ‘svn
      update’ as much as possible, with ‘svn revert’ before update”), which
      will systematically run <literal moreinfo="none">svn revert</literal> before running
      <literal moreinfo="none">svn update</literal>. This will ensure that no local files have
      been modified, though it will not remove any new files that have been
      created during the build process. Alternatively, you can ask Jenkins to
      delete any unversioned or ignored files before performing an
      <literal moreinfo="none">svn update</literal>, or play it safe by checking out a full
      clean copy for each build.</para>
      <para>Another<indexterm id="I_indexterm5_d1e5322" significance="normal"><primary>source code browsers</primary><secondary sortas="Subversion">with Subversion</secondary></indexterm><indexterm id="I_indexterm5_d1e5327" significance="normal"><primary>freestyle build jobs</primary><secondary>Subversion used with</secondary><tertiary>source code browsers for</tertiary></indexterm><indexterm id="I_indexterm5_d1e5334" significance="normal"><primary>Subversion</primary><secondary>source code browsers for</secondary></indexterm> very useful feature is Jenkins’s integration with source
      code browsers. A good source code browser is an important part of your
      Continuous Integration setup. It lets you see at a glance what changes
      triggered a given build, which is very useful when it comes to
      troubleshooting broken builds (see <xref linkend="fig-hudson-new-job-diff"/>). Jenkins integrates with most of
      the major source code browsers, including open source tools such as
      WebSVN and Sventon, and commercial ones like Atlassian’s FishEye.</para>
      <figure float="0" id="fig-hudson-new-job-diff">
        <title>Source code browser showing what code changes caused a
        build</title>
        <mediaobject id="I_mediaobject5_d1e5345">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0507.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0507.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Jenkins<indexterm id="I_indexterm5_d1e5352" significance="normal"><primary>freestyle build jobs</primary><secondary>Subversion used with</secondary><tertiary>excluding regions from triggering</tertiary></indexterm><indexterm id="I_indexterm5_d1e5359" significance="normal"><primary>Subversion</primary><secondary>excluding regions from triggering builds</secondary></indexterm> also lets you refine the changes that will trigger a
      build. In the Advanced section, you can use the Excluded Regions field
      to tell Jenkins not to trigger a build if only certain files were
      changed. This field takes a list of regular expressions, which identify
      files that should <emphasis>not</emphasis> trigger a build. For example,
      suppose you don’t want Jenkins to start a new build if only images have
      been changed. To do this, you could use a set of regular expressions
      like the following:</para>
      <programlisting id="I_programlisting5_d1e5368" format="linespecific">/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.jpg
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.gif
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.png</programlisting>
      <para>Alternatively, you can specify the Included Regions, if you are
      only interested in changes in part of the source code directory
      structure. You can even combine the Excluded Regions and Included
      Regions fields—in this case a modified file will only trigger a build if
      it is in the Included Regions but not in the Excluded Regions.</para>
      <para>You <indexterm id="I_indexterm5_d1e5375" significance="normal"><primary>freestyle build jobs</primary><secondary>Subversion used with</secondary><tertiary>excluding users from triggering</tertiary></indexterm><indexterm id="I_indexterm5_d1e5382" significance="normal"><primary>users</primary><secondary>excluding from triggering builds</secondary></indexterm><indexterm id="I_indexterm5_d1e5387" significance="normal"><primary>Subversion</primary><secondary>excluding users from triggering builds</secondary></indexterm>can also ignore changes coming from certain users
      (Excluded Users), or with certain <indexterm id="I_indexterm5_d1e5393" significance="normal"><primary>commit messages, excluding from triggering build
          jobs</primary></indexterm><indexterm id="I_indexterm5_d1e5396" significance="normal"><primary>freestyle build jobs</primary><secondary>Subversion used with</secondary><tertiary>excluding commit messages from triggering</tertiary></indexterm><indexterm id="I_indexterm5_d1e5403" significance="normal"><primary>Subversion</primary><secondary>excluding commit messages from triggering
          builds</secondary></indexterm>commit messages (Excluded Commit Messages). For example,
      if your project uses Maven, you may want to use the Maven Release Plugin
      to promote your application from snapshot<indexterm id="I_indexterm5_d1e5409" significance="normal"><primary>SNAPSHOT versions</primary></indexterm><indexterm id="I_indexterm5_d1e5412" significance="normal"><primary>Maven</primary><secondary>SNAPSHOT versions</secondary></indexterm> versions to official releases. This plugin will
      automatically bump up the version number of your application from a
      snapshot version used during development (such as 1.0.1-SNAPSHOT) to a
      release (1.0.1), bundles up and deploys a release of your application
      with this version number, and then moves the version on to the next
      snapshot number (e.g., 1.0.2-SNAPSHOT) for ongoing development. During
      this <phrase role="keep-together">process</phrase> Maven takes care of
      many SCM bookkeeping tasks, such as committing the source code with the
      release version number and creating a tag for the released version of
      your application, and then committing the source code with the new
      snapshot version <phrase role="keep-together">number</phrase>.</para>
      <para>Now suppose you have a special build job for generating a new
      release using this <phrase role="keep-together">process</phrase>. The
      many commits generated by the Maven Release Plugin would normally
      trigger off build jobs in Jenkins. However, since the release build job
      is already compiling and testing this version of your application, you
      don’t need Jenkins to do it again in a separate build job. To ensure
      that Jenkins does not trigger a build for this case, you can use the
      Excluded Commit Messages field with the following value:</para>
      <programlisting id="I_programlisting5_d1e5430" format="linespecific">[maven-release-plugin] prepare release.*</programlisting>
      <para>This will ensure that Jenkins skips the changes corresponding to
      the new release version, but not those corresponding to the next
      <indexterm id="I_indexterm5_d1e5434" class="endofrange" startref="ch05-sub1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e5436" class="endofrange" startref="ch05-sub2" significance="normal"><primary/></indexterm>snapshot version.</para>
    </sect2>
    <sect2 id="git-plugin">
      <title>Working with Git</title>
      <para>
        <emphasis>Contributed by Matthew McCullough</emphasis>
      </para>
      <para><ulink url="http://git-scm.com/">Git</ulink> is <indexterm class="startofrange" id="ch05-git1" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary></indexterm><indexterm class="startofrange" id="ch05-git2" significance="normal"><primary>Git</primary><secondary sortas="free-style">with freestyle build jobs</secondary></indexterm>a popular distributed version control system that is a
      logical successor to <ulink url="http://subversion.tigris.org/">Subversion</ulink> and a mind-share
      competitor to <ulink url="http://mercurial.selenic.com/">Mercurial</ulink>. Git support in
      Jenkins is both mature and full-featured. There are a number of plugins
      that can contribute to the overall story of Git in Jenkins. We will
      begin by looking at the Git plugin, which provides core Git support in
      Jenkins. We’ll discuss the supplemental plugins shortly.</para>
      <sect3 id="installing-the-plugin">
        <title>Installing the plugin</title>
        <para>The Git plugin <indexterm class="startofrange" id="ch05-gitinstall1" significance="normal"><primary>Git plugin</primary></indexterm><indexterm class="startofrange" id="ch05-gitinstall2" significance="normal"><primary>plugins</primary><secondary>Git</secondary></indexterm>is available in the Jenkins Plugin Manager and is
        documented on its own <ulink url="http://wiki.hudson-ci.org/display/HUDSON/Git+Plugin">wiki
        page</ulink>. The plugin assumes that Git (version 1.3.3 or later) has
        already been installed on your build server, so you will need to make
        sure that this is the case. You can do this by running the following
        command on your build server:</para>
        <screen format="linespecific">$ <userinput moreinfo="none">git --version</userinput>
git version 1.7.1</screen>
        <para>Next, go back to Jenkins, check the corresponding check box in
        the Jenkins Plugin Manager page and click the Install button.</para>
        <sect4 id="system-wide-configuration-of-the-plugin">
          <title>System-wide configuration of the plugin</title>
          <para>After installing the Git plugin, a small new set of
          configuration options will be available on the Manage Jenkins<phrase role="unicode">→</phrase>Configure System page (see <xref linkend="I_figure1_id2245320"/>). In particular, you need to
          provide the path to your Git executable. If Git is already installed
          on the system path, just put “git” here.</para>
          <figure float="0" id="I_figure1_id2245320">
            <title>System-wide configuration of the Git plugin</title>
            <mediaobject id="I_mediaobject5_d1e5503">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0508.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0508.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="ssh-key-setup">
          <title>SSH key setup</title>
          <para>If the <indexterm id="I_indexterm5_d1e5513" significance="normal"><primary>SSH keys</primary></indexterm><indexterm id="I_indexterm5_d1e5516" significance="normal"><primary>Git</primary><secondary>SSH keys</secondary></indexterm><indexterm id="I_indexterm5_d1e5521" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>SSH keys</tertiary></indexterm>Git repository you are accessing uses SSH
          passphrase-less <phrase role="keep-together">authentication—</phrase>for example, if the
          access address is similar to <literal moreinfo="none">git@github.com:matthewmccullough/some-repo.git</literal>—you’ll
          need to provide the private half of the key as file <literal moreinfo="none">~/.ssh/id_rsa</literal> where <literal moreinfo="none">~</literal> is the home directory of the user
          account under which Jenkins is <phrase role="keep-together">running</phrase>.</para>
          <para>The fingerprint of the remote server will additionally need to
          be placed in <literal moreinfo="none">~/.ssh/known_hosts</literal>
          to prevent Jenkins from invisibly prompting for authorization to
          access this Git server for the first time.</para>
          <para>Alternatively, if logging-in is enabled for the <literal moreinfo="none">jenkins</literal> user, SSH into the Jenkins machine
          as <literal moreinfo="none">jenkins</literal> and manually attempt
          to Git clone a remote repository. This will test your private key
          setup and establish the <literal moreinfo="none">known_hosts</literal> file in the <literal moreinfo="none">~/.ssh</literal> directory. This is probably the
          simplest option for users unfamiliar with the intricacies of SSH
          <phrase role="keep-together">configuration</phrase>.<indexterm id="I_indexterm5_d1e5568" class="endofrange" startref="ch05-gitinstall1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e5570" class="endofrange" startref="ch05-gitinstall2" significance="normal"><primary/></indexterm></para>
        </sect4>
      </sect3>
      <sect3 id="using-the-plugin">
        <title>Using the plugin</title>
        <para>On <indexterm id="I_indexterm5_d1e5577" significance="normal"><primary>Git</primary><secondary>repository address</secondary></indexterm><indexterm id="I_indexterm5_d1e5582" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>repository address</tertiary></indexterm>either an existing or a new Jenkins project, a new
        Source Code Management option for Git will be displayed. From here,
        you can configure one or more repository addresses (see <xref linkend="I_figure1_id2245479"/>). One repository is usually enough
        for most projects: adding a second repository can be useful in more
        complicated cases, and lets you specify distinct named locations for
        <literal moreinfo="none">pull</literal> and <literal moreinfo="none">push</literal> operations.</para>
        <sect4 id="advanced-per-project-source-code-management-configuration">
          <title>Advanced per-project source code management
          configuration</title>
          <para>In most cases, the URL of the Git repository you are using
          should be enough. However, if you need more options, click on the
          Advanced button (see <xref linkend="I_figure1_id2245574"/>). This
          provides more precise control of the <literal moreinfo="none">pull</literal> behavior.</para>
          <para>The <emphasis>Name of repository</emphasis> is a shorthand
          title (a.k.a. <literal moreinfo="none">remote</literal> in Git
          parlance) for a given repository, that you can refer to later on in
          the merge action configuration.</para>
          <para>The <emphasis>Refspec</emphasis> is a Git-specific <ulink url="http://progit.org/book/ch9-5.html">language</ulink> for
          controlling precisely what is retrieved from remote servers and
          under what namespace it is stored locally.</para>
        </sect4>
        <sect4 id="branches-to-build">
          <title>Branches to build</title>
          <para>The <indexterm id="I_indexterm5_d1e5629" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>branches to build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5636" significance="normal"><primary>Git</primary><secondary>branches to build</secondary></indexterm>branch specifier (<xref linkend="I_figure1_id2245638"/>) is the wildcard pattern or
          specific branch name that should be built by Jenkins. If left blank,
          all branches will be built. At the time of this writing, after the
          first time saving a job with a blank <emphasis>branches to
          build</emphasis> setting, it is populated with <literal moreinfo="none">**,</literal> which means “build all
          branches.”</para>
          <figure float="none" id="I_figure1_id2245479">
            <title>Entering a Git repo URL</title>
            <mediaobject id="I_mediaobject5_d1e5653">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0509.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0509.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure float="none" id="I_figure1_id2245574">
            <title>Advanced configuration of a Git repo URL</title>
            <mediaobject id="I_mediaobject5_d1e5661">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0510.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0510.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure float="0" id="I_figure1_id2245638">
            <title>Advanced configuration of the Git branches to build</title>
            <mediaobject id="I_mediaobject5_d1e5669">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0511.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0511.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="excluded-regions">
          <title>Excluded regions</title>
          <para>Regions (seen in <xref linkend="I_figure1_id2245692"/>)
          <indexterm id="I_indexterm5_d1e5681" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>excluding regions from triggering</tertiary></indexterm><indexterm id="I_indexterm5_d1e5688" significance="normal"><primary>Git</primary><secondary>excluding regions from triggering builds</secondary></indexterm>are named specific or wildcard paths in the codebase
          that, even when changed, should not trigger a build. Commonly these
          are noncompiled files such as localization bundles or images, which,
          understandably might not have an effect on unit or integration
          tests.</para>
          <figure float="0" id="I_figure1_id2245692">
            <title>Branches and regions</title>
            <mediaobject id="I_mediaobject5_d1e5697">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0512.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0512.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="excluded-users">
          <title>Excluded users</title>
          <para>The <indexterm id="I_indexterm5_d1e5707" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>excluding users from triggering</tertiary></indexterm><indexterm id="I_indexterm5_d1e5714" significance="normal"><primary>users</primary><secondary>excluding from triggering builds</secondary></indexterm><indexterm id="I_indexterm5_d1e5719" significance="normal"><primary>Git</primary><secondary>excluding users from triggering builds</secondary></indexterm>Git plugin also lets you ignore certain users, even if
          they make changes to the codebase that would typically trigger a
          build.</para>
          <para>This is not as spiteful as it sounds: excluded users are
          typically automated users, not human developers, that happen to have
          distinct accounts with commit rights in the source control system.
          These automated users often are performing small numeric changes
          such as bumping up version numbers in a <filename moreinfo="none">pom.xml</filename> file, rather than making actual
          logic changes. If you want to exclude several users, just place them
          on separate lines.</para>
        </sect4>
        <sect4 id="checkoutmerge-to-local-branch">
          <title>Checkout/merge to local branch</title>
          <para>There <indexterm id="I_indexterm5_d1e5735" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>checking out to local branch</tertiary></indexterm><indexterm id="I_indexterm5_d1e5742" significance="normal"><primary>Git</primary><secondary>checking out to local branch</secondary></indexterm>are times when you may want to create a local branch
          from the tree you’ve specified, rather than just using a direct
          <emphasis>detached HEAD</emphasis> checkout of the commit’s hash. In
          this case, just specify your local branch in the “Checkout/merge to
          a local branch” field.</para>
          <para>This is a little easier to illustrate with an example. Without
          specifying a local branch, the plugin would do something like
          this:</para>
          <screen format="linespecific">git checkout 73434e4a0af0f51c242f5ae8efc51a88383afc8a</screen>
          <para>On the other hand, if you use a local branch named <literal moreinfo="none">mylocalbranch</literal>, Jenkins would do the
          following:</para>
          <screen format="linespecific">git branch -D mylocalbranch
git checkout -b mylocalbranch 73434e4a0af0f51c242f5ae8efc51a88383afc8a</screen>
        </sect4>
        <sect4 id="local-subdirectory-for-repo">
          <title>Local subdirectory for repo</title>
          <para>By <indexterm id="I_indexterm5_d1e5767" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>workspace location, overriding</tertiary></indexterm><indexterm id="I_indexterm5_d1e5774" significance="normal"><primary>Git</primary><secondary>workspace location, overriding</secondary></indexterm>default, Jenkins will clone the Git repository
          directly into the build job workspace. If you prefer to use a
          different directory, you can specify it here. Note that the
          directory you specify is relative to the build job workspace.</para>
        </sect4>
        <sect4 id="merge-before-build">
          <title>Merge before build</title>
          <para>The <indexterm id="I_indexterm5_d1e5785" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>merging before build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5792" significance="normal"><primary>Git</primary><secondary>merging before build</secondary></indexterm>typical recipe for using this option is to fold an
          integration branch into a branch more similar to <literal moreinfo="none">master</literal>. Keep in mind that only
          conflict-less merges will happen automatically. More complex merges
          that require manual intervention will fail the build.</para>
          <para>The resultant merged branch will not automatically be pushed
          to another repository unless the later <literal moreinfo="none">push</literal>
          post-build action is enabled.</para>
        </sect4>
        <sect4 id="prune-remote-branches-before-build">
          <title>Prune remote branches before build</title>
          <para>Pruning <indexterm id="I_indexterm5_d1e5811" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>pruning branches before build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5818" significance="normal"><primary>Git</primary><secondary>pruning branches before build</secondary></indexterm>removes local copies of remote branches that exist as
          a remnant of the previous clone, but are no longer present on the
          remote. In short, this is cleaning the local clone to be in perfect
          sync with its remote siblings.</para>
        </sect4>
        <sect4 id="clean-after-checkout">
          <title>Clean after checkout</title>
          <para>Activate <indexterm id="I_indexterm5_d1e5829" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>cleaning after checkout</tertiary></indexterm><indexterm id="I_indexterm5_d1e5836" significance="normal"><primary>Git</primary><secondary>cleaning after checkout</secondary></indexterm>Git’s facilities for purging any untracked files or
          folders, returning your working copy to a pristine state.</para>
        </sect4>
        <sect4 id="recursively-update-submodules">
          <title>Recursively update submodules</title>
          <para>If <indexterm id="I_indexterm5_d1e5848" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>recursively update submodules</tertiary></indexterm><indexterm id="I_indexterm5_d1e5855" significance="normal"><primary>Git</primary><secondary>recursively update submodules</secondary></indexterm>you are using Git’s submodule facilities in the
          project, this option lets you ensure that every submodule is
          up-to-date with an explicit call to <literal moreinfo="none">update</literal>, even if submodules are nested
          within other submodules.</para>
        </sect4>
        <sect4 id="use-commit-author-in-changelog">
          <title>Use commit author in changelog</title>
          <para>Jenkins<indexterm id="I_indexterm5_d1e5869" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>commit author, including in changelog</tertiary></indexterm><indexterm id="I_indexterm5_d1e5876" significance="normal"><primary>Git</primary><secondary>commit author, including in changelog</secondary></indexterm> tracks and displays the author of changed code in a
          summarized view. Git tracks both the committer and author of code
          distinctly, and this option lets you toggle which of those two
          usernames is displayed in the changelog.</para>
        </sect4>
        <sect4 id="wipe-out-workspace">
          <title>Wipe out workspace</title>
          <para>Typically<indexterm id="I_indexterm5_d1e5887" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>workspace, wiping out before build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5894" significance="normal"><primary>Git</primary><secondary>workspace, wiping out before build</secondary></indexterm> Jenkins will reuse the workspace, merely freshening
          the checkout as necessary and, if you activated the “Clean after
          checkout” option, cleaning up untracked files. However, if you
          prefer to have a completely clean workspace, you can use the “Wipe
          out workspace” option to delete and rebuild the workspace from the
          ground up. Bear in mind that this may significantly lengthen the
          time it takes to initialize and build the project.</para>
        </sect4>
        <sect4 id="choosing-strategy">
          <title>Choosing strategy</title>
          <para>Jenkins <indexterm id="I_indexterm5_d1e5905" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>branches to build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5912" significance="normal"><primary>Git</primary><secondary>branches to build</secondary></indexterm>decides which branches to build based on a
          <emphasis>strategy</emphasis> (see <xref linkend="I_figure1_id2245980"/>). Users can influence this
          branch-search process. The default choice is to search for all
          branch HEADs. If the Gerrit plugin is installed, additional options
          for building all Gerrit-notified commits are displayed.</para>
          <figure float="none" id="I_figure1_id2245980">
            <title>Choosing strategy</title>
            <mediaobject id="I_mediaobject5_d1e5926">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0513.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0513.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="git-executable">
          <title>Git executable</title>
          <para>In the <indexterm id="I_indexterm5_d1e5936" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>Git executable, specifying</tertiary></indexterm>global options of Jenkins (see <xref linkend="I_figure1_id2246035"/>), different Git executables can be
          set up and used on a per-build basis. This is infrequently used, and
          only when the clone or other Git operations are highly sensitive to
          a particular version of Git. Git tends to be very version-flexible;
          slightly older repositories can easily be cloned with a newer
          version of Git and vice-versa.</para>
          <figure float="0" id="I_figure1_id2246035">
            <title>Git executable global setup</title>
            <mediaobject id="I_mediaobject5_d1e5949">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0514.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0514.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="repository-browser">
          <title>Repository browser</title>
          <para>Like <indexterm id="I_indexterm5_d1e5959" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>source code browsers for</tertiary></indexterm><indexterm id="I_indexterm5_d1e5966" significance="normal"><primary>Git</primary><secondary>source code browsers for</secondary></indexterm><indexterm id="I_indexterm5_d1e5971" significance="normal"><primary>source code browsers</primary><secondary sortas="Git">with Git</secondary></indexterm>Subversion, Git has several source code browsers that
          you can use. The most common ones are Gitorious, Git Web, or
          <indexterm id="I_indexterm5_d1e5977" significance="normal"><primary>GitHub repository</primary></indexterm>GitHub. If you provide the URL to the corresponding
          repository browser, Jenkins will be able to display a link to the
          source code changes that triggered a build (see <xref linkend="I_figure1_id2246089"/>).</para>
          <figure float="0" id="I_figure1_id2246089">
            <title>Repository browser</title>
            <mediaobject id="I_mediaobject5_d1e5986">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0515.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0515.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
      </sect3>
      <sect3 id="build-triggers">
        <title>Build triggers</title>
        <para>The <indexterm class="startofrange" id="ch05-gittrigger1" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>build triggers</tertiary></indexterm><indexterm class="startofrange" id="ch05-gittrigger2" significance="normal"><primary>Git</primary><secondary>build triggers</secondary></indexterm>basic Git plugin offers the ability to <emphasis>Poll
        SCM</emphasis> on a timed basis, looking for changes since the last
        inquiry. If changes are found, a build is started. The polling log
        (shown in <xref linkend="I_figure1_id2246150"/>) is accessible via a
        link on the left hand side of the page in the navigation bar when
        viewing a specific job. It offers information on the last time the
        repository was polled and if it replied with a list of changes (see
        <xref linkend="I_figure1_id2246192"/>).</para>
        <figure float="0" id="I_figure1_id2246150">
          <title>Polling log</title>
          <mediaobject id="I_mediaobject5_d1e6019">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0516.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0516.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The Git polling is distilled into a more developer-useful format
        that shows commit comments as well as hyperlinking usernames and
        changed files to more detailed views of each.</para>
        <figure float="0" id="I_figure1_id2246192">
          <title>Results of Git polling</title>
          <mediaobject id="I_mediaobject5_d1e6029">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0517.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0517.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Installing the <emphasis>Gerrit Build Trigger</emphasis> adds a
        <emphasis>Gerrit event</emphasis> option that can be more efficient
        and precise than simply polling the repository.</para>
        <sect4 id="gerrit-trigger">
          <title>Gerrit Trigger</title>
          <para><ulink url="http://code.google.com/p/gerrit/">Gerrit</ulink>
          is<indexterm id="I_indexterm5_d1e6049" significance="normal"><primary>Gerrit Trigger plugin</primary></indexterm><indexterm id="I_indexterm5_d1e6052" significance="normal"><primary>plugins</primary><secondary>Gerrit Trigger</secondary></indexterm> an open source web application that facilitates
          <ulink url="https://review.source.android.com/#q,status:open,n,z">code
          reviews</ulink> for project source hosted on a Git version control
          system. It reads a traditional Git repository, and provides a
          side-by-side comparison of changes. As the code is reviewed, Gerrit
          provides a location to comment and move the patch to an
          <emphasis>open</emphasis>, <emphasis>merged</emphasis>, or
          <emphasis>abandoned</emphasis> status.</para>
          <para>The <ulink url="http://wiki.hudson-ci.org/display/HUDSON/Gerrit+Trigger">Gerrit
          Trigger</ulink> is a Jenkins plugin that can trigger a Jenkins build
          of the code when any user-specified activity happens in a
          user-specified project in the Git repository (see <xref linkend="I_figure1_id2246304"/>). It is a alternative to the more
          typically-used <emphasis>Build periodically</emphasis> or
          <emphasis>Poll SCM</emphasis>.</para>
          <figure float="0" id="I_figure1_id2246304">
            <title>Gerrit Trigger</title>
            <mediaobject id="I_mediaobject5_d1e6087">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0518.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0518.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>The configuration for this plugin is minimal and focused on
          the <emphasis>Project Type</emphasis> and
          <emphasis>Pattern</emphasis> and <emphasis>Branch Type</emphasis>
          and <emphasis>Pattern</emphasis>. In each pair, the
          <emphasis>type</emphasis> can be <emphasis>Plain</emphasis>,
          <emphasis>Path</emphasis>, or <phrase role="keep-together"><emphasis>RegExp</emphasis>—</phrase>pattern
          flavors of what to watch—and then the value
          (<emphasis>pattern</emphasis>) to evaluate using the
          <emphasis>type</emphasis> as<indexterm id="I_indexterm5_d1e6127" class="endofrange" startref="ch05-gittrigger1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6130" class="endofrange" startref="ch05-gittrigger2" significance="normal"><primary/></indexterm> the guide.</para>
        </sect4>
      </sect3>
      <sect3 id="post-build-actions">
        <title>Post-build actions</title>
        <para>The<indexterm class="startofrange" id="ch05-postbuild1" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>post-build merging and pushing actions</tertiary></indexterm><indexterm class="startofrange" id="ch05-postbuild2" significance="normal"><primary>Git</primary><secondary>post-build merging and pushing actions</secondary></indexterm> Git plugin for Jenkins adds Git-specific capabilities
        to the post-processing of the build artifacts. Specifically, the Git
        Publisher (shown in <xref linkend="I_figure1_id2246534"/>) offers
        merging and pushing actions. Check the Git Publisher checkbox to
        display four options.</para>
        <figure float="none" id="I_figure1_id2246534">
          <title>Git Publisher</title>
          <mediaobject id="I_mediaobject5_d1e6156">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0520.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0520.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <sect4 id="push-only-if-build-succeeds">
          <title>Push only if build succeeds</title>
          <para>If a merge or other commit-creating action has been taken
          during the Jenkins build, it can be enabled to push to a
          remote.</para>
        </sect4>
        <sect4 id="merge-results">
          <title>Merge results</title>
          <para>If prebuild merging is configured, push the merge-resultant
          branch to its origin (see <xref linkend="I_figure1_id2246482"/>).</para>
          <figure float="none" id="I_figure1_id2246482">
            <title>Merge results</title>
            <mediaobject id="I_mediaobject5_d1e6176">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0519.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0519.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="tags">
          <title>Tags</title>
          <para>When pushing tags, each tag can be named and chosen to be
          created if it does not exist (which fails if it does already exist).
          Environment variables can be embedded in the tag name. Examples
          include the process ID such as <literal moreinfo="none">HUDSON_BUILD_$PPID</literal> or even a build number,
          if that is provided by a Jenkins plugin, such as <literal moreinfo="none">$HUDSON_AUTOTAG_$BUILDNUM</literal>. Tags can be
          targeted to a specific remote such as <literal moreinfo="none">origin</literal> or <literal moreinfo="none">integrationrepo</literal>.</para>
        </sect4>
        <sect4 id="branches">
          <title>Branches</title>
          <para>The current HEAD used in the Jenkins build of the application
          can be pushed to other remotes as an after-step of the build. You
          only need to provide the destination branch name and remote
          name.</para>
          <para>Names of remotes are validated against the earlier
          configuration of the plugin. If the remote doesn’t exist, a warning
          is <indexterm id="I_indexterm5_d1e6205" class="endofrange" startref="ch05-postbuild1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6207" class="endofrange" startref="ch05-postbuild2" significance="normal"><primary/></indexterm>displayed.</para>
        </sect4>
      </sect3>
      <sect3 id="github-plugin">
        <title>GitHub plugin</title>
        <para>The <indexterm id="I_indexterm5_d1e6215" significance="normal"><primary>GitHub plugin</primary></indexterm><indexterm id="I_indexterm5_d1e6218" significance="normal"><primary>plugins</primary><secondary>GitHub</secondary></indexterm>GitHub plugin offers two integration points. First, it
        offers an optional link to the project’s GitHub home page. Just enter
        the URL for the project (without the tree/master or tree/branch part).
        For example, <literal moreinfo="none">http://github.com/matthewmccullough/git-workshop</literal>.</para>
        <para>Secondly, <indexterm id="I_indexterm5_d1e6229" significance="normal"><primary>GitHub repository</primary></indexterm>the GitHub plugin offers per-file-changed links that are
        wired via the <emphasis>Repository browser</emphasis> section of a
        job’s <emphasis>Source Code Management</emphasis> configuration (see
        <xref linkend="I_figure1_id2246641"/>).</para>
        <figure float="0" id="I_figure1_id2246641">
          <title>GitHub repository browser</title>
          <mediaobject id="I_mediaobject5_d1e6244">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0521.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0521.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>With the <literal moreinfo="none">githubweb</literal> repository
        browser chosen, all changed-detected files will be linked to the
        appropriate GitHub source-viewing <indexterm id="I_indexterm5_d1e6254" class="endofrange" startref="ch05-git1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6256" class="endofrange" startref="ch05-git2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6258" class="endofrange" startref="ch05-scm" significance="normal"><primary/></indexterm>web page (<xref linkend="I_figure1_id2246688"/>).</para>
        <figure float="none" id="I_figure1_id2246688">
          <title>GitHub repository browser</title>
          <mediaobject id="I_mediaobject5_d1e6266">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0522.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0522.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="sect-build-triggers">
    <title>Build Triggers</title>
    <para>Once<indexterm class="startofrange" id="ch05-trigger1" significance="normal"><primary>freestyle build jobs</primary><secondary>build triggers for</secondary></indexterm><indexterm class="startofrange" id="ch05-trigger2" significance="normal"><primary>build triggers</primary><secondary sortas="free-style">for freestyle build jobs</secondary></indexterm> you have configured your version control system, you need
    to tell Jenkins when to kick off a build. You set this up in the Build
    Triggers section.</para>
    <para>In a Freestyle build, there are three basic ways a build job can be
    triggered (see <xref linkend="fig-hudson-new-job-triggers"/>):</para>
    <itemizedlist>
      <listitem>
        <para>Start a build job once another build job has completed</para>
      </listitem>
      <listitem>
        <para>Kick off builds at periodical intervals</para>
      </listitem>
      <listitem>
        <para>Poll the SCM for changes</para>
      </listitem>
    </itemizedlist>
    <figure float="none" id="fig-hudson-new-job-triggers">
      <title>There are many ways that you can configure Jenkins to start a
      build job</title>
      <mediaobject id="I_mediaobject5_d1e6304">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0523.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0523.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <sect2>
      <title>Triggering a Build Job Once Another Build Job Has
      Finished</title>
      <para>The <indexterm id="I_indexterm5_d1e6314" significance="normal"><primary>build triggers</primary><secondary>when another build has finished</secondary></indexterm>first option lets you set up a build that will be run
      whenever another build has finished. This is an easy way to set up a
      build pipeline. For example, you might set up an initial build job to
      run unit and integration tests, followed by another separate build job
      to run more CPU-intensive code quality metrics. You simply enter the
      name of the preceding build job in this field. If the build job can be
      triggered by several other build jobs, just list their names here,
      separated by commas. In this case, the build job will be triggered once
      <emphasis>any</emphasis> of the build jobs in the list finish.</para>
      <para>There is a symmetrical field in the Post-build actions section of
      the preceding build job called (appropriately enough) “Build other
      projects”. This field will be automatically updated in the corresponding
      build jobs whenever you modify the “Build after other projects are
      built” field. However, unlike the “Build after other projects are built”
      field, this field gives you the option to trigger a build even if the
      build is <indexterm id="I_indexterm5_d1e6325" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>triggering another build after</tertiary></indexterm><indexterm id="I_indexterm5_d1e6332" significance="normal"><primary>unstable builds</primary><secondary>triggering another build job after</secondary></indexterm>unstable (see <xref linkend="fig-hudson-new-job-trigger-build-after"/>). This is useful,
      for example, if you want to run a code quality metrics build job even if
      there are unit test failures in the default build job.</para>
      <figure float="none" id="fig-hudson-new-job-trigger-build-after">
        <title>Triggering another build job even if the current one is
        unstable</title>
        <mediaobject id="I_mediaobject5_d1e6343">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0524.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0524.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Scheduled Build Jobs</title>
      <para>Another<indexterm class="startofrange" id="ch05-regular" significance="normal"><primary>build triggers</primary><secondary sortas="regular">at regular intervals</secondary></indexterm> strategy is simply to trigger your build job at regular
      intervals. It is important to note that this is not actually Continuous
      Integration—it is simply scheduled builds, something you could also do,
      for example, as a Unix cron job. In the early days of automated builds,
      and even today in many shops, builds are not run in response to changes
      committed to version control, but simply on a nightly basis. However, to
      be effective, a Continuous Integration server should provide feedback
      much more quickly than once a day.</para>
      <para>There are nevertheless a few cases where scheduled builds do make
      sense. This includes very long running build jobs, where quick feedback
      is less critical. For example, intensive load and performance tests
      which may take several hours to run, or <indexterm id="I_indexterm5_d1e6361" significance="normal"><primary>Sonar</primary><secondary>frequency of builds</secondary></indexterm>Sonar build jobs. Sonar is an excellent way to keep tabs
      on code quality metrics across your projects and over time, but the
      Sonar server only stores one set of data per day, so running Sonar
      builds more frequently than this is not useful.</para>
      <para>For all scheduling tasks, Jenkins uses a cron-style syntax,
      consisting of five fields separated by white space in the following
      format:</para>
      <simplelist type="vert">
        <member>MINUTE HOUR DOM MONTH DOW</member>
      </simplelist>
      <para>with the following values possible for each field:</para>
      <variablelist>
        <varlistentry>
          <term>MINUTE</term>
          <listitem>
            <para>Minutes within the hour (0–59)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>HOUR</term>
          <listitem>
            <para>The hour of the day (0–23) DOM</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DOM</term>
          <listitem>
            <para>The day of the month (1–31)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>MONTH</term>
          <listitem>
            <para>The month (1–12)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DOW</term>
          <listitem>
            <para>The day of the week (0–7) where 0 and 7 are Sunday.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>There are also a few short-cuts:</para>
      <itemizedlist>
        <listitem>
          <para>“*” represents all possible values for a field. For example,
          “* * * * *” means “once a minute.”</para>
        </listitem>
        <listitem>
          <para>You can define ranges using the “M–N” notation. For example
          “1-5” in the DOW field would mean “Monday to Friday.”</para>
        </listitem>
        <listitem>
          <para>You can use the slash notation to defined skips through a
          range. For example, “*/5” in the MINUTE field would mean “every five
          minutes.”</para>
        </listitem>
        <listitem>
          <para>A comma-separated list indicates a list of valid values. For
          example, “15,45” in the MINUTE field would mean “at 15 and 45
          minutes past every hour.”</para>
        </listitem>
        <listitem>
          <para>You can also use the shorthand values of “@yearly”,
          “@annually”, “@monthly”, “@weekly”, “@daily”, “@midnight”, and
          “@hourly”.</para>
        </listitem>
      </itemizedlist>
      <para>Typically, you will only have one line in this field, but for more
      complicated scheduling setups, you may need<indexterm id="I_indexterm5_d1e6425" class="endofrange" startref="ch05-regular" significance="normal"><primary/></indexterm> multiple lines.</para>
    </sect2>
    <sect2>
      <title>Polling the SCM</title>
      <para>As <indexterm id="I_indexterm5_d1e6433" significance="normal"><primary>build triggers</primary><secondary>polling SCM for version control changes</secondary></indexterm><indexterm id="I_indexterm5_d1e6438" significance="normal"><primary>version control systems</primary><secondary>polling for changes to trigger build</secondary></indexterm>we have seen, scheduled build jobs are usually not the
      best strategy for most <phrase role="keep-together">CI build</phrase>
      jobs. The value of any feedback is proportional to the speed in which
      you receive that feedback, and Continuous Integration is no exception.
      That is why polling the SCM is generally a better option.</para>
      <para>Polling involves asking the version control server at regular
      intervals if any changes have been committed. If any changes have been
      made to the source code in the project, Jenkins kicks off a build.
      Polling is usually a relatively cheap operation, so you can poll
      frequently to ensure that a build kicks off rapidly after changes have
      been committed. The more frequent the polling is, the faster the build
      jobs will start, and the more accurate the feedback about what change
      broke the build will be.</para>
      <para>In Jenkins, SCM polling is easy to configure, and uses the same
      cron syntax we discussed previously.</para>
      <para>The natural temptation for SCM polling is to poll as often as
      possible (for example, using “* * * * *”, or once every minute). Since
      Jenkins simply queries the version control system, and only kicks off a
      build if the source code has been modified, this approach is often
      reasonable for small projects. It shows its limits if there are a very
      large number of build jobs, as this may saturate the SCM server and the
      network with queries, many of them unnecessary. In this case, a more
      precise approach is better, where the Jenkins build job is triggered by
      the SCM when it receives a change. We discuss this option in <xref linkend="sect-build-trigger-remote"/>.</para>
      <para>If updates are frequently committed to the version control system,
      across many projects, this may cause many build jobs to be queued, which
      can in turn slow down feedback times further. You can reduce the build
      queue to some extent by polling less frequently, but at the cost of less
      precise feedback.</para>
      <para>If you are using <indexterm id="I_indexterm5_d1e6459" significance="normal"><primary>CVS</primary><secondary>polling with</secondary></indexterm>CVS, polling may not be a good option. When CVS checks for
      changes in a project, it checks each file one by one, which is a slow
      and tedious process. The best solution here is to migrate to a modern
      version control system such as Git or Subversion. The second-best
      solution is to use polling at very sparse intervals (for example, every
      30 minutes).</para>
    </sect2>
    <sect2 id="sect-build-trigger-remote">
      <title>Triggering Builds Remotely</title>
      <para>Polling <indexterm class="startofrange" id="ch05-remote1" significance="normal"><primary>build triggers</primary><secondary>remotely triggering from version control
          system</secondary></indexterm><indexterm class="startofrange" id="ch05-remote2" significance="normal"><primary>version control systems</primary><secondary>remotely triggering builds from</secondary></indexterm>can be an effective strategy for smaller projects, but it
      does not scale particularly well—with large numbers of build jobs, it is
      wasteful of network resources, and there is always a small delay between
      the code change being committed and the build job starting. A more
      precise strategy is to get the SCM system to trigger the Jenkins build
      whenever a change is committed.</para>
      <para>It is easy to start a Jenkins build job remotely. You simply
      invoke a URL of the following form:</para>
      <simplelist type="vert">
        <member>
          <emphasis>http://SERVER/jenkins/job/PROJECTNAME/build</emphasis>
        </member>
      </simplelist>
      <para>For example, if my Jenkins server was running on
      <emphasis>http://myserver:8080/jenkins</emphasis>, I could start the
      <emphasis>gameoflife</emphasis> build job by invoking the following URL
      using a tool like <literal moreinfo="none">wget</literal> or
      <literal moreinfo="none">curl</literal>:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">wget http://myserver:8080/jenkins/job/gameoflife/build</userinput></screen>
      <para>The trick, then, is to get your version control server to do this
      whenever a change is committed. The details of how to do this are
      different for each version control system. In Subversion, for example,
      you would need to write a post-commit hook script, which would trigger a
      build. You could, for example, write a Subversion hook script that
      parses the repository URL to extract the project name, and performs a
      <literal moreinfo="none">wget</literal> operation on the URL of the corresponding build
      job:</para>
      <programlisting id="I_programlisting5_d1e6510" format="linespecific">JENKINS_SERVER=http://myserver:8080/jenkins
REPOS="$1"
PROJECT=<emphasis>&lt;Regular Expression Processing Goes Here&gt;</emphasis><co id="svn-hook-1"/>
/usr/bin/wget $JENKINS_SERVER/job/${PROJECT}/build</programlisting>
      <calloutlist>
        <callout arearefs="svn-hook-1">
          <para>Use regular expression processing here to extract your project
          name from the Subversion repository URL.</para>
        </callout>
      </calloutlist>
      <para>However, this approach will only trigger one particular build, and
      relies on a convention that the default build job is based on the
      repository name in Subversion. A more flexible approach with Subversion
      is to use the Jenkins Subversion API directly, as shown here:</para>
      <programlisting id="I_programlisting5_d1e6522" format="linespecific">JENKINS_SERVER=http://myserver:8080/jenkins
REPOS="$1"
REV="$2"
UUID=`svnlook uuid $REPOS`
/usr/bin/wget \
  --header "Content-Type:text/plain;charset=UTF-8" \
  --post-data "`svnlook changed --revision $REV $REPOS`" \
  --output-document "-" \
  --timeout=2 \
  $JENKINS_SERVER/subversion/${UUID}/notifyCommit?rev=$REV</programlisting>
      <para>This would automatically start any Jenkins build jobs monitoring
      this Subversion <phrase role="keep-together">repository</phrase>.</para>
      <para>If you have activated Jenkins security, things become a little
      more complicated. In the simplest case (where any user can do anything),
      you need to activate the “Trigger builds remotely” option (see <xref linkend="fig-hudson-builds-tokens"/>), and provide a special string
      that can be used in the URL:</para>
      <simplelist type="vert">
        <member>
          <emphasis>http://SERVER/jenkins/job/PROJECTNAME/build?token=DOIT</emphasis>
        </member>
      </simplelist>
      <figure float="none" id="fig-hudson-builds-tokens">
        <title>Triggering a build via a URL using a token</title>
        <mediaobject id="I_mediaobject5_d1e6541">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0525.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0525.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This won’t work if users need to be logged on to trigger a build
      (for example, if you are using matrix or project-based security). In
      this case, you will need to provide a user name and password, as shown
      in the following example:</para>
      <?dbfo-need height=”1in”?>
      <screen format="linespecific">$ <userinput moreinfo="none">wget http://scott:tiger@myserver:8080/jenkins/job/gameoflife/build</userinput></screen>
      <para><indexterm id="I_indexterm5_d1e6554" class="endofrange" startref="ch05-remote1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6556" class="endofrange" startref="ch05-remote2" significance="normal"><primary/></indexterm>or:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">curl -u scott:tiger http://scott:tiger@myserver:8080/jenkins/job/gameoflife/build</userinput></screen>
    </sect2>
    <sect2>
      <title>Manual Build Jobs</title>
      <para>A <indexterm id="I_indexterm5_d1e6568" significance="normal"><primary>build triggers</primary><secondary>manual</secondary></indexterm><indexterm id="I_indexterm5_d1e6573" significance="normal"><primary>build jobs</primary><secondary>triggering manually</secondary></indexterm>build does not have to be triggered automatically. Some
      build jobs should only be started manually, by human intervention. For
      example, you may want to set up an automated deployment to a UAT
      environment, that should only be started on the request of the QA folks.
      In this case, you can simply leave the Build Triggers section<indexterm id="I_indexterm5_d1e6579" class="endofrange" startref="ch05-trigger1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6581" class="endofrange" startref="ch05-trigger2" significance="normal"><primary/></indexterm> empty.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect15_d1e6584">
    <title>Build Steps</title>
    <para>Now <indexterm class="startofrange" id="ch05-step" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary></indexterm>Jenkins should know where and how often to obtain the
    project source code. The next thing you need to explain to Jenkins is what
    it what to do with the source code. In a freestyle build, you do this by
    defining build steps. Build steps are the basic building blocks for the
    Jenkins freestyle build process. They are what let you tell Jenkins
    exactly <emphasis>how</emphasis> you want your project built.</para>
    <para>A build job may have one step, or more. It may even occasionally
    have none. In a freestyle build, you can add as many build steps as you
    want to the Build section of your project configuration (see <xref linkend="fig-hudson-build-steps"/>). In a basic Jenkins installation, you
    will be able to add steps to invoke Maven and Ant, as well as running
    OS-specific shell or Windows batch commands. And by installing additional
    plugins, you can also integrate other build tools, such as Groovy, Gradle,
    Grails, Jython, MSBuild, Phing, Python, Rake, and Ruby, just to name some
    of the more well-known tools.</para>
    <para>In the remainder of this section, we will delve into some of the
    more common types of build steps.</para>
    <sect2>
      <title>Maven Build Steps</title>
      <para>Jenkins <indexterm class="startofrange" id="ch05-mavenstep1" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Maven build steps</tertiary></indexterm><indexterm class="startofrange" id="ch05-mavenstep2" significance="normal"><primary>Maven</primary><secondary sortas="build steps">build steps in freestyle build
          jobs</secondary></indexterm>has excellent Maven support, and Maven build steps are
      easy to configure and very flexible. Just pick “Invoke top-level Maven
      targets” from the build step lists, pick a version of Maven to run (if
      you have multiple versions installed), and enter the Maven goals you
      want to run. Jenkins freestyle build jobs work fine with both Maven 2
      and Maven 3.</para>
      <para>Just like on the command line, you can specify as many individual
      goals as you want. You can also provide command-line options. A few
      useful Maven options in a CI context are:</para>
      <variablelist>
        <varlistentry>
          <term><literal moreinfo="none">-B</literal>, <literal moreinfo="none">--batch-mode</literal></term>
          <listitem>
            <para>This option tells Maven not to prompt for any input from the
            user, just using the default values if any are required. If Maven
            does prompt for any input during the Jenkins build, the build will
            get stuck indefinitely.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal moreinfo="none">-U</literal>,
          <literal moreinfo="none">--update-snapshots</literal></term>
          <listitem>
            <para>Forces <indexterm id="I_indexterm5_d1e6645" significance="normal"><primary>Maven</primary><secondary>SNAPSHOT dependencies</secondary></indexterm><indexterm id="I_indexterm5_d1e6650" significance="normal"><primary>SNAPSHOT dependencies</primary></indexterm>Maven to check for updated releases and snapshot
            dependencies on the remote repository. This makes sure you are
            building with the latest and greatest snapshot dependencies, and
            not just using older local copies which may not by in sync with
            the latest version of the source code.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">-Dsurefire.useFile=false</literal>
          </term>
          <listitem>
            <para>This option forces Maven to write JUnit output to the
            console, rather than to text files in the target directory as it
            normally would. This way, any test failure details are directly
            visible in the build job console output. The XML files that
            Jenkins needs for its test reporting will still be
            generated.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <figure float="none" id="fig-hudson-build-steps">
        <title>Adding a build step to a freestyle build job</title>
        <mediaobject id="I_mediaobject5_d1e6664">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0526.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0526.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The advanced options are also worth investigating (click on the
      Advanced button).</para>
      <para>The optional <command moreinfo="none">POM</command> field lets you
      override the default location of the Maven <filename moreinfo="none">pom.xml</filename> file. This is the equivalent of
      running Maven from the command line <phrase role="keep-together">with
      the</phrase> <literal moreinfo="none">-f</literal> or <phrase role="keep-together"><literal moreinfo="none">--file</literal> option</phrase>. This is
      useful for some multimodule Maven projects where the aggregate <filename moreinfo="none">pom.xml</filename> file (the one containing the
      <literal moreinfo="none">&lt;modules&gt;</literal> section) is located in a subdirectory
      rather than at the top level.</para>
      <?dbfo-need height=”1in”?>
      <para>The Properties field lets you set property values that will be
      passed into the Maven build process, using the standard property file
      format illustrated here:</para>
      <programlisting id="I_programlisting5_d1e6700" format="linespecific"># Selenium test configuration
selenium.host=testserver.acme.com
selenium.port=8080
selenium.broswer=firefox</programlisting>
      <para>These properties are passed to Maven as command-line options, as
      shown here:</para>
      <programlisting id="I_programlisting5_d1e6705" format="linespecific">$ <userinput moreinfo="none">mvn verify -Dselenium.host=testserver.acme.com ...</userinput></programlisting>
      <para>The JVM Options field lets you set any of the standard Java
      Virtual Machine options for your build job. So if your build process is
      particularly memory intensive, you might add some extra heap space with
      the <literal moreinfo="none">-Xmx</literal> option (for example,
      <literal moreinfo="none">-Xmx512m</literal> would set the maximum heap size to 512
      MB).</para>
      <para>The final option lets you configure a private Maven repository for
      this build job. <phrase role="keep-together">Normally</phrase>, Maven
      will just use the default Maven repository (usually in the <filename moreinfo="none">.m2/repository</filename> folder in the user’s home
      directory). Occasionally, this can lead to build jobs interfering with
      each other, or use inconsistent snapshot versions from one build to
      another. To be sure that your build is run in clean laboratory
      conditions, you can activate this option. Your build job will get its
      own private repository, reserved for its own exclusive use. On the
      downside, the first time the build job runs a build, this may take some
      time to download all of the Maven artifacts, and private repositories
      can take up a lot of space. However, it is the best way of guaranteeing
      that your build is run in a truly<indexterm id="I_indexterm5_d1e6725" class="endofrange" startref="ch05-mavenstep1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6727" class="endofrange" startref="ch05-mavenstep2" significance="normal"><primary/></indexterm> isolated environment.</para>
    </sect2>
    <sect2>
      <title>Ant Build Steps</title>
      <para>Freestyle <indexterm class="startofrange" id="ch05-antstep1" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Ant build scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-antstep2" significance="normal"><primary>Ant</primary><secondary>in freestyle build steps</secondary></indexterm><indexterm id="I_indexterm5_d1e6747" significance="normal"><primary>scripts</primary><seealso>Ant; Maven</seealso></indexterm>build jobs work equally well with Ant. <ulink url="http://ant.apache.org/">Apache Ant</ulink> is a widely-used and
      very well-known Java build scripting tool. Indeed, a very large number
      of Java projects out there rely on Ant build scripts.</para>
      <para>Ant is not only used as a primary build scripting tool—even if
      your project uses Maven, you may resort to calling Ant scripts to do
      more specific tasks. There are Ant libraries available for many
      development tools and low-level tasks, such as using SSH, or working
      with proprietary application servers.</para>
      <para>In its most basic form, configuring an Ant build step very is
      simple indeed—you just provide the version of Ant you want to use and
      the name of the target you want to invoke. In <xref linkend="fig-hudson-build-ant-step"/>, for example, we are invoking an
      Ant script to run a JMeter test script.</para>
      <figure float="0" id="fig-hudson-build-ant-step">
        <title>Configuring an Ant build step</title>
        <mediaobject id="I_mediaobject5_d1e6765">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0527.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0527.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>As with the Maven build step, the “Advanced...” button provides
      you with more detailed options, such as specifying a different build
      script, or a build script in a different directory (the default will be
      <filename moreinfo="none">build.xml</filename> in the root directory).
      You can also specify properties and JVM options, just as you can
      for<indexterm id="I_indexterm5_d1e6775" class="endofrange" startref="ch05-antstep1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6777" class="endofrange" startref="ch05-antstep2" significance="normal"><primary/></indexterm> Maven.</para>
    </sect2>
    <sect2>
      <title>Executing a Shell or Windows Batch Command</title>
      <para>Occasionally <indexterm class="startofrange" id="ch05-script1" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>shell scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-script2" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>batch scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-script3" significance="normal"><primary>shell scripts</primary></indexterm><indexterm class="startofrange" id="ch05-script4" significance="normal"><primary>batch scripts</primary></indexterm><indexterm class="startofrange" id="ch05-script5" significance="normal"><primary>scripts</primary><secondary>shell scripts</secondary></indexterm><indexterm class="startofrange" id="ch05-script6" significance="normal"><primary>scripts</primary><secondary>batch scripts</secondary></indexterm>you may need to execute a command directly at the
      Operating System level. Some legacy build processes rely on OS-specific
      scripts, for example. In other cases, you may need to perform a
      low-level operation that is most easily done with an OS-level
      command.</para>
      <para>You can do this in Jenkins with the <literal moreinfo="none">Execute
      Shell</literal> (for Unix) or <literal moreinfo="none">Execute Windows Batch</literal>
      command (for Windows). As an example, in <xref linkend="fig-hudson-build-shell-step"/> we have added a step to execute
      the Unix <literal moreinfo="none">ls</literal> command.</para>
      <figure float="none" id="fig-hudson-build-shell-step">
        <title>Configuring an Execute Shell step</title>
        <mediaobject id="I_mediaobject5_d1e6832">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0528.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0528.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The output from this build step is shown here:</para>
      <programlisting id="I_programlisting5_d1e6839" format="linespecific">[workspace] $ /bin/sh -xe /var/folders/.../jenkins2542160238803334344.s
+ ls -al
total 64
drwxr-xr-x  14 johnsmart  staff   476 30 Oct 15:21 .
drwxr-xr-x   9 johnsmart  staff   306 30 Oct 15:21 ..
-rw-r--r--@  1 johnsmart  staff   294 22 Sep 01:40 .checkstyle
-rw-r--r--@  1 johnsmart  staff   651 22 Sep 01:40 .classpath
-rw-r--r--@  1 johnsmart  staff   947 22 Sep 01:40 .project
drwxr-xr-x   5 johnsmart  staff   170 22 Sep 01:40 .settings
-rw-r--r--@  1 johnsmart  staff   437 22 Sep 01:40 .springBeans
drwxr-xr-x   9 johnsmart  staff   306 30 Oct 15:21 .svn
-rw-r--r--@  1 johnsmart  staff  1228 22 Sep 01:40 build.xml
-rw-r--r--@  1 johnsmart  staff    50 22 Sep 01:40 infinitest.filters
-rw-r--r--   1 johnsmart  staff  6112 30 Oct 15:21 pom.xml
drwxr-xr-x   5 johnsmart  staff   170 22 Sep 01:40 src
drwxr-xr-x   3 johnsmart  staff   102 22 Sep 01:40 target
drwxr-xr-x   5 johnsmart  staff   170 22 Sep 01:40 tools</programlisting>
      <para>You can either execute an OS-specific command (e.g.,
      <literal moreinfo="none">ls</literal>), or store a more complicated script as a file in
      your version control system, and execute this script. If you are
      executing a script, you just need to refer to the name of your script
      relative to the work directory.</para>
      <para>Shell scripts are executed using the <literal moreinfo="none">-ex</literal>
      option—the commands are printed to the console, as is the resulting
      output. If any of the executed commands return a nonzero value, the
      build will fail.</para>
      <para>When Jenkins executes a script, it sets a number of environment
      variables that you can use within the script. We discuss these variable
      in more detail in the next section.</para>
      <para>In fact, there are some very good reasons why you should avoid
      using OS-level scripts in your build jobs if you can possibly avoid it.
      In particular, it makes your build job in the best of cases OS-specific,
      and at worst dependant on the precise machine configuration. One more
      portable alternative to executing OS scripts include writing an
      equivalent script in a more portable scripting language, such
      as<indexterm id="I_indexterm5_d1e6855" class="endofrange" startref="ch05-script1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6857" class="endofrange" startref="ch05-script2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6859" class="endofrange" startref="ch05-script3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6861" class="endofrange" startref="ch05-script4" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6863" class="endofrange" startref="ch05-script5" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6865" class="endofrange" startref="ch05-script6" significance="normal"><primary/></indexterm> Groovy or Gant.</para>
    </sect2>
    <sect2 id="sect-hudson-environment-variables">
      <title>Using Jenkins Environment Variables in Your Builds</title>
      <para>One<indexterm class="startofrange" id="ch05-env1" significance="normal"><primary>environment variables</primary><secondary>using in build steps</secondary></indexterm><indexterm class="startofrange" id="ch05-env2" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>environment variables in</tertiary></indexterm><indexterm id="I_indexterm5_d1e6885" significance="normal"><primary>environment variables</primary><seealso>specific environment variables</seealso></indexterm> useful trick that can be used in virtually any build step
      is to obtain information from Jenkins about the current build job. In
      fact, when Jenkins starts a build step, it makes the following
      environment variables available to the build script:</para>
      <variablelist>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_NUMBER</literal>
            <indexterm id="I_indexterm5_d1e6896" significance="normal">
              <primary>BUILD_NUMBER environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The current build number, such as “153”.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_ID</literal>
            <indexterm id="I_indexterm5_d1e6906" significance="normal">
              <primary>BUILD_ID environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>A timestamp for the current build id, in the format
            YYYY-MM-DD_hh-mm-ss.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">JOB_NAME</literal>
            <indexterm id="I_indexterm5_d1e6916" significance="normal">
              <primary>JOB_NAME environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The name of the job, such as
            <emphasis>game-of-life</emphasis>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_TAG</literal>
            <indexterm id="I_indexterm5_d1e6929" significance="normal">
              <primary>BUILD_TAG environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>A convenient way to identify the current build job, in the
            form of
            <literal moreinfo="none">jenkins-${<replaceable>JOB_NAME</replaceable>}-${<replaceable>BUILD_NUMBER</replaceable>}</literal>
            (e.g.,
            <literal moreinfo="none">jenkins-game-of-life-2010-10-30_23-59-59</literal>).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">EXECUTOR_NUMBER</literal>
            <indexterm id="I_indexterm5_d1e6951" significance="normal">
              <primary>EXECUTOR_NUMBER environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>A number identifying the executor running this build among
            the executors of the same machine. This is the number you see in
            the “build executor status”, except that the number starts from 0,
            not 1.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">NODE_NAME</literal>
            <indexterm id="I_indexterm5_d1e6961" significance="normal">
              <primary>NODE_NAME environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The name of the slave if the build is running on a slave, or
            <literal moreinfo="none">""</literal> if the build is running on master.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">NODE_LABELS</literal>
            <indexterm id="I_indexterm5_d1e6974" significance="normal">
              <primary>NODE_LABELS environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The list of labels associated with the node that this build
            is running on.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">JAVA_HOME</literal>
            <indexterm id="I_indexterm5_d1e6984" significance="normal">
              <primary>JAVA_HOME environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>If your job is configured to use a specific JDK, this
            variable is set to the <literal moreinfo="none">JAVA_HOME</literal> of the
            specified JDK. When this variable is set, <literal moreinfo="none">PATH</literal>
            is also updated to have <filename moreinfo="none">$JAVA_HOME/bin</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">WORKSPACE</literal>
            <indexterm id="I_indexterm5_d1e7003" significance="normal">
              <primary>WORKSPACE environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The absolute path of the workspace.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">HUDSON_URL</literal>
            <indexterm id="I_indexterm5_d1e7013" significance="normal">
              <primary>HUDSON_URL environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The full URL of the Jenkins server, for example <filename moreinfo="none">http://ci.acme.com:8080/jenkins/</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">JOB_URL</literal>
            <indexterm id="I_indexterm5_d1e7026" significance="normal">
              <primary>JOB_URL environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The full URL for this build job, for example <filename moreinfo="none">http://ci.acme.com:8080/jenkins/game-of-life</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_URL</literal>
            <indexterm id="I_indexterm5_d1e7040" significance="normal">
              <primary>BUILD_URL environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>The full URL for this build, for example <filename moreinfo="none">http://ci.acme.com:8080/jenkins/game-of-life/20</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">SVN_REVISION</literal>
            <indexterm id="I_indexterm5_d1e7053" significance="normal">
              <primary>SVN_REVISION environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>For Subversion-based projects, this variable contains the
            current revision number.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">CVS_BRANCH</literal>
            <indexterm id="I_indexterm5_d1e7063" significance="normal">
              <primary>CVS_BRANCH environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>For CVS-based projects, this variable contains the branch of
            the module. If CVS is configured to check out the trunk, this
            environment variable will not be set.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>These <indexterm id="I_indexterm5_d1e7071" significance="normal"><primary>Ant</primary><secondary>environment variables, accessing from</secondary></indexterm>variables are easy to access. In an Ant script, you can
      access them using the <literal moreinfo="none">&lt;property&gt;</literal> tag as shown
      here:</para>
      <programlisting id="I_programlisting5_d1e7080" format="linespecific">&lt;target name="printinfo"&gt;
  &lt;property environment="env" /&gt;
  &lt;echo message="${env.BUILD_TAG}"/&gt;
&lt;/target&gt;</programlisting>
      <para>In Maven, <indexterm id="I_indexterm5_d1e7084" significance="normal"><primary>Maven</primary><secondary>environment variables in</secondary></indexterm>you can access the variables either in the same way (using
      the “env.” prefix), or directly using the Jenkins environment variable.
      For example, in the following <emphasis>pom.xml</emphasis> file, the
      project URL will point to the Jenkins build job that ran the
      <literal moreinfo="none">mvn site</literal> build:</para>
      <programlisting id="I_programlisting5_d1e7096" format="linespecific">&lt;project...&gt;
  ...
  &lt;groupId&gt;com.wakaleo.gameoflife&lt;/groupId&gt;
  &lt;artifactId&gt;gameoflife-core&lt;/artifactId&gt;
  &lt;version&gt;0.0.55-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;gameoflife-core&lt;/name&gt;
  &lt;url&gt;${JOB_URL}&lt;/url&gt;</programlisting>
      <para>Alternatively, if you are building a web application, you can also
      use the <filename moreinfo="none">maven-war-plugin</filename> to insert
      the build job number into the web application manifest, e.g.:</para>
      <programlisting id="I_programlisting5_d1e7103" format="linespecific">&lt;project&gt;
  ...
  &lt;build&gt;
    ...
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;manifest&gt;
            &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
          &lt;/manifest&gt;
          &lt;archive&gt;
            &lt;manifestEntries&gt;
              &lt;Specification-Title&gt;${project.name}&lt;/Specification-Title&gt;
              &lt;Specification-Version&gt;${project.version}&lt;/Specification-Version&gt;
              &lt;Implementation-Version&gt;${BUILD_TAG}&lt;/Implementation-Version&gt;
            &lt;/manifestEntries&gt;
          &lt;/archive&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      ...
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;</programlisting>
      <para>This will produce a <filename moreinfo="none">MANIFEST.MF</filename> file along the following
      lines:</para>
      <programlisting id="I_programlisting5_d1e7110" format="linespecific">Manifest-Version: 1.0
Archiver-Version: Plexus Archiver
Created-By: Apache Maven
Built-By: johnsmart
Build-Jdk: 1.6.0_22
Jenkins-Build-Number: 63
Jenkins-Project: game-of-life
Jenkins-Version: 1.382
Implementation-Version: jenkins-game-of-life-63
Specification-Title: gameoflife-web
Specification-Version: 0.0.55-SNAPSHOT</programlisting>
      <para>And in a <indexterm id="I_indexterm5_d1e7115" significance="normal"><primary>Groovy scripts</primary><secondary>environment variables in</secondary></indexterm>Groovy script, they can be obtained via the
      <literal moreinfo="none">System.getenv()</literal> method:</para>
      <programlisting id="I_programlisting5_d1e7124" format="linespecific">def env = System.getenv()
env.each {
    println it
}</programlisting>
      <para><indexterm id="I_indexterm5_d1e7127" class="endofrange" startref="ch05-env1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7129" class="endofrange" startref="ch05-env2" significance="normal"><primary/></indexterm>or:</para>
      <programlisting id="I_programlisting5_d1e7132" format="linespecific">def env = System.getenv()
println env['BUILD_NUMBER']</programlisting>
    </sect2>
    <sect2>
      <title>Running Groovy Scripts</title>
      <para>Groovy<indexterm class="startofrange" id="ch05-groovy1" significance="normal"><primary>Groovy scripts</primary><secondary>running in build jobs</secondary></indexterm><indexterm class="startofrange" id="ch05-groovy2" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Groovy scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-groovy3" significance="normal"><primary>scripts</primary><secondary>Groovy scripts</secondary></indexterm> is not only a popular JVM dynamic language, it is also a
      convenient language for low-level scripting. The Jenkins <ulink url="http://wiki.jenkins-ci.org//display/HUDSON/Groovy+Plugin">Groovy
      Plugin</ulink> lets you run arbitrary Groovy commands, or invoke Groovy
      scripts, as part of your build process.</para>
      <para>Once you have installed the Groovy plugin in the usual way, you
      need to add a reference to your Groovy installation in the system
      configuration page (see <xref linkend="fig-hudson-groovy-installation"/>).</para>
      <figure float="none" id="fig-hudson-groovy-installation">
        <title>Adding a Groovy installation to Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e7167">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0529.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0529.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Now you can add some Groovy scripting to your build job. When you
      click on “Add build step”, you will see two new entries in the drop-down
      menu: “Execute Groovy script” and “Execute system Groovy script”. The
      first option is generally what you <phrase role="keep-together">want—</phrase>this will simply execute a Groovy
      script in a separate JVM, as if you were invoking Groovy from the
      command line. The second option runs Groovy commands within Jenkins’s
      own JVM, with full access to Jenkins’s internals, and is mainly used to
      manipulate the Jenkins build jobs or build process itself. This is a
      more advanced topic that we will discuss later on in the book.</para>
      <para>A Groovy build step can take one of two forms. For simple cases,
      you can just add a small snippet of Groovy, as shown in <xref linkend="fig-hudson-groovy-build-step"/>. For more involved or
      complicated cases, you would probably write a Groovy script and place it
      under version control. Once your script is safely in your SCM, you can
      run it by selecting the “Groovy script file” option and providing the
      path to your script (relative to your build job workspace).</para>
      <figure float="none" id="fig-hudson-groovy-build-step">
        <title>Running Groovy commands as part of a build job</title>
        <mediaobject id="I_mediaobject5_d1e7184">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0530.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0530.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <?dbfo-need height=”1in”?>
      <para>In <xref linkend="fig-hudson-groovy-fitnesse-build-step"/>, you
      can see a slightly more complicated example. Here we are running a
      Groovy script called <filename moreinfo="none">run-fitness-tests.groovy</filename>, which can be found
      in the <filename moreinfo="none">scripts</filename> directory. This
      script takes the test suites to be executed as its parameters—we provide
      these in the Script parameters field. If we want to provide any options
      for Groovy itself, we can put these in the Groovy Parameters field.
      Alternatively, we can also provide command-line properties in the
      Properties field—this is simply a more convenient way of using the
      <literal moreinfo="none">-D</literal> command-line option to pass property values to
      the<indexterm id="I_indexterm5_d1e7203" class="endofrange" startref="ch05-groovy1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7205" class="endofrange" startref="ch05-groovy2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7208" class="endofrange" startref="ch05-groovy3" significance="normal"><primary/></indexterm> Groovy script.</para>
      <figure float="none" id="fig-hudson-groovy-fitnesse-build-step">
        <title>Running Groovy scripts as part of a build job</title>
        <mediaobject id="I_mediaobject5_d1e7214">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0531.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0531.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Building Projects in Other Languages</title>
      <para>Jenkins<indexterm id="I_indexterm5_d1e7224" significance="normal"><primary>scripts</primary><secondary>languages supported</secondary></indexterm> is a flexible tool, and it can be used for much more than
      just Java and Groovy. For example, Jenkins also works well with Grails,
      .Net, Ruby, Python and PHP, just to name a few. When using other
      languages, you generally need to install a plugin to support your
      favorite language, which will add a new build step type for this
      language. We will look at some <indexterm id="I_indexterm5_d1e7230" class="endofrange" startref="ch05-step" significance="normal"><primary/></indexterm>examples in <xref linkend="using-jenkins-with-other-languages"/>.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect15_d1e7235">
    <title>Post-Build Actions</title>
    <para>Once<indexterm class="startofrange" id="ch05-post" significance="normal"><primary>freestyle build jobs</primary><secondary>post-build actions</secondary></indexterm> the build is completed, there are still a few things you
    need to look after. You might want to archive some of the generated
    artifacts, to report on test results, and to notify people about the
    results. In this section, we look at some of the more common tasks you
    need to configure after the build is done.</para>
    <sect2>
      <title>Reporting on Test Results</title>
      <para>One<indexterm class="startofrange" id="ch05-report1" significance="normal"><primary>freestyle build jobs</primary><secondary>reporting on test results</secondary></indexterm><indexterm class="startofrange" id="ch05-report2" significance="normal"><primary>tests</primary><secondary>reports from</secondary><tertiary>JUnit reports</tertiary></indexterm><indexterm class="startofrange" id="ch05-report3" significance="normal"><primary>reporting</primary><secondary>test results</secondary><tertiary>JUnit reports</tertiary></indexterm> of the most obvious requirements of a build job is to
      report on test results. Not only whether there are any test failures,
      but also how many tests were executed, how long they took to execute,
      and so on. In the Java world, JUnit is the most commonly-used testing
      library around, and the JUnit XML format for test results is widely used
      and understood by other tools as well.</para>
      <para>Jenkins provides great support for test reporting. In a freestyle
      build job, you need to tick the “Publish JUnit test result report”
      option, and provide a path to your JUnit report files (see <xref linkend="fig-hudson-build-job-junit"/>). You can use a wildcard
      expression (such as <literal moreinfo="none">**/target/surefire-reports/*.xml</literal>
      in a Maven project) to include JUnit reports from a number of different
      directories—Jenkins will aggregate the results into a single
      report.</para>
      <figure float="none" id="fig-hudson-build-job-junit">
        <title>Reporting on test results</title>
        <mediaobject id="I_mediaobject5_d1e7281">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0532.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0532.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>We look at automated tests in much more<indexterm id="I_indexterm5_d1e7288" class="endofrange" startref="ch05-report1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7290" class="endofrange" startref="ch05-report2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7292" class="endofrange" startref="ch05-report3" significance="normal"><primary/></indexterm> detail in <xref linkend="chapter-automated-testing"/>.</para>
    </sect2>
    <sect2>
      <title>Archiving Build Results</title>
      <para>With <indexterm class="startofrange" id="ch05-archive1" significance="normal"><primary>freestyle build jobs</primary><secondary>archiving binary artifacts</secondary></indexterm><indexterm class="startofrange" id="ch05-archive2" significance="normal"><primary>archives of binary artifacts</primary><secondary sortas="free-style">in freestyle build jobs</secondary></indexterm><indexterm class="startofrange" id="ch05-archive3" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary><tertiary sortas="free-style">in freestyle build jobs</tertiary></indexterm>a few exceptions, the principal goal of a build job is
      generally to build something. In Jenkins, we call this something an
      artifact. An artifact might be a binary executable (a JAR or WAR file
      for a Java project, for example), or some other related deliverable,
      such as documentation or source code. A build job can store one or many
      different artifacts, keeping only the latest copy or every artifact ever
      built.</para>
      <para>Configuring Jenkins to store your artifacts is easy—just tick the
      “Archive the artifacts” checkbox in the Post-build Actions, and specify
      which artifacts you want to store (see <xref linkend="fig-hudson-build-job-artifact-configuration"/>).</para>
      <figure float="none" id="fig-hudson-build-job-artifact-configuration">
        <title>Configuring build artifacts</title>
        <mediaobject id="I_mediaobject5_d1e7327">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0533.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0533.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>In the “Files to archive” field, you can provide the full paths of
      the files you want to archive (relative to the job workspace), or, use
      Ant-like wild cards (e.g., <literal moreinfo="none">**/*.jar</literal>, for all the JAR
      files, anywhere in the workspace). One advantage of using wild cards is
      that it makes your build less dependent on your version control set up.
      For example, if you are using Subversion (see <xref linkend="sect-subversion"/>), Jenkins will check out your project
      either directly in your workspace, or into a subdirectory, depending on
      how you set it up. If you use a wild card expression like
      <literal moreinfo="none">**/target/*.war</literal>, Jenkins will find the file no matter
      what directory the project is located in.</para>
      <para>As usual, the Advanced button give access to a few extra options.
      If you are using wild cards to find your artifacts, you might need to
      exclude certain directories from the search. You can do this by filling
      in the Excludes field. You enter a pattern to match any files that you
      <emphasis>don’t</emphasis> want to archive, even if they would normally
      be included by the “Files to archive” field.</para>
      <para>Archived artifacts can take a lot of disk space, especially if
      builds are frequent. For this reason, you may want to only keep the last
      successful one. To do this, just tick the “Discard all but the last
      successful/stable artifact” option. Jenkins will keep artifacts from the
      last stable build (if there where any). It will also keep the artifacts
      of the latest unstable build following the stable build (if any), and
      also from the last failed build that happened.</para>
      <para>Archived build artifacts appear on the build results page (see
      <xref linkend="fig-hudson-build-artifact"/>). The most recent build
      artifacts are also displayed on the build job home page.</para>
      <figure float="none" id="fig-hudson-build-artifact">
        <title>Build artifacts are displayed on the build results page and on
        the build job home page</title>
        <mediaobject id="I_mediaobject5_d1e7356">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0534.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0534.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>You can also use permanent URLs to access the most recent build
      artifacts. This is a great way to reuse the latest artifacts from your
      builds, either in other Jenkins build jobs or in external scripts, for
      example. Three URLs are available: last stable build, last successful
      build and last completed build.</para>
      <para>Before we look at the URLs, we should discuss the concept of
      <emphasis>stable</emphasis> and <emphasis>successful</emphasis>
      builds.</para>
      <para>A build is <emphasis>successful</emphasis> when the compilation
      reported no errors.</para>
      <para>A build is <indexterm id="I_indexterm5_d1e7379" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>criteria for</tertiary></indexterm><indexterm id="I_indexterm5_d1e7386" significance="normal"><primary>unstable builds</primary><secondary>criteria for</secondary></indexterm>considered <emphasis>stable</emphasis> if it was built
      successfully, and no publisher reports it as unstable. For example,
      depending on your project configuration, unit test failures,
      insufficient code coverage, or other code quality metrics issues, could
      cause a build to be marked as unstable. So a stable build is always
      successful, but the opposite is not necessarily true—a build can be
      successful without being stable.</para>
      <para>A <emphasis>completed</emphasis> build is simply a build that has
      finished, no matter what its result. Note that the archiving step will
      take place no matter what the outcome of the build was.</para>
      <para>The format of the artifact URLs is intuitive, and takes the
      following form:</para>
      <variablelist>
        <varlistentry>
          <term>Latest stable build</term>
          <listitem>
            <para>
              <filename moreinfo="none"><replaceable>&lt;server-url&gt;</replaceable>/job/<replaceable>&lt;build-job&gt;</replaceable>/lastStableBuild/artifact/<replaceable>&lt;path-to-artifact&gt;</replaceable></filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Latest successful build</term>
          <listitem>
            <para>
              <filename moreinfo="none"><replaceable>&lt;server-url&gt;</replaceable>/job/<replaceable>&lt;build-job&gt;</replaceable>/lastSuccessfulBuild/artifact/<replaceable>&lt;path-to-artifact&gt;</replaceable></filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Latest completed build</term>
          <listitem>
            <para>
              <filename moreinfo="none"><replaceable>&lt;server-url&gt;</replaceable>/job/<replaceable>&lt;build-job&gt;</replaceable>/lastCompletedBuild/artifact/<replaceable>&lt;path-to-artifact&gt;</replaceable></filename>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>This is best illustrated by some examples. Suppose your Jenkins
      server is running on <emphasis>http://myserver:8080</emphasis>, your
      build job is called <filename moreinfo="none">game-of-life</filename>,
      and you are storing a file called <filename moreinfo="none">gameoflife.war</filename>, which is in the target
      directory of your workspace. The URLs for this artifact would be the
      following:</para>
      <variablelist>
        <varlistentry>
          <term>Latest stable build</term>
          <listitem>
            <para>
              <filename moreinfo="none">http://myserver:8080/job/gameoflife/lastStableBuild/artifact/target/gameoflife.war</filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Latest successful build</term>
          <listitem>
            <para>
              <filename moreinfo="none">http://myserver:8080/job/gameoflife/lastSuccessfulBuild/artifact/target/gameoflife.war</filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Latest completed build</term>
          <listitem>
            <para>
              <filename moreinfo="none">http://myserver:8080/job/gameoflife/lastCompletedBuild/artifact/target/gameoflife.war</filename>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Artifacts don’t just have to be executable binaries. Imagine, for
      example, that your build process involves automatically deploying each
      build to a test server. For convenience, you want to keep a copy of the
      exact source code associated with each deployed WAR file. One way to do
      this would be to generate the source code associated with a build, and
      archive both this file and the WAR file. We could do this by generating
      a JAR file containing the application source code (for example, by using
      the Maven Source Plugin for a Maven project), and then including this in
      the list of artifacts to store (see <xref linkend="fig-hudson-archiving-source"/>).</para>
      <figure float="0" id="fig-hudson-archiving-source">
        <title>Archiving source code and a binary package</title>
        <mediaobject id="I_mediaobject5_d1e7485">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0535.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0535.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Of course, this example is a tad academic: it would probably be
      simpler just to use the revision number for this build (which is
      displayed on the build result page) to retrieve the source code from
      your version control system. But you get the idea.</para>
      <para>Note that if you are using an Enterprise Repository Manager such
      as Nexus or Artifactory to store your binary artifacts, you may not need
      to keep them on the Jenkins server. You may prefer simply to
      automatically deploy your artifacts to your Enterprise Repository
      Manager as part of the build job, and retrieve them from here
      when<indexterm id="I_indexterm5_d1e7494" class="endofrange" startref="ch05-archive1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7496" class="endofrange" startref="ch05-archive2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7498" class="endofrange" startref="ch05-archive3" significance="normal"><primary/></indexterm> required.</para>
    </sect2>
    <sect2>
      <title>Notifications</title>
      <para>The <indexterm class="startofrange" id="ch05-notif1" significance="normal"><primary>freestyle build jobs</primary><secondary>notifications sent after</secondary></indexterm><indexterm class="startofrange" id="ch05-notif2" significance="normal"><primary>notifications</primary><secondary sortas="free-style">from freestyle build job</secondary></indexterm>point of a CI server is to let people know when a build
      breaks. In Jenkins, this comes under the heading of Notification.</para>
      <para>Out of the box, Jenkins provides support for email notification.
      You can activate this by ticking the “E-mail Notification” checkbox in
      the Post-build Actions (see <xref linkend="fig-hudson-build-job-email"/>). Then enter the email addresses
      of the team members who will need to know when the build breaks. When
      the build does break, Jenkins will send a friendly email message to the
      users in this list containing a link to the broken build.</para>
      <figure float="0" id="fig-hudson-build-job-email">
        <title>Email notification</title>
        <mediaobject id="I_mediaobject5_d1e7524">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0536.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0536.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>You can also opt to send a separate email to the user who’s commit
      (presumably) broke the build. For this to work, you need to have
      activated Security on your Jenkins server (see <xref linkend="chapter-security"/>).</para>
      <para>Normally, Jenkins will send an email notification out whenever a
      build fails (for example, because of a compilation error). It will also
      send out a notification when the build becomes <indexterm id="I_indexterm5_d1e7535" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>notifications for</tertiary></indexterm><indexterm id="I_indexterm5_d1e7542" significance="normal"><primary>unstable builds</primary><secondary>notifications for</secondary></indexterm>unstable for the first time (for example, if there are
      unit test failures). Unless you configure it to do so, Jenkins will not
      send emails for every unstable build, but only for the first one.</para>
      <para>Finally, Jenkins will send a message when a previously failing or
      unstable build succeeds, to let everyone know that the problem has
      been<indexterm id="I_indexterm5_d1e7550" class="endofrange" startref="ch05-notif1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7552" class="endofrange" startref="ch05-notif2" significance="normal"><primary/></indexterm> resolved.</para>
    </sect2>
    <sect2>
      <title>Building Other Projects</title>
      <para>You <indexterm id="I_indexterm5_d1e7560" significance="normal"><primary>freestyle build jobs</primary><secondary>starting other build jobs in</secondary></indexterm>can also start other build jobs in the Post-build Actions,
      using the “Build other projects” option. This is useful if you want to
      organize your build process in several, smaller steps, rather than one
      long build job. Just list the projects you want to start after this one.
      Normally, these projects will only be triggered if the build was stable,
      but you can optionally trigger another build job even if the current
      build is <indexterm id="I_indexterm5_d1e7566" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>triggering another build after</tertiary></indexterm><indexterm id="I_indexterm5_d1e7573" significance="normal"><primary>unstable builds</primary><secondary>triggering another build job after</secondary></indexterm>unstable. This might be useful, for example, if you wanted
      to run a code quality metrics reporting build job after a project’s main
      build job, even if there are test failures in the main<indexterm id="I_indexterm5_d1e7579" class="endofrange" startref="ch05-post" significance="normal"><primary/></indexterm> build.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect15_d1e7582">
    <title>Running Your New Build Job</title>
    <para>Now<indexterm id="I_indexterm5_d1e7587" significance="normal"><primary>freestyle build jobs</primary><secondary>running</secondary></indexterm> all you need to do is save your new build job. You can then
    trigger the first build manually, or just wait for it to kick off by
    itself. Once the build is finished, you can click on the build number to
    see the results of your work.</para>
  </sect1>
  <sect1 id="sect-build-jobs-maven">
    <title>Working with Maven Build Jobs</title>
    <para>In <indexterm class="startofrange" id="ch05-mavenjob" significance="normal"><primary>Maven build jobs</primary></indexterm>this section, we will have a look at the other most commonly
    used build job: Maven 2/3 build jobs.</para>
    <para>Maven build jobs are specifically adapted to Maven 2 and Maven 3
    builds. Creating a Maven build job requires considerably less work than
    configuring the equivalent <phrase role="keep-together">freestyle</phrase>
    build job. Maven build jobs support advanced Maven-related features such
    as incremental builds on multimodule projects and triggering builds from
    changes in snapshot dependencies, and make configuration and reporting
    much simpler.</para>
    <para>However, there is a catch: Maven 2/3 build jobs are less flexible
    than freestyle build jobs, and don’t support multiple build steps within
    the same build job. Some users also report that large Maven projects tend
    to run more slowly and use more memory when configured as Maven build jobs
    rather than as Freestyle ones.</para>
    <para>In this section, we will investigate how to configure Maven 2/3
    builds, when you can use them, as well as their advantages and
    limitations.</para>
    <para>To <indexterm id="I_indexterm5_d1e7613" significance="normal"><primary>Maven build jobs</primary><secondary>creating</secondary></indexterm>create a new Maven build job, just choose the “”Build a
    maven2/3 project” option in the New Job page (see <xref linkend="fig-hudson-build-job-new-mvn2"/>).</para>
    <figure float="none" id="fig-hudson-build-job-new-mvn2">
      <title>Creating a new Maven build job</title>
      <mediaobject id="I_mediaobject5_d1e7624">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0547.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0547.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <sect2>
      <title>Building Whenever a SNAPSHOT Dependency Is Built</title>
      <para>At first <indexterm class="startofrange" id="ch05-mavtrigger1" significance="normal"><primary>Maven</primary><secondary>SNAPSHOT dependencies</secondary></indexterm><indexterm class="startofrange" id="ch05-mavtrigger2" significance="normal"><primary>SNAPSHOT dependencies</primary></indexterm>glance, the Maven 2/3 build job configuration screen is
      very similar to the one we saw for freestyle builds in the previous
      section. The first difference you may notice is in the Build Triggers
      section. In this section, an extra option is available: “Build whenever
      a SNAPSHOT dependency is built”. If you select this option, Jenkins will
      examine your <filename moreinfo="none">pom.xml</filename> file (or
      files) to see if any SNAPSHOT dependencies are being built by other
      build jobs. If any other build jobs update a SNAPSHOT dependency that
      your project uses, Jenkins will build your project as well.</para>
      <para>Typically in Maven, SNAPSHOT dependencies are used to share the
      latest bleeding-edge version of a library with other projects within the
      same team. Since they are by definition unstable, it is not recommended
      practice to rely on SNAPSHOT dependencies from other teams or from
      external sources.</para>
      <para>For example, imagine that you are working on a new
      <emphasis>game-of-life</emphasis> web application. You are using Maven
      for this project, so you can use a Maven build job in Jenkins. Your team
      is also working on a reusable library called
      <emphasis>cooltools</emphasis>. Since these two projects are being
      developed by the same team, you are using some of the latest
      <emphasis>cooltools</emphasis> features in the
      <emphasis>game-of-life</emphasis> web application. So you have a
      SNAPSHOT dependency in the <code>&lt;dependencies&gt;</code> section of
      your <emphasis>game-of-life</emphasis> <filename moreinfo="none">pom.xml</filename> file:</para>
      <programlisting id="I_programlisting5_d1e7672" format="linespecific">    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.acme.common&lt;/groupId&gt;
            &lt;artifactId&gt;cooltools&lt;/artifactId&gt;
            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        ...
    &lt;/dependencies&gt;</programlisting>
      <para>On your Jenkins server, you have set up Maven build jobs for both
      the <emphasis>cooltools</emphasis> and the
      <emphasis>game-of-life</emphasis> applications. Since your
      <emphasis>game-of-life</emphasis> project needs the latest
      <emphasis>cooltools</emphasis> SNAPSHOT version, you tick the “Build
      whenever a SNAPSHOT dependency is built” option. This way, whenever the
      <emphasis>cooltools</emphasis> project is rebuilt, the
      <emphasis>game-of-life</emphasis> project will automatically
      be<indexterm id="I_indexterm5_d1e7695" class="endofrange" startref="ch05-mavtrigger1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7697" class="endofrange" startref="ch05-mavtrigger2" significance="normal"><primary/></indexterm> rebuilt as well.</para>
    </sect2>
    <sect2>
      <title>Configuring the Maven Build</title>
      <para>The <indexterm id="I_indexterm5_d1e7705" significance="normal"><primary>Maven build jobs</primary><secondary>build steps in</secondary></indexterm>next area where you will notice a change is in the Build
      section. In a Maven build job, the build section is entirely devoted to
      running a single Maven goal (see <xref linkend="fig-hudson-build-job-maven2"/>). In this section, you specify
      the version of Maven you want to execute (remember, at the time of
      Maven, this will only work with Maven), the location of the <filename moreinfo="none">pom.xml</filename> file, and the Maven goal (or goals)
      to invoke. You can also add any command-line options you need
      here.</para>
      <figure float="none" id="fig-hudson-build-job-maven2">
        <title>Specifying the Maven goals</title>
        <mediaobject id="I_mediaobject5_d1e7719">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0548.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0548.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>In many cases, this is all you need to get your Maven build job
      configured. However, if you click on the “Advanced...” button, you can
      take your pick of some more advanced features (<xref linkend="fig-hudson-build-job-maven2-advanced"/>).</para>
      <figure float="0" id="fig-hudson-build-job-maven2-advanced">
        <title>Maven build jobs—advanced options</title>
        <mediaobject id="I_mediaobject5_d1e7731">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0549.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0549.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The Incremental Build option<indexterm id="I_indexterm5_d1e7738" significance="normal"><primary>Maven build jobs</primary><secondary>incremental builds</secondary></indexterm> comes in very handy for large, multimodule Maven builds.
      If you tick this option, when a change is made to one of the project
      modules, Jenkins will only rebuild that module and any modules that use
      the changed module. It performs this magic by using some new Maven
      features introduced in Maven 2.1 (so it won’t work if you are using
      Maven 2.0.x). Jenkins detects which modules have been changed, and then
      uses the <literal moreinfo="none">-pl</literal> (<literal moreinfo="none">--project-list</literal>)
      option to build only the updated modules, and the
      <literal moreinfo="none">-amd</literal> (<literal moreinfo="none">--also-make-dependents</literal>)
      option to build the modules that use the updated modules. If nothing has
      been changed in the source code, all of the modules are built.</para>
      <para>By default, Jenkins<indexterm id="I_indexterm5_d1e7758" significance="normal"><primary>Maven build jobs</primary><secondary>archiving binary artifacts, disabling</secondary></indexterm><indexterm id="I_indexterm5_d1e7763" significance="normal"><primary>archives of binary artifacts</primary><secondary>disabling</secondary></indexterm><indexterm id="I_indexterm5_d1e7768" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary><tertiary>disabling</tertiary></indexterm> will archive all of the artifacts generated by a Maven
      build job. This can come in handy at times, but it can also be very
      expensive in disk storage. If you want to turn off this option, just
      tick the “Disable automatic artifact archiving” option. Alternatively,
      you can always limit the artifacts stored by using the “Discard Old
      Builds” option at the top of the configuration page.</para>
      <para>The “Build modules in parallel” option<indexterm id="I_indexterm5_d1e7778" significance="normal"><primary>Maven build jobs</primary><secondary>running modules in parallel</secondary></indexterm> tells Jenkins to run each individual module in parallel
      as a separate build. In theory, this could speed up your builds quite a
      bit. In practice, it will only really work if your modules are totally
      independent (that is, you aren’t using aggregation), which is rarely the
      case. If you think building your modules in parallel could really speed
      up your multimodule project, you may want to try a freestyle build with
      Maven 3 and its new parallel build feature.</para>
      <para>Another <indexterm id="I_indexterm5_d1e7786" significance="normal"><primary>Maven build jobs</primary><secondary>private repository for</secondary></indexterm>useful option is “Use [a] private Maven repository”.
      Normally, when Jenkins runs Maven, it will behave in exactly the same
      way as Maven on the command line: it will store artifacts in, and
      retrieve artifacts from the local Maven repository (found in <filename moreinfo="none">~/.m2/repository</filename> if you haven’t reconfigured
      it in the <filename moreinfo="none">settings.xml</filename> file). This
      is efficient in terms of disk space, but not always ideal for CI builds.
      Indeed, if several build jobs are working on and with the same snapshot
      artifacts, the builds may end up interfering with each other.</para>
      <para>When this option is checked, Jenkins will tell Maven to use
      <filename moreinfo="none">$WORKSPACE/.repository</filename> as the local Maven
      repository. This means each job will get its own isolated Maven
      repository just for itself. It fixes the above problems, at the expense
      of additional disk space consumption.</para>
      <para>With this option, Maven will use a dedicated Maven repository for
      this build job, located in the <filename moreinfo="none">$WORKSPACE/.repository </filename>directory. This takes
      more disk space, but guarantees a better isolation between build
      jobs.</para>
      <para>Another way of addressing this problem is to override the default
      repository location by using the <literal moreinfo="none">maven.repo.local</literal>
      property, as shown here:</para>
      <programlisting id="I_programlisting5_d1e7814" format="linespecific">$ <userinput moreinfo="none">mvn install -Dmaven.repo.local=~/.m2/staging-repository</userinput></programlisting>
      <para>This approach has the advantage of being able to share a
      repository across several build jobs, which is useful if you need to do
      a series of related builds. It will also work with freestyle
      jobs.</para>
    </sect2>
    <sect2>
      <title>Post-Build Actions</title>
      <para>The <indexterm id="I_indexterm5_d1e7825" significance="normal"><primary>Maven build jobs</primary><secondary>Post-build Actions</secondary></indexterm>Post-Build actions in a Maven build job are considerably
      simpler to configure than in a freestyle job. This is simply because,
      since this is a Maven build, Jenkins knows where to look for a lot of
      the build output. Artifacts, test reports, Javadoc, and so forth, are
      all generated in standard directories, which means
      <emphasis>you</emphasis> don’t have to tell Jenkins where to find
      things. So Jenkins will find, and report on, JUnit test results
      automatically, for example. Later on in the book, we will see how the
      Maven projects also simplify the configuration of many code quality
      metrics tools and reports.</para>
      <para>Most of the other Post-build Actions are similar to those we
      <phrase role="keep-together">saw</phrase> in the freestyle build
      job.</para>
    </sect2>
    <sect2 id="sect-builds-deploy-enterprise-repository">
      <title>Deploying to an Enterprise Repository Manager</title>
      <para>One <indexterm class="startofrange" id="ch05-erm1" significance="normal"><primary>Maven build jobs</primary><secondary>deploying artifacts to Enterprise Repository
          Manager</secondary></indexterm><indexterm class="startofrange" id="ch05-erm2" significance="normal"><primary>Enterprise Repository Manager</primary></indexterm><indexterm class="startofrange" id="ch05-erm3" significance="normal"><primary>archives of binary artifacts</primary><secondary>deploying to Enterprise Repository Manager</secondary></indexterm><indexterm class="startofrange" id="ch05-erm4" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary><tertiary>deploying to Enterprise Repository Manager</tertiary></indexterm>extra option does appear in the Maven build jobs is the
      ability to deploy your artifacts to a Maven repository (see <xref linkend="fig-hudson-maven2-deploy"/>). An Enterprise Repository Manager
      is a server that acts as both a proxy/cache for public Maven artifacts,
      and as a central storage server for your own internal artifacts. Open
      Source Enterprise Repository Managers like Nexus (from Sonatype) and
      Artifactory (from JFrog) provide powerful maintenance and administration
      features that make configuring and maintaining your Maven repositories a
      lot simpler. Both these products have commercial versions, with
      additional features aimed at more sophisticated or high-end build
      infrastructures.</para>
      <para>The advantage of getting Jenkins to deploy your artifacts (as
      opposed to simply running <literal moreinfo="none">mvn deploy</literal>) is that, if you
      have a multimodule Maven build, the artifacts will only be deployed once
      the entire build has finished successfully. For example, suppose you
      have a multimodule Maven project with five modules. If you run
      <literal moreinfo="none">mvn deploy</literal>, and the build fails after three modules,
      the first two modules will have been deployed to your repository, but
      not the last three, which leaves your repository in an instable state.
      Getting Jenkins to do the deploy ensures that the artifacts are only
      deployed as a group once the build has successfully finished.</para>
      <figure float="0" id="fig-hudson-maven2-deploy">
        <title>Deploying artifacts to a Maven repository</title>
        <mediaobject id="I_mediaobject5_d1e7878">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0550.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0550.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>To do this, just tick the “Deploy artifacts to Maven repository”
      option in the “Post-Build actions”. You will need to specify the URL of
      the repository you want to deploy to. This needs to be the full URL to
      the repository (e.g.,
      <emphasis>http://nexus.acme.com/nexus/content/repositories/snapshots</emphasis>,
      and not just <emphasis>http://nexus.acme.com/nexus</emphasis>)</para>
      <para>Most repositories need you to authenticate before letting you
      deploy artifacts to them. The standard Maven way to do this is to place
      a <literal moreinfo="none">&lt;server&gt;</literal> entry in your local <filename moreinfo="none">settings.xml</filename> file, as shown here:</para>
      <programlisting id="I_programlisting5_d1e7899" format="linespecific">&lt;settings...&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus-snapshots&lt;/id&gt;
      &lt;username&gt;scott&lt;/username&gt;
      &lt;password&gt;tiger&lt;/password&gt;
    &lt;/server&gt;
    &lt;server&gt;
      &lt;id&gt;nexus-releases&lt;/id&gt;
      &lt;username&gt;scott&lt;/username&gt;
      &lt;password&gt;tiger&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;</programlisting>
      <para>For the more security-minded, you can also encrypt these passwords
      if required.</para>
      <para>Then, enter the corresponding ID value in the Repository ID field
      in Jenkins. Jenkins will then be able to look up the right username and
      password, and deploy your artifacts. Once the build is finished, your
      artifacts should be available in your Maven Enterprise Repository (see
      <xref linkend="fig-nexus-artifact-deployed"/>).</para>
      <figure float="0" id="fig-nexus-artifact-deployed">
        <title>After deployment the artifact should be available on your
        Enterprise Repository Manager</title>
        <mediaobject id="I_mediaobject5_d1e7910">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0551.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0551.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Using this option, you always don’t have to deploy straight
      away—you can always come back and deploy the artifacts from a previous
      build later. Just click on the “Redeploy Artifacts” menu on the left and
      specify the repository URL you want to deploy your artifact to (see
      <xref linkend="fig-hudson-redeploy-artifact"/>). As in the previous
      example, the Advanced button lets you provide the ID for the
      <literal moreinfo="none">&lt;server&gt;</literal> entry in your local <filename moreinfo="none">settings.xml</filename> file. As we will see later on in
      the book, you can also use this deployment as part of a build promotion
      process, configuring an automatic deployment to a different repository
      when certain quality metrics have been satisfied, for example.</para>
      <figure float="0" id="fig-hudson-redeploy-artifact">
        <title>Redeploying an artifact</title>
        <mediaobject id="I_mediaobject5_d1e7929">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0552.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0552.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This approach will work fine for any Enterprise Repository
      manager. However, if you are using <indexterm id="I_indexterm5_d1e7936" significance="normal"><primary>Artifactory</primary><secondary>Enterprise Repository Manager</secondary></indexterm><indexterm id="I_indexterm5_d1e7941" significance="normal"><primary>plugins</primary><secondary>Artifactory</secondary></indexterm>Artifactory, you may prefer to install the Jenkins <ulink url="http://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin">Artifactory
      Plugin</ulink>, which provides tighter two-way integration with the
      Artifactory Enterprise Repository Manager. It works by sending
      additional information to the Artifactory server during the deployment,
      allowing the server to refer back to the precise build that generated a
      given artifact. Once you have installed the plugin, you can activate it
      in your Maven build job by ticking the “Deploy artifacts to Artifactory”
      option in the Post-build Actions. Then you choose what repositories your
      project should deploy to from a list of repositories on the server,
      along with the username and password required to perform the deployment
      (see <xref linkend="fig-maven2-artifactory"/>).</para>
      <figure float="none" id="fig-maven2-artifactory">
        <title>Deploying to Artifactory from Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e7955">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0553.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0553.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Your build job will now automatically deploy to Artifactory. In
      addition, a link to the artifact on the server will now be displayed on
      the build job home and build results pages (see <xref linkend="fig-maven2-artifactory-link"/>).</para>
      <figure float="none" id="fig-maven2-artifactory-link">
        <title>Jenkins displays a link to the corresponding Artifactory
        repository</title>
        <mediaobject id="I_mediaobject5_d1e7967">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0554.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0554.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This link takes you to a page on the Artifactory server containing
      the deployed artifact (see <xref linkend="fig-artifactory-artifact"/>).
      From this page, there is also a link that takes you back to the build
      that built the artifact.</para>
      <figure float="0" id="fig-artifactory-artifact">
        <title>Viewing the deployed artifact in Artifactory</title>
        <mediaobject id="I_mediaobject5_d1e7979">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0555.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0555.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Deploying to Commercial Enterprise Repository Managers</title>
      <para>An Enterprise Repository Manager is an essential part of any
      Maven-based software development infrastructure. They also play a key
      role for non-Maven projects using tools like Ivy and Gradle, both of
      which rely on standard Maven repositories.</para>
      <para>Both of the principal Enterprise Repository Managers, <indexterm id="I_indexterm5_d1e7992" significance="normal"><primary>Nexus</primary><secondary>Enterprise Repository Manager</secondary></indexterm><indexterm id="I_indexterm5_d1e7997" significance="normal"><primary>Artifactory</primary><secondary>Enterprise Repository Manager</secondary></indexterm>Nexus and Artifactory, offer professional versions which
      come with extra integration features with Jenkins. Later on in the book,
      we will discuss how you can use advanced features such as Nexus Pro’s
      staging and release management to implement sophisticated build
      promotion strategies. On the deployment side of things, the commercial
      edition of Artifactory (Artifactory Pro Power Pack) extends the two-way
      integration we saw earlier. When you view an artifact in the repository
      browser, a “Builds” tab displays details about the <phrase role="keep-together">Jenkins</phrase> build that created the artifact,
      and a link to the Jenkins build page (see <xref linkend="fig-artifactory-pro-artifact"/>). Artifactory also keeps track
      of the dependencies that were used in the Jenkins build, and will warn
      you if you try to delete them from the <indexterm id="I_indexterm5_d1e8008" class="endofrange" startref="ch05-erm1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8010" class="endofrange" startref="ch05-erm2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8012" class="endofrange" startref="ch05-erm3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8015" class="endofrange" startref="ch05-erm4" significance="normal"><primary/></indexterm>repository.</para>
      <figure float="0" id="fig-artifactory-pro-artifact">
        <title>Viewing the deployed artifact and the corresponding Jenkins
        build in Artifactory</title>
        <mediaobject id="I_mediaobject5_d1e8021">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0556.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0556.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Managing Modules</title>
      <para>When <indexterm id="I_indexterm5_d1e8031" significance="normal"><primary>Maven build jobs</primary><secondary>modules for, managing</secondary></indexterm>using Maven, it is common to split a project into several
      modules. Maven build jobs have an intrinsic understand of multimodule
      projects, and adds a Modules menu item that lets you display the
      structure of the project at a glance (see <xref linkend="fig-maven2-modules"/>).</para>
      <figure float="0" id="fig-maven2-modules">
        <title>Managing modules in a Maven build job</title>
        <mediaobject id="I_mediaobject5_d1e8042">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0557.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0557.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Clicking on any of the modules will take you to the build page for
      that module. From here, you can view the detailed build results for each
      module, trigger a build of that module in isolation, and if necessary
      fine tune the configuration of individual module, overriding the
      configuration of the overall project.</para>
    </sect2>
    <sect2>
      <title>Extra Build Steps in Your Maven Build Jobs</title>
      <para>By <indexterm id="I_indexterm5_d1e8054" significance="normal"><primary>Maven build jobs</primary><secondary>build steps in</secondary></indexterm>default, the Maven build job only allows for a single
      Maven goal. There are times when this is a little limiting, and you
      would like to add some extra steps before or after the main build. You
      can do this with the<indexterm id="I_indexterm5_d1e8060" significance="normal"><primary>plugins</primary><secondary>Jenkins M2 Extra Steps</secondary></indexterm><indexterm id="I_indexterm5_d1e8065" significance="normal"><primary>Jenkins M2 Extra Steps plugin</primary></indexterm> Jenkins M2 Extra Steps Plugin. This plugin lets you add
      normal build steps before and after the main Maven goal, giving you the
      flexibility of a freestyle build while still having the convenience of
      the Maven build job configuration.</para>
      <para>Install this plugin and go to the Build Environment section of
      your build job. Tick the “Configure Extra M2 Build Steps” option. You
      should now be able to add build steps that will be executed before
      and/or after your main Maven goal<indexterm id="I_indexterm5_d1e8071" class="endofrange" startref="ch05-mavenjob" significance="normal"><primary/></indexterm> is executed (see <xref linkend="fig-m2-extra-steps"/>).</para>
      <figure float="none" id="fig-m2-extra-steps">
        <title>Configuring extra Maven build steps</title>
        <mediaobject id="I_mediaobject5_d1e8079">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0558.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0558.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="using-jenkins-with-other-languages">
    <title>Using Jenkins with Other Languages</title>
    <para>As we mentioned earlier, Jenkins provides excellent support for
    other languages. In this section, we will look at how to use Jenkins with
    a few of the more common ones.</para>
    <sect2>
      <title>Building Projects with Grails</title>
      <para>Grails<indexterm class="startofrange" id="ch05-grails1" significance="normal"><primary>Grails</primary><secondary>builds in, running with Jenkins</secondary></indexterm><indexterm class="startofrange" id="ch05-grails2" significance="normal"><primary>freestyle build jobs</primary><secondary>Grails projects in</secondary></indexterm> is an open source dynamic web application framework built
      on Groovy and many well-established open source Java frameworks such as
      Spring and Hibernate.</para>
      <para>Jenkins provides excellent support for Grails builds. First, you
      need to install the Jenkins <ulink url="http://wiki.jenkins-ci.org/display/HUDSON/Grails+Plugin">Grails
      plugin</ulink>. Once you have installed this and restarted Jenkins, you
      will need to provide at least one version of Grails for Jenkins to use
      in the Grails Builder section of the Configure System screen (see <xref linkend="fig-hudson-build-job-grails-builder"/>).</para>
      <figure float="0" id="fig-hudson-build-job-grails-builder">
        <title>Adding a Grails installation to Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e8115">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0537.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0537.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Now you can set up a freestyle build job to build your Grails
      project. The Grails plugin adds the “Build with Grails” build step,
      which you can use to build your Grails application (see <xref linkend="fig-hudson-build-job-grails"/>). Here, you provide the Grails
      target, or targets, you want to execute. Unlike the command line, you
      can execute several targets in the same command. However, if you need to
      pass any arguments to a particular target, you should enclose the target
      and its arguments in double quotes. In <xref linkend="fig-hudson-build-job-grails"/>, for example, we run
      <literal moreinfo="none">grails clean</literal>, followed by <literal moreinfo="none">grails test-app
      -unit -non-interactive</literal>. To get this to work properly, we
      enclose the options of the second command in quotes, which gives us
      <literal moreinfo="none">grails clean "test-app -unit
      -non-interactive"</literal>.</para>
      <figure float="0" id="fig-hudson-build-job-grails">
        <title>Configuring a Grails build step</title>
        <mediaobject id="I_mediaobject5_d1e8138">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0538.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0538.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The Grails build step takes many optional parameters. For example,
      Grails is finicky about versions—if your project was created by an older
      version, Grails will ask you to upgrade it. To be on the safe side, for
      example, you may want to tick the Force Upgrade checkbox, which makes
      sure that runs a <literal moreinfo="none">grails upgrade --non-interactive</literal>
      before it runs the main targets.</para>
      <para>You can also specify the server port (useful if you are executing
      web tests), and any other properties you want to pass<indexterm id="I_indexterm5_d1e8150" class="endofrange" startref="ch05-grails1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8152" class="endofrange" startref="ch05-grails2" significance="normal"><primary/></indexterm> to the build.</para>
    </sect2>
    <sect2>
      <title>Building Projects with Gradle</title>
      <para>
        <emphasis>Contributed by Rene Groeschke</emphasis>
      </para>
      <para>In <indexterm class="startofrange" id="ch05-gradle1" significance="normal"><primary>Gradle</primary><secondary>builds in, running with Jenkins</secondary></indexterm><indexterm class="startofrange" id="ch05-gradle2" significance="normal"><primary>freestyle build jobs</primary><secondary>Gradle projects in</secondary></indexterm>comparison to the build tool veterans Ant and Maven,
      <ulink url="http://gradle.org">Gradle</ulink> is a relatively new open
      source build tool for the Java Virtual Machine. Build scripts for Gradle
      are written in a Domain Specific Language (DSL) based on Groovy. Gradle
      implements convention over configuration, allows direct access to Ant
      tasks, and uses Maven-like declarative dependency management. The
      concise nature of Groovy scripting lets you write very expressive build
      scripts with very little code, albeit at the cost of loosing the IDE
      support that exists for established tools like Ant and Maven.</para>
      <para>There are two different ways to run your Gradle builds with
      Jenkins. You can either use the Gradle plugin for Jenkins or the Gradle
      wrapper functionality.</para>
      <sect3 id="the-gradle-plugin-for-hudson">
        <title>The Gradle plugin for Jenkins</title>
        <para>You can install the Gradle plugin in the usual way—just go to
        the Manage Plugins screen and select the Jenkins Gradle plugin. Click
        Install and restart your Jenkins <phrase role="keep-together">instance</phrase>.</para>
        <para>Once Jenkins has restarted, you will need to configure your new
        Gradle plugin. You should now find a new Gradle section in your
        Configure System screen. Here you will need to add the Gradle
        installation you want to use. The process is similar to that used for
        the other tool installations. First, click the Add Gradle button to
        add a new Gradle installation, and enter an appropriate name (see
        <xref linkend="fig-gradle-plugin"/>). If Gradle has already been
        installed on your build server, you can point to the local Gradle home
        directory. Alternatively, you can use the “Install automatically”
        feature to download a Gradle installation, in the form of a ZIP or
        GZipped TAR file, directly from a URL. You can use a public URL (see
        <ulink url="http://gradle.org/downloads.html"/>), or may prefer
        to make these installations available on a local server
        instead.</para>
        <figure float="none" id="fig-gradle-plugin">
          <title>Configuring the Gradle plugin</title>
          <mediaobject id="I_mediaobject5_d1e8196">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0539.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0539.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You typically use Freestyle build jobs to configure your Gradle
        builds. When you add a build step to a Freestyle build job, you will
        now have a new option called “Invoke Gradle script”, which lets you
        add Gradle specific settings to your build job.</para>
        <para>As an example, here is a very simple Gradle build script. It is
        a simple Java project that uses a Maven directory structure and a
        Maven repository manager. There is a customizable task, called
        <emphasis>uploadArchives</emphasis>, to deploy the generated archive
        to the local Enterprise repository manager:</para>
        <programlisting id="I_programlisting5_d1e8208" format="linespecific">apply plugin:'java'
apply plugin:'maven'

version='1.0-SNAPSHOT'
group = "org.acme"

repositories{
  mavenCentral()
    mavenRepo urls: 'http://build.server/nexus/content/repositories/public'
}

dependencies{
  testCompile "junit:junit:4.8.2"
}

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.archives
      repository(url: "http://build.server/nexus/content/repositories/snapshots") {
        authentication(userName: "admin", password: "password")
     }
  }
}</programlisting>
        <para>In <xref linkend="fig-gradle-build-job"/>, we use the just
        configured “Gradle-0.9RC2” instance to run this Gradle build. In this
        case, we want to run the JUnit tests and upload the build artifacts to
        our local Maven repository. Furthermore we configure our job to
        collect the test results from
        <filename moreinfo="none">**/build/test-results</filename>, the default directory for
        storing test results in Gradle.</para>
      </sect3>
      <sect3 id="incremental-builds">
        <title>Incremental builds</title>
        <para>While running a Gradle build job with unchanged sources, Gradle
        runs its builds incremental. If the output of a Gradle task is still
        available and the sources haven’t changed since the last build, Gradle
        is able to skip the task execution and marks the according task as
        up-to-date. This incremental build feature can decrease the duration
        of a running build job considerably.</para>
        <para>If Gradle evaluates the test task as up-to-date even the
        execution of your unit tests is skipped. This can cause problems when
        running your Gradle build with Jenkins. In our sample build job above
        we configured a post build action to publish the JUnit reports of our
        build. If the test task is skipped by Gradle, the Jenkins job will be
        marked as failed with the following message:</para>
        <blockquote>
          <para>Test reports were found but none of them are new. Did tests
          run?</para>
        </blockquote>
        <para>You can easily fix this by invalidating the output and force a
        re-execution of your tests by adding the following snippet to your
        Gradle file:</para>
        <screen format="linespecific">test {
    outputs.upToDateWhen { false }
}</screen>
        <figure float="none" id="fig-gradle-build-job">
          <title>Setting up a Gradle build job</title>
          <mediaobject id="I_mediaobject5_d1e8234">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0540.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0540.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>After adding the snippet above to your build file, your job
        console output should look like the one in <xref linkend="gradle-incremental-build"/>.</para>
        <figure float="none" id="gradle-incremental-build">
          <title>Incremental Gradle job</title>
          <mediaobject id="I_mediaobject5_d1e8246">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0541.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0541.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>As you can see, all of the tasks except
        <emphasis>test</emphasis> and <emphasis>uploadArchives</emphasis> have
        been marked as up-to-date and not<indexterm id="I_indexterm5_d1e8259" class="endofrange" startref="ch05-gradle1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8261" class="endofrange" startref="ch05-gradle2" significance="normal"><primary/></indexterm> executed.</para>
      </sect3>
    </sect2>
    <sect2>
      <title>Building Projects with Visual Studio MSBuild</title>
      <para>Jenkins<indexterm class="startofrange" id="ch05-net1" significance="normal"><primary>freestyle build jobs</primary><secondary sortas="NET projects">.NET projects in</secondary></indexterm><indexterm class="startofrange" id="ch05-net2" significance="normal"><primary sortas="NET projects">.NET projects</primary></indexterm><indexterm class="startofrange" id="ch05-net3" significance="normal"><primary>Visual Studio MSBuild</primary></indexterm> is a Java application, but it also provides excellent
      support for .NET projects.</para>
      <para>To build .NET projects in Jenkins, you need to install the
      <indexterm id="I_indexterm5_d1e8283" significance="normal"><primary>plugins</primary><secondary>MSBuild</secondary></indexterm><indexterm id="I_indexterm5_d1e8288" significance="normal"><primary>MSBuild plugin</primary></indexterm><ulink url="http://wiki.jenkins-ci.org/display/HUDSON/MSBuild+Plugin">MSBuild
      plugin</ulink>.</para>
      <para>You may also want to install the <indexterm id="I_indexterm5_d1e8296" significance="normal"><primary>MSTest plugin</primary></indexterm><indexterm id="I_indexterm5_d1e8299" significance="normal"><primary>plugins</primary><secondary>MSTest</secondary></indexterm><ulink url="http://wiki.jenkins-ci.org//display/HUDSON/MSTest+Plugin">MSTest
      plugin</ulink> and the <ulink url="http://wiki.jenkins-ci.org//display/HUDSON/NUnit+Plugin">NUnit
      plugin</ulink>, to display your test results.</para>
      <para>Once you have installed the .NET plugins and restarted Jenkins,
      you need to configure your .NET build tools. Go to the Configure System
      page and specify the path of the MSBuild executable (see <xref linkend="fig-hudson-msbuild-config"/>).</para>
      <figure float="none" id="fig-hudson-msbuild-config">
        <title>Configuring .NET build tools in Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e8317">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0542.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0542.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Once you have this set up, you can return to your freestyle
      project and add your .NET build step configuration.</para>
      <para>Go to the Build section and choose “Build a Visual project or
      solution using MSBuild” option in the Add Build Step menu. Then enter
      the path to your MSBuild build script (a <filename moreinfo="none">.proj</filename> or <filename moreinfo="none">.sln</filename> file), along with any command-line
      options your build <indexterm id="I_indexterm5_d1e8332" class="endofrange" startref="ch05-net1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8334" class="endofrange" startref="ch05-net2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8336" class="endofrange" startref="ch05-net3" significance="normal"><primary/></indexterm>requires (see <xref linkend="fig-hudson-msbuild-step"/>).</para>
      <figure float="none" id="fig-hudson-msbuild-step">
        <title>A build step using MSBuild</title>
        <mediaobject id="I_mediaobject5_d1e8344">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0543.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0543.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Building Projects with NAnt</title>
      <para>Another<indexterm id="I_indexterm5_d1e8354" significance="normal"><primary>NAnt build scripts</primary></indexterm><indexterm id="I_indexterm5_d1e8357" significance="normal"><primary>freestyle build jobs</primary><secondary>NAnt build scripts in</secondary></indexterm> way to build your .NET projects is to use NAnt. NAnt is a
      .NET version of the Ant build scripting tool widely used in the Java
      world. NAnt build scripts are XML files (typically with a <filename moreinfo="none">.build</filename> extension), with a very similar format
      to Ant build scripts.</para>
      <para>To build with NAnt in Jenkins, you need to install the Jenkins
      <indexterm id="I_indexterm5_d1e8368" significance="normal"><primary>NAnt plugin</primary></indexterm><indexterm id="I_indexterm5_d1e8371" significance="normal"><primary>plugins</primary><secondary>NAnt</secondary></indexterm><ulink url="http://wiki.jenkins-ci.org/display/HUDSON/NAnt+Plugin">NAnt
      plugin</ulink>. Once you have installed the plugin and restarted
      Jenkins, go to the Configure System page and specify the NAnt
      installation directory in the Nant Builders section (see <xref linkend="fig-hudson-msbuild-config"/>).</para>
      <para>Now go to the Build section of your freestyle project and choose
      “Execute NAnt build” (see <xref linkend="fig-hudson-nant-step"/>). Here
      you specify your build script and the target you want to invoke. If you
      click on the “Advanced...” option, you can also set property values to
      be passed into the NAnt script.</para>
      <figure float="none" id="fig-hudson-nant-step">
        <title>A build step using NAnt</title>
        <mediaobject id="I_mediaobject5_d1e8388">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0544.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0544.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2 id="sect-ruby-builds">
      <title>Building Projects with Ruby and Ruby on Rails</title>
      <para>Jenkins <indexterm class="startofrange" id="ch05-ruby1" significance="normal"><primary>freestyle build jobs</primary><secondary>Ruby and Ruby on Rails projects in</secondary></indexterm><indexterm class="startofrange" id="ch05-ruby2" significance="normal"><primary>Ruby applications</primary></indexterm><indexterm class="startofrange" id="ch05-ruby3" significance="normal"><primary>Ruby on Rails projects</primary></indexterm>makes an excellent choice when it comes to integrating CI
      into your Ruby and Ruby on Rails projects. The Rake Plugin lets you add
      Rake build steps to your build jobs. You can also use the Ruby Plugin
      lets you run Ruby scripts directly in your build job. Finally, the Ruby
      Metrics Plugin provides support for Ruby code quality metrics tools such
      as RCov, Rails stats, and Flog.</para>
      <para>Another invaluable tool in this area is
      <literal moreinfo="none">CI:Reporter</literal>. This library is an add-on to
      <literal moreinfo="none">Test::Unit</literal>, <literal moreinfo="none">RSpec</literal>, and
      <literal moreinfo="none">Cucumber</literal> that generates JUnit-compatible XML reports
      for your tests. As we will see, JUnit-compatible test results can be
      used directly by Jenkins to report on your test results. You would
      install CI:Reporter using Gem as illustrated here:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">sudo gem install ci_reporter</userinput>
Successfully installed ci_reporter-1.6.4
1 gem installed</screen>
      <para>Next, you will need to set this up in your Rakefile, by adding the
      following:</para>
      <programlisting id="I_programlisting5_d1e8431" format="linespecific">require 'rubygems'
gem 'ci_reporter'
require 'ci/reporter/rake/test_unit' # use this if you're using Test::Unit</programlisting>
      <para>In <xref linkend="chapter-code-quality"/>, we discuss integrating
      code quality metrics into your Jenkins builds. Jenkins also provides
      support for code coverage metrics in Ruby. The Ruby Metrics Plugin
      supports code coverage metrics using <command moreinfo="none">rcov</command> as well as general code statistics with
      <command moreinfo="none">Rails stats</command>. To install the <command moreinfo="none">rcov-plugin</command>, you will first need to run
      something along the following lines:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">./script/plugin install http://svn.codahale.com/rails_rcov</userinput></screen>
      <para>Once this is set up, you will be able to display your test results
      and test result trend in Jenkins.</para>
      <para>Finally, you can configure a Rake build simply by using a Rake
      build step, as illustrated in <xref linkend="fig-hudson-rake-step"/>.</para>
      <figure float="none" id="fig-hudson-rake-step">
        <title>A build step using Rake</title>
        <mediaobject id="I_mediaobject5_d1e8459">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0545.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0545.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>You also need to configure Jenkins to report on the test and
      quality metrics results. You can do this by activating the “Publish
      JUnit test result report”, “Publish Rails stats report”, and “Public
      Rcov report” options (see <xref linkend="fig-hudson-rails-metrics"/>).
      The JUnit XML reports will be found in the <filename moreinfo="none">results</filename> directory (enter
      <userinput moreinfo="none">results/*.xml</userinput> in the “Test report XMLs” field),
      and the Rcov date<indexterm id="I_indexterm5_d1e8475" class="endofrange" startref="ch05-ruby1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8477" class="endofrange" startref="ch05-ruby2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8479" class="endofrange" startref="ch05-ruby3" significance="normal"><primary/></indexterm> in the <filename moreinfo="none">coverage/units</filename> directory.</para>
      <figure float="none" id="fig-hudson-rails-metrics">
        <title>Publishing code quality metrics for Ruby and Rails</title>
        <mediaobject id="I_mediaobject5_d1e8489">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0546.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0546.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="sect-build-jobs-conclusion">
    <title>Conclusion</title>
    <para>In this chapter we have covered the basics of creating new build
    jobs for the most common cases you are likely to encounter. Later on in
    the book, we will build on these foundations to discuss more advanced
    options such as parameterized builds, matrix builds, and build promotion
    strategies.</para>
  </sect1>
</chapter>
