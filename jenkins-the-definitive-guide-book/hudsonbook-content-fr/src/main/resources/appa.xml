<?xml version="1.0"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<appendix id="appendix-automating-your-tests">
  <title>Automatiser vos tests unitaires et <phrase role="keep-together">
  d’intégration</phrase></title>
  <sect1 id="sect-testing-maven">
    <title>Automatiser vos tests avec Maven</title>
    <para>Maven<indexterm class="startofrange" id="appa-maven1" significance="normal"><primary>tests</primary><secondary>automatiser</secondary><tertiary sortas="Maven">avec Maven</tertiary></indexterm><indexterm class="startofrange" id="appa-maven2" significance="normal"><primary>Maven</primary><secondary>automatiser les tests</secondary></indexterm> est un outil de build open source populaire dans le monde Java, qui
    fait usage de pratiques telles que les déclarations de dépendances, les
    répertoires et cycles de vie de build standards, et la convention préférée à la déclaration pour
    encourager des scripts de build propres, maintenables et de bonne qualité. L’automatisation des tests
    est fortement prise en charge par Maven. Les projets Maven utilisent une structure de dossiers
    standard : les tests unitaires seront automatiquement recherchés dans un dossier nommé
    (par défaut) <filename moreinfo="none">src/test/java</filename>. Il y a
    quelques petits réglages supplémentaires : en ajoutant juste une dépendance à un (ou plusieurs)
    framework(s) de test utilisé(s) par vos tests, Maven détectera et exécutera automatiquement
    les tests JUnit, TestNG, ou même Plain Old Java Objects (POJO)
    contenus dans cette structure de dossiers.</para>
    <para>Avec Maven, vous lancez vos tests unitaires en invocant la phase <command moreinfo="none">test</command> du cycle de vie, comme présenté ici :</para>
    <screen format="linespecific">$ <userinput moreinfo="none">mvn test</userinput>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Tweeter domain model
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
...
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.wakaleo.training.tweeter.domain.TagTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.093 sec
Running com.wakaleo.training.tweeter.domain.TweeterTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec
Running com.wakaleo.training.tweeter.domain.TweeterUserTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec
Running com.wakaleo.training.tweeter.domain.TweetFeeRangeTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 sec
Running com.wakaleo.training.tweeter.domain.HamcrestTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec

Results :

Tests run: 38, Failures: 0, Errors: 0, Skipped: 0</screen>
    <para>En plus d’exécuter vos tests, et de mettre le build en échec dès qu’un
    test échoue, Maven va produire un ensemble de rapports de tests (encore, par
    défaut) dans le dossier <filename moreinfo="none">target/surefire-reports</filename>, dans les formats
    XML et texte. Pour nos objectifs d’intégration continue, ce sont les fichiers XML qui
    nous intéressent puisque Jenkins est en mesure de comprendre et d'analyser ces fichiers
    pour ses rapports d’intégration :</para>
    <screen format="linespecific">$ <userinput moreinfo="none">ls target/surefire-reports/*.xml</userinput>
target/surefire-reports/TEST-com.wakaleo.training.tweeter.domain.HamcrestTest.xml
target/surefire-reports/TEST-com.wakaleo.training.tweeter.domain.TagTest.xml
target/surefire-reports/TEST-com.wakaleo.training.tweeter.domain.TweetFeeRangeTest.xm
target/surefire-reports/TEST-com.wakaleo.training.tweeter.domain.TweeterTest.xml
target/surefire-reports/TEST-com.wakaleo.training.tweeter.domain.TweeterUserTest.xml</screen>
    <para>Maven définit deux phases de tests distinctes : les tests unitaires et
    les tests d’intégration. Les tests unitaires doivent être rapides et léger, en fournissant
    une quantité importante de retours de test en un minimum de temps. Les
    tests d’intégration sont plus lents et lourds, et requièrent souvent que
    l’application soit construite et déployée sur un serveur (potentiellement embarqué)
    pour supporter des tests plus complets. Ces deux types de tests sont importants, et pour
    un environnement d’Intégration Continue bien conçu, il est nécessaire de bien les
    distinguer. Le build doit assurer que tous les tests unitaires
    sont lancés en premier - si un test unitaire échoue, les développeurs
    devraient en être notifiés très rapidement. Le lancement des tests d’intégration,
    lents et plus lourds, ne vaut le coup que si tous les tests unitaires passent.</para>
    <para>Avec Maven, les tests d’intégration sont exécutés pendant la phase <command moreinfo="none">integration-test</command> du cycle de vie, que vous pouvez
    invoquer en lançant <literal moreinfo="none">mvn integration-test</literal> ou (plus simplement)
    <literal moreinfo="none">mvn verify</literal>. Pendant cette phase, il est facile de configurer
    Maven pour démarrer votre application web sur un serveur Jetty embarqué, ou
    pour packager et déployer votre application sur un serveur de test, par exemple.
    Vos tests d’intégration peuvent ensuite être exécutés sur l’application en marche.
    Cependant, la partie délicate, est de dire à Maven comment distinguer les tests
    unitaires des tests d’intégration, afin qu’ils ne soient exécutés que si
    une version fonctionnelle de l’application est disponible.</para>
    <para>Il y a plusieurs manières d’y parvenir, mais au moment de l’écriture il
    n’existe pas d’approche standard officielle utilisée à travers tous les projets Maven.
    Une stratégie simple est d’utiliser les conventions de nommage : tous les tests
    d’intégration peuvent se terminer par “IntegrationTest”, ou être placés dans un package particulier.
    La classe suivante utilise une convention de la sorte :</para>
    <programlisting id="I_programlisting_d1e18428" format="linespecific">public class AccountIntegrationTest {
  
  @Test
  public void cashWithdrawalShouldDeductSumFromBalance() throws Exception {
    Account account = new Account();
    account.makeDeposit(100);
    account.makeCashWithdraw(60);
    assertThat(account.getBalance(), is(40));
  }
}</programlisting>
    <para>Avec Maven, les tests sont configurés via le plugin <command moreinfo="none">maven-surefire-plugin</command>. Pour assurer
    que Maven lance ces tests seulement pendant la phase <command moreinfo="none">integration-test</command>, vous pouvez configurer ce
    plugin comme présenté ici :</para>
    <programlisting id="I_programlisting_d1e18439" format="linespecific">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;skip&gt;true&lt;/skip&gt;<co id="maven-it-1"/>
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;<co id="maven-it-2"/>
            &lt;id&gt;unit-tests&lt;/id&gt;
            &lt;phase&gt;test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
              &lt;excludes&gt;
                &lt;exclude&gt;**/*IntegrationTest.java&lt;/exclude&gt;
              &lt;/excludes&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
          &lt;execution&gt;<co id="maven-it-3"/>
            &lt;id&gt;integration-tests&lt;/id&gt;
            &lt;phase&gt;integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
              &lt;includes&gt;
                &lt;include&gt;**/*IntegrationTest.java&lt;/include&gt;
              &lt;/includes&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      ...</programlisting>
    <calloutlist>
      <callout arearefs="maven-it-1">
        <para>Saute tous les tests par défaut — ceci désactive la configuration
        par défaut des tests pour Maven.</para>
      </callout>
      <callout arearefs="maven-it-2">
        <para>Pendant la phase des tests unitaires, lance les tests en excluant
        les tests d’intégration.</para>
      </callout>
      <callout arearefs="maven-it-3">
        <para>Pendant la phase des tests d’intégration, lance les tests mais en incluant
        <emphasis>seulement</emphasis> les tests d’intégration.</para>
      </callout>
    </calloutlist>
    <para>Ceci assure que les tests d’intégration seront ignorés pendant la
    phase des tests unitaires, et exécutés seulement pendant la phase des
    tests d’intégration.</para>
    <para>Si vous ne voulez pas ajouter de contrainte non souhaitée sur les noms de vos
    classes de test, vous pouvez utiliser les noms de package plutôt. Dans le projet
    illustré dans <xref linkend="fig-hudson-testing-sample-project"/>, tous
    les tests fonctionnels ont été placés dans un package nommé
    <command moreinfo="none">webtests</command>. Il n’y a aucune contrainte sur les noms des
    tests, mais nous utilisons des Page Objects pour modéliser l’interface de notre
    application, donc nous nous assurons aussi qu’aucune classe du package
    <command moreinfo="none">pages</command> (à l’intérieur du package
    <command moreinfo="none">web</command><phrase role="keep-together"><command moreinfo="none">tests</command></phrase>) ne soit
    considéré comme un test.</para>
    <figure float="none" id="fig-hudson-testing-sample-project">
      <title>Un projet contenant des classes de tests nommées librement</title>
      <mediaobject id="I_mediaobject_d1e18481">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_aa01.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_aa01.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Avec Maven, nous pouvons faire cela avec la configuration suivante :</para>
    <programlisting id="I_programlisting_d1e18488" format="linespecific">      &lt;plugin&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;skip&gt;true&lt;/skip&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;unit-tests&lt;/id&gt;
            &lt;phase&gt;test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
              &lt;excludes&gt;
                &lt;exclude&gt;**/webtests/*.java&lt;/exclude&gt;
              &lt;/excludes&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
          &lt;execution&gt;
            &lt;id&gt;integration-tests&lt;/id&gt;
            &lt;phase&gt;integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
              &lt;includes&gt;
                &lt;include&gt;**/webtests/*.java&lt;/include&gt;
              &lt;/includes&gt;
              &lt;excludes&gt;
                &lt;exclude&gt;**/pages/*.java&lt;/exclude&gt;
              &lt;/excludes&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;</programlisting>
    <para>TestNG a actuellement un support plus flexible des groupes de test que
    JUnit. Si vous utilisez TestNG, vous pouvez identifier vos tests d’intégration
    en utilisant les TestNG Groups. Avec TestNG, les classes et les méthodes de test peuvent être
    étiquetées en utilisant l’attribut <literal moreinfo="none">groups</literal> de l’annotation
    <literal moreinfo="none">@Test</literal>, comme présenté ici :</para>
    <programlisting id="I_programlisting_d1e18498" format="linespecific">@Test(groups = { "integration-test" })
public void cashWithdrawalShouldDeductSumFromBalance() throws Exception {
    Account account = new Account();
    account.makeDeposit(100);
    account.makeCashWithdraw(60);
    assertThat(account.getBalance(), is(40));
}</programlisting>
    <para>En utilisant Maven, vous pouvez vous assurer que ces tests sont seulement lancés pendant
    la phase des tests d’intégration avec la configuration suivante :</para>
    <programlisting id="I_programlisting_d1e18502" format="linespecific">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;skip&gt;true&lt;/skip&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;unit-tests&lt;/id&gt;
            &lt;phase&gt;test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
              &lt;excludedGroups&gt;integration-tests&lt;/excludedGroups&gt;<co id="maven-it-ng-1"/>
            &lt;/configuration&gt;
          &lt;/execution&gt;
          &lt;execution&gt;
            &lt;id&gt;integration-tests&lt;/id&gt;
            &lt;phase&gt;integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
              &lt;groups&gt;integration-tests&lt;/groups&gt;<co id="maven-it-ng-2"/>
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      ...</programlisting>
    <calloutlist>
      <callout arearefs="maven-it-ng-1">
        <para>Ne lance pas le groupe integration-tests pendant la phase test.</para>
      </callout>
      <callout arearefs="maven-it-ng-2">
        <para>Lance seulement les tests du groupe integration-tests pendant la phase
        integration-test.</para>
      </callout>
    </calloutlist>
    <para>Il est souvent intéressant de lancer les tests en parallèle dès que
    possible, puisque cela peut accélérer vos tests de façon significative (voir <xref linkend="sect-tests-too-slow"/>).
    Les tests en parallèle sont particulièrement efficaces avec des tests lents qui utilisent
    beaucoup d’accès E/S, disque ou réseau (comme les tests web), ce qui est pratique,
    puisque ce sont précisément les types de tests que nous voulons généralement accélérer.</para>
    <para>TestNG propose un bon support des tests en parallèle. Par exemple, avec TestNG,
    vous pouvez configurer vos méthodes de tests pour qu’elles se lancent en parallèle sur
    dix threads concurrents comme ceci :</para>
    <programlisting id="I_programlisting_d1e18522" format="linespecific">      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.5&lt;/version&gt;
        &lt;configuration&gt;
          &lt;parallel&gt;methods&lt;/parallel&gt;
          &lt;threadCount&gt;10&lt;/threadCount&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;</programlisting>
    <para>Depuis JUnit 4.7, vous pouvez aussi lancer vos tests JUnit en parallèle en utilisant
    une configuration similaire. En fait, la configuration présentée ci-dessus fonctionnera
    pour JUnit 4.7 et suivant.</para>
    <para>Vous pouvez aussi régler le paramètre de configuration <literal moreinfo="none">&lt;parallel&gt;</literal>
    à la valeur <literal moreinfo="none">classes</literal> au lieu de
    <literal moreinfo="none">methods</literal>, ce qui tentera de lancer les classes de test en
    parallèle, plutôt que pour chaque méthode. Cela peut être plus ou moins rapide,
    en fonction du nombre de classes de test que vous avez, mais peut être plus sûr pour
    certains cas de test non conçus avec la concurrence à l’esprit.</para>
    <para>Les résultats peuvent varier, donc vous feriez bien d’expérimenter les nombres pour obtenir
    les <indexterm id="I_indexterm_d1e18539" class="endofrange" startref="appa-maven1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm_d1e18541" class="endofrange" startref="appa-maven2" significance="normal"><primary/></indexterm>meilleurs résultats.</para>
  </sect1>
  <sect1 id="sect-testing-ant">
    <title>Automatiser vos tests avec Ant</title>
    <para>Mettre en place<indexterm class="startofrange" id="appa-ant2" significance="normal"><primary>Ant</primary><secondary>automatiser les tests</secondary></indexterm><indexterm class="startofrange" id="appa-ant3" significance="normal"><primary>tests</primary><secondary>automatiser</secondary><tertiary sortas="Ant">avec Ant</tertiary></indexterm> des tests automatisés avec Ant est aussi relativement facile, bien que
    cela requiert un peu plus de plomberie qu’avec Maven. En particulier, Ant ne fournit
    pas directement les librairies JUnit et les tâches Ant adaptées, donc
    il faut les installer soi-même quelque part. L’approche la plus portable est
    d’utiliser un outil de Gestion de dépendances tel qu’Ivy, ou de placer
    les fichiers JAR correspondants dans un répertoire à l’intérieur de la
    structure de votre projet.</para>
    <para>Pour lancer les tests avec Ant, vous appelez la tâche
    <literal moreinfo="none">&lt;junit&gt;</literal>. Une configuration typique adaptée
    à Jenkins est présentée dans cet exemple :</para>
    <programlisting id="I_programlisting_d1e18567" format="linespecific">&lt;property name="build.dir" value="target" /&gt;
&lt;property name="java.classes" value="${build.dir}/classes" /&gt;
&lt;property name="test.classes" value="${build.dir}/test-classes" /&gt;
&lt;property name="test.reports" value="${build.dir}/test-reports" /&gt;
&lt;property name="lib" value="${build.dir}/lib" /&gt;

&lt;path id="test.classpath"&gt;<co id="junit-ant-1"/>
  &lt;pathelement location="${basedir}/tools/junit/*.jar" /&gt;
  &lt;pathelement location="${java.classes}" /&gt;
  &lt;pathelement location="${lib}" /&gt;
&lt;/path&gt;

&lt;target name="test" depends="test-compile"&gt;
  &lt;junit haltonfailure="no" failureproperty="failed"&gt;<co id="junit-ant-2"/>
    &lt;classpath&gt;<co id="junit-ant-3"/>
      &lt;path refid="test.classpath" /&gt;
      &lt;pathelement location="${test.classes}" /&gt;
    &lt;/classpath&gt;
    &lt;formatter type="xml" /&gt;<co id="junit-ant-4"/>
    &lt;batchtest fork="yes" forkmode="perBatch"<co id="junit-ant-5"/> todir="${test.reports}"&gt;
      &lt;fileset dir="${test.src}"&gt;<co id="junit-ant-6"/>
        &lt;include name="**/*Test*.java" /&gt;
      &lt;/fileset&gt;
    &lt;/batchtest&gt;
  &lt;/junit&gt;
  &lt;fail message="TEST FAILURE" if="failed" /&gt;<co id="junit-ant-7"/>
&lt;/target&gt;</programlisting>
    <calloutlist>
      <callout arearefs="junit-ant-1">
        <para>Nous devons mettre en place un <emphasis>classpath</emphasis> contenant les fichiers JAR <filename moreinfo="none">junit</filename> et <filename moreinfo="none">junit-ant</filename>, sans oublier
        les classes de l’application et toute autre dépendance de l’application pour la
        compilation et le lancement.</para>
      </callout>
      <callout arearefs="junit-ant-2">
        <para>Les tests en eux-mêmes sont lancés ici. L’option
        <literal moreinfo="none">haltonfailure</literal> est utilisée pour faire échouer le build
        immédiatement dès qu’un test échoue. Dans un environnement d’Intégration Continue,
        ce n’est pas exactement ce qu’on veux, puisque nous devons également avoir
        les résultats des tests suivants. Nous avons donc positionné cette valeur à
        <literal moreinfo="none">no</literal> et utilisé l’option <literal moreinfo="none">failureproperty</literal>
        pour forcer l’échec du build dès que tous les tests sont
        terminés.</para>
      </callout>
      <callout arearefs="junit-ant-3">
        <para>Le <emphasis>classpath</emphasis> doit contenir les librairies JUnit, les
        classes de votre application et leurs dépendances, et vos classes de test
        compilées.</para>
      </callout>
      <callout arearefs="junit-ant-4">
        <para>La tâche Junit de Ant peut produire des rapports aux formats texte et XML, mais
        pour Jenkins, nous avons seulement besoin de ceux en XML.</para>
      </callout>
      <callout arearefs="junit-ant-5">
        <para>L’option <literal moreinfo="none">fork</literal> lance vos test dans une JVM
        séparée. C’est généralement une bonne idée, puisque cela peut éviter les problèmes de type <emphasis>classloader</emphasis>
        liés à des conflits avec les librairies propres à Ant. Néanmoins, le comportement
        par défaut de la tâche Junit de Ant est de créer une nouvelle JVM pour chaque test,
        ce qui ralentit significativement les tests. L’option
        <literal moreinfo="none">perBatch</literal> est plus intéressante, puisqu’elle crée une seule nouvelle
        JVM pour chaque batch de tests.</para>
      </callout>
      <callout arearefs="junit-ant-6">
        <para>Vous définissez les tests que vous voulez lancer au sein d’un élément <emphasis>fileset</emphasis>. Cela
        permet une grande souplesse, et rend simple la définition d’autres objectifs
        pour différents sous-ensembles de tests (intégration, web, et autres).</para>
      </callout>
      <callout arearefs="junit-ant-7">
        <para>Force l’échec du build <emphasis>après</emphasis> la fin des
        tests, si l’un d’entre eux a échoué.</para>
      </callout>
    </calloutlist>
    <para>Si vous préférez TestNG, Ant est évidemment bien supporté également.
    En utilisant TestNG pour l’exemple précédent, vous pourriez faire quelque chose comme
    ceci :</para>
    <programlisting id="I_programlisting_d1e18632" format="linespecific">&lt;property name="build.dir" value="target" /&gt;
&lt;property name="java.classes" value="${build.dir}/classes" /&gt;
&lt;property name="test.classes" value="${build.dir}/test-classes" /&gt;
&lt;property name="test.reports" value="${build.dir}/test-reports" /&gt;
&lt;property name="lib" value="${build.dir}/lib" /&gt;

&lt;path id="test.classpath"&gt;
  &lt;pathelement location="${java.classes}" /&gt;
  &lt;pathelement location="${lib}" /&gt;
&lt;/path&gt;

&lt;taskdef resource="testngtasks" classpath="lib/testng.jar"/&gt;

&lt;target name="test" depends="test-compile"&gt;
  &lt;testng classpathref="test.classpath"
          outputDir="${testng.report.dir}"
          haltonfailure="no" 
          failureproperty="failed"&gt;
    &lt;classfileset dir="${test.classes}"&gt;
      &lt;include name="**/*Test*.class" /&gt;
    &lt;/classfileset&gt;
  &lt;/testng&gt;
  &lt;fail message="TEST FAILURE" if="failed" /&gt;
&lt;/target&gt;</programlisting>
    <para>TestNG est une librairie de test très flexible, et la tâche TestNG a
    beaucoup plus d’options que ça. Par exemple, pour lancer seulement les tests
    définis comme faisant partie du groupe “integration-test” que nous avons vu précédemment, nous pourrions faire
    ça :</para>
    <programlisting id="I_programlisting_d1e18636" format="linespecific">&lt;target name="integration-test" depends="test-compile"&gt;
  &lt;testng classpathref="test.classpath"
          <userinput moreinfo="none">groups="integration-test"</userinput>
          outputDir="${testng.report.dir}"
          haltonfailure="no" 
          failureproperty="failed"&gt;
    &lt;classfileset dir="${test.classes}"&gt;
      &lt;include name="**/*Test*.class" /&gt;
    &lt;/classfileset&gt;
  &lt;/testng&gt;
  &lt;fail message="TEST FAILURE" if="failed" /&gt;
&lt;/target&gt;</programlisting>
    <para>Ou pour lancer les tests en parallèle, en utilisant quatre threads concurrents, vous
    <indexterm id="I_indexterm_d1e18643" class="endofrange" startref="appa-ant2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm_d1e18645" class="endofrange" startref="appa-ant3" significance="normal"><primary/></indexterm>pourriez faire ça :</para>
    <programlisting id="I_programlisting_d1e18648" format="linespecific">&lt;target name="integration-test" depends="test-compile"&gt;
  &lt;testng classpathref="test.classpath"
          <userinput moreinfo="none">parallel="true"</userinput>
          <userinput moreinfo="none">threadCount=4</userinput>
          outputDir="${testng.report.dir}"
          haltonfailure="no" 
          failureproperty="failed"&gt;
    &lt;classfileset dir="${test.classes}"&gt;
      &lt;include name="**/*Test*.class" /&gt;
    &lt;/classfileset&gt;
  &lt;/testng&gt;
  &lt;fail message="TEST FAILURE" if="failed" /&gt;
&lt;/target&gt;</programlisting>
  </sect1>
</appendix>
