<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-first-steps">
  <title>Your First Steps with Jenkins</title>
  <sect1 id="sect-first-steps-introduction">
    <title>Introduction</title>
    <para>Dans ce chapitre, nous allons faire un tour rapide des fonctionnalités clé de Jenkins. 
      Tout d'abord, vous verrez combien il est facile d'installer Jenkins
      et d'y configurer votre première de build automatique. Nous n'entrerons pas
      dans les détails - ceux-ci vous seront donnés dans les chapitres suivants, ainsi
      que dans un chapitre détaillé sur l'administration de Jenkins à la fin de ce
      livre (<xref linkend="chapter-maintaining-jenkins"/>). Ce chapitre n'est qu'une introduction.
      Cependant, quand vous terminerez la lecture de ce chapitre vous aurez aussi eu un aperçu des rapports de
      sur les résultats des tests, la production de javadoc et la publication de la
      couverture de test! Nous avons un long chemin à parcourir, alors allons-y!</para>
  </sect1>
  <sect1 id="sect-first-steps-environment">
    <title>Préparation de votre environnement</title>
    <para>Vous<indexterm class="startofrange" id="ch02-env" significance="normal"><primary>Jenkins</primary><secondary>environment, requirements for</secondary></indexterm> pouvez 
    aborder ce chapitre de deux manières différentes. Vous le lisez entièrement, sans toucher un clavier, pour vous faire une idée
      sur ce qu'est Jenkins. Ou, vous pouvez mettre les mains dans le cambouis, et suivre les étapes sur votre machine.</para>
      <para>Si vous voulez<indexterm id="I_indexterm2_d1e949" significance="normal"><primary>version control systems</primary></indexterm> suivre tranquillement, il se peut que cela nécessite
        d'installer certains logiciels sur votre machine. Souvenez-vous que la
        fonction principale de tout outil d'Intégration Continue est de surveiller
        du code source dans un outil de gestion de configuration, d'en extraire
        la dernière version et de la construire dès que des modifications sont apportées.
        Donc, il vous faudra un outil de gestion de configuration. Dans le cas qui nous
        occupe, nous utiliserons <indexterm id="I_indexterm2_d1e953" significance="normal"><primary>Git</primary></indexterm><ulink url="http://git-scm.com">Git</ulink>.
        Le code source de notre simple projet se trouve hébergé sur <indexterm id="I_indexterm2_d1e959" significance="normal"><primary>GitHub repository</primary></indexterm><ulink url="https://github.com">GitHub</ulink>.
        Ne vous inquiétez pas, vous ne risquerez pas de perturber ce référentiel avec vos modifications : vous travaillerez sur votre propre réplique et vous pourrez y faire ce que vous voulez.
        Si vous n'avez jamais utilisé Git et/ou si vous n'avez pas un compte sur GitHub, ne vous inquiétez pas nous vous guiderons pour vos premiers pas et l'installation est très bien documentée
        sur le site web de GitHub. Nous vous expliquerons comment mettre tout cela en place par la suite.</para>
    <?dbfo-need height=”1in”?>
      <para>Dans ce chapitre, nous utiliserons Jenkins pour construire une application Java
        avec Apache Maven. <indexterm id="I_indexterm2_d1e968" significance="normal">
          <primary>Maven</primary>
        </indexterm>Apache Maven est un outil de build très largement utilisé dans le monde Java,
        avec de nombreuses et puissantes fonctionalités telles que la gestion déclarative
        des dépendances, le principe de convention plutôt que configuration et un très grand
        nombre de plugins. Pour construire tout cela, nous
        utiliserons les dernières versions du<indexterm id="I_indexterm2_d1e972" significance="normal">
            <primary>JDK (Java Development Kit)</primary>
          </indexterm>
          <indexterm id="I_indexterm2_d1e975" significance="normal">
            <primary>Java Development Kit</primary>
            <see>JDK</see>
          </indexterm>Java Development Kit (JDK) et d'Apache Maven, mais
        si vous ne les avez pas déjà installées sur votre machine ne vous inquiétez pas!
        Comme nous le verrons, Jenkins  saura les installer pour vous.</para>
    <sect2>
      <title>Installation de Java</title>
      <para>La<indexterm id="I_indexterm2_d1e986" significance="normal">
        <primary>installation</primary>
        <secondary>JRE</secondary>
      </indexterm> première chose que vous allez devoir installer sur votre machine est Java.
      Hudson est une application web Java web application, aussi vous aurez besoin au minimum
      du Java Runtime Environment, ou JRE<indexterm id="I_indexterm2_d1e992" significance="normal">
        <primary>JRE (Java Runtime Environment), installing</primary>
      </indexterm>
      <indexterm id="I_indexterm2_d1e995" significance="normal">
        <primary>Java Runtime Environment (JRE), installing</primary>
      </indexterm>  pour l'exécuter. Pour les exemples de ce chapite, vous devrez avoir une version
      récente de Java 6 (ces exemples ont été écrits avec Java 6 update 17 et la dernière
      version disponible au moment où j'écris ces mots est Java 6 update 19). Si vous n'êtes pas
      sûr, vous pouvez vérifier votre version depuis la ligne de commande (en ouvrant une console
        DOS sous Windows) et en exécutant <literal moreinfo="none">java
          -version</literal>. Si Java est installé
        sur votre machine vous devriez obtenir quelquechose ressemblant à ceci :</para>
      <screen format="linespecific">$ <userinput moreinfo="none">java -version</userinput>
java version "1.6.0_17"
Java(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025)
Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101, mixed mode)</screen>
      <para>If you don’t have a version already installed, or if your version
      is an older one, download and install the latest JRE installer from the
      <ulink url="http://java.sun.com/javase/downloads/index.jsp">Java
      website</ulink>, as shown in <xref linkend="fig-installing-java"/>.</para>
      <figure float="0" id="fig-installing-java">
        <title>Installing Java</title>
        <mediaobject id="I_mediaobject2_d1e1017">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0201.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0201.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Installation de Git</title>
      <para>Etant donné<indexterm id="I_indexterm2_d1e1027" significance="normal"><primary>installation</primary><secondary>Git</secondary></indexterm><indexterm id="I_indexterm2_d1e1032" significance="normal"><primary>Git</primary><secondary>installing</secondary></indexterm> que nous utiliserons Git, il va vous falloir installer et configurer
      Git sur votre machine. Si vous êtes novice en ce qui concerne Git, un petit tour sur le <ulink url="http://gitref.org">site de référence de Git</ulink> peut
      vous être utile. Et si vous vous perdez en cours de route, la mnière de procéder est entièrement décrite dans les <ulink url="http://help.github.com">pages d'aide de GitHub</ulink>.</para>
      <para>First of all, you need to install Git on your machine. This
      involves downloading the appropriate installer for your operating system
      from the <ulink url="http://git-scm.com">Git website</ulink>. There are
      packaged installers for both Windows and Mac OS X. If you are using
      Linux, you are in Git’s home ground: most Linux distributions. On Ubuntu
      or some other Debian-based distribution, you could run something
      like:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">sudo apt-get install git-core</userinput></screen>
      <para>On Fedora or another RPM-based distribution, you could use
      <literal moreinfo="none">yum</literal> instead:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">sudo yum install git-core</userinput></screen>
      <para>And, being Linux, you also have the option of installing the
      application from source. There are instructions on how to do this on the
      Git website.</para>
      <?dbfo-need height=”1in”?>
      <para>Once you are done, check that Git is installed and available by
      invoking it from the command line:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">git --version</userinput>
git version 1.7.1</screen>
    </sect2>
    <sect2>
      <title>Setting Up a GitHub Account</title>
      <para>Next, <indexterm id="I_indexterm2_d1e1077" significance="normal"><primary>GitHub repository</primary><secondary>account for, setting up</secondary></indexterm>if you don’t already have one, you will need to create a
      GitHub account. This is easy and (for our purposes, at least) free of
      charge, and all the cool kids have one. Go to the <ulink url="https://github.com/plans">GitHub signup page</ulink> and choose the
      “Create a free account” option. You will just need to provide a
      username, a password, and your email address (see <xref linkend="fig-github-signup"/>).</para>
      <figure float="0" id="fig-github-signup">
        <title>Signing up for a GitHub account</title>
        <mediaobject id="I_mediaobject2_d1e1091">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0202.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0202.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Configuring SSH Keys</title>
      <para>GitHub <indexterm id="I_indexterm2_d1e1101" significance="normal"><primary>SSH keys</primary></indexterm>uses SSH keys to establish a secure connection between
      your computer and the GitHub servers. Setting these up is not hard, but
      involves a bit of work: fortunately there are clear and detailed
      instructions for each operating system on the <ulink url="http://help.github.com/set-up-git-redirect">GitHub
      website</ulink>.</para>
    </sect2>
    <sect2 id="sect-git-fork">
      <title>Forking the Sample Repository</title>
      <para>As <indexterm class="startofrange" id="ch02-fork" significance="normal"><primary>GitHub repository</primary><secondary>forking</secondary></indexterm>we mentioned earlier, all the sample code for this book is
      stored on GitHub, at the following URL: <ulink url="https://github.com/wakaleo/game-of-life"/>. This is a public
      repository, so you can freely view the source code online and check out
      your own working copy. However, if you want to make changes, you will
      need to create your own fork. A fork is a personal copy of a repository
      that you can use as you wish. To create a fork, login to your GitHub
      account and navigate to the <ulink role="orm:hideurl" url="https://github.com/wakaleo/game-of-life">repository URL</ulink>.
      Then click on the Fork button (see <xref linkend="fig-github-fork"/>).
      This will create your own personal copy of the repository.</para>
      <para>Once <indexterm id="I_indexterm2_d1e1128" significance="normal"><primary>GitHub repository</primary><secondary>cloning a local copy of</secondary></indexterm>you have forked the repository, you should clone a local
      copy to make sure everything is set up correctly. Go to the command line
      and run the following command (replacing
      <replaceable>&lt;username&gt;</replaceable> with your own GitHub
      username):</para>
      <screen format="linespecific">$ <userinput moreinfo="none">git clone git@github.com:<replaceable>&lt;username&gt;</replaceable>/game-of-life.git</userinput></screen>
      <para>This will “clone” (or check out, in Subversion terms) a copy of
      the project onto your local drive:</para>
      <screen format="linespecific">git clone git@github.com:john-smart/game-of-life.git
Initialized empty Git repository in /Users/johnsmart/.../game-of-life/.git/
remote: Counting objects: 1783, done.
remote: Compressing objects: 100% (589/589), done.
remote: Total 1783 (delta 1116), reused 1783 (delta 1116)
Receiving objects: 100% (1783/1783), 14.83 MiB | 119 KiB/s, done.
Resolving deltas: 100% (1116/1116), done.</screen>
      <para>You should now have a local copy of the project that you can build
      and execute. We will be using this project later on to trigger changes
      in <indexterm id="I_indexterm2_d1e1150" class="endofrange" startref="ch02-fork" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1152" class="endofrange" startref="ch02-env" significance="normal"><primary/></indexterm>the repository.</para>
      <figure float="none" id="fig-github-fork">
        <title>Forking the sample code repository</title>
        <mediaobject id="I_mediaobject2_d1e1158">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0203.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0203.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="sect-first-steps-starting">
    <title>Démarrer Jenkins</title>
    <para><indexterm class="startofrange" id="ch02-jws1" significance="normal"><primary>installation</primary><secondary>Jenkins</secondary><tertiary sortas="Java Web Start">with Java Web start</tertiary></indexterm><indexterm class="startofrange" id="ch02-jws2" significance="normal"><primary>Java Web Start</primary><secondary>installing and starting Jenkins using</secondary></indexterm><indexterm id="I_indexterm2_d1e1179" significance="normal"><primary>Jenkins</primary><secondary>running</secondary><tertiary sortas="Java Web Start">from Java Web Start</tertiary></indexterm>There are several ways to run Jenkins on your machine. One
    of the easiest ways to run Jenkins for the first time is to use Java Web
    Start. Java Web Start is a technology that lets you start up a Java
    application on your local machine via a URL on a web page—it comes bundled
    with the Java JRE. In our case, this will start a Jenkins server running
    on your machine, and let you experiment with it as if it were installed
    locally. All you need for this to work is a recent (Java 6 or later)
    version of the Java Runtime Environment (JRE), which we installed in the
    previous section.</para>
    <para>For convenience, there is a link to the Jenkins Java Web Start
    instance on the <ulink url="http://www.wakaleo.com/books/jenkins-the-definitive-guide">book
    resources page</ulink>. Here you will find a large orange Launch button in
    the Book Resources section (see <xref linkend="fig-hudson-webstart-page"/>). You can also find this link on the
    Meet Jenkins page on the <ulink url="http://wiki.jenkins-ci.org/display/JENKINS/Meet+Jenkins">Jenkins
    website</ulink>, where, if you scroll down far enough, you should find a
    Test Drive section with an identical Launch button.</para>
    <figure float="none" id="fig-hudson-webstart-page">
      <title>Running Jenkins using Java Web Start from the book’s
      website</title>
      <mediaobject id="I_mediaobject2_d1e1200">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0304.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0304.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Java Web Start seems to work best on Firefox. When you click on the
    Launch button on either of these sites in Firefox, the browser will ask if
    you want to open a file called <filename moreinfo="none">jenkins.jnlp</filename> using
    Java Web Start. Click on OK—this will download Jenkins and start it up on
    your machine (see <xref linkend="fig-first-steps-downloading-hudson"/>).</para>
    <figure float="none" id="fig-first-steps-downloading-hudson">
      <title>Java Web Start will download and run the latest version of
      Jenkins</title>
      <mediaobject id="I_mediaobject2_d1e1215">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0205.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0205.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>In other browsers, clicking on this button may simply download the
    JNLP file. In Internet Explorer, you may even need to right click on the
    link and select “Save Target As” to save the JNLP file, and then run it
    from Windows Explorer. However, in both of these cases, when you open the
    JNLP file, Java Web Start will download and start Jenkins.</para>
    <para>Java Web Start will only need to download a particular version of
    Jenkins once. From then on, when you click on the “Launch” button again,
    Java Web Start will use the copy of Jenkins it has already downloaded
    (that is, until the next version comes out). Ignore any messages your
    operating system or anti-virus software may bring up—it is perfectly safe
    to run Jenkins on your local machine.</para>
    <para>Once it has finished downloading, it will start up Jenkins on your
    machine. You will be able to see it running in a small window
    called<indexterm id="I_indexterm2_d1e1226" significance="normal"><primary>Jenkins Console</primary></indexterm> “Jenkins Console” (see <xref linkend="fig-first-steps-console"/>). To stop <indexterm id="I_indexterm2_d1e1232" significance="normal"><primary>Jenkins</primary><secondary>stopping</secondary></indexterm>Jenkins at any time, just close this <indexterm id="I_indexterm2_d1e1238" class="endofrange" startref="ch02-jws1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1240" class="endofrange" startref="ch02-jws2" significance="normal"><primary/></indexterm>window.</para>
    <figure float="none" id="fig-first-steps-console">
      <title>Java Web Start running Jenkins</title>
      <mediaobject id="I_mediaobject2_d1e1246">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0206.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0206.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>There <indexterm id="I_indexterm2_d1e1253" significance="normal"><primary>installation</primary><secondary>Jenkins</secondary><tertiary sortas="WAR file">from WAR file</tertiary></indexterm><indexterm id="I_indexterm2_d1e1260" significance="normal"><primary>WAR file, installing Jenkins from</primary></indexterm><indexterm id="I_indexterm2_d1e1263" significance="normal"><primary>Jenkins</primary><secondary>installing</secondary><see>installation</see></indexterm>are also installers available for the principal operating
    systems available on the <ulink url="http://jenkins-ci.org">Jenkins
    website</ulink>. Or, if you are an experienced Java user versed in the
    ways of WAR files, you may prefer to simply download the latest version of
    Jenkins and run it from the command line. Jenkins comes in the form of an
    executable WAR file—you can download the most recent version from the
    Jenkins website <ulink url="http://http://jenkins-ci.org">home
    page</ulink>. For convenience, there is also a link to the latest version
    of Jenkins in the Resources section of this book’s <ulink url="http://www.wakaleo.com/books/jenkins-the-definitive-guide">website</ulink>.</para>
    <para>Once <indexterm id="I_indexterm2_d1e1283" significance="normal"><primary>Jenkins</primary><secondary>running</secondary><tertiary sortas="command line">from command line</tertiary></indexterm>downloaded, you can start Jenkins from the command line as
    shown here:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">java -jar jenkins.war</userinput></screen>
    <para>Whether you have started Jenkins using Java Web Start or from the
    command line, Jenkins should now be running on your local machine. By
    default, Jenkins will be running on port 8080, so you can access Jenkins
    in your web <phrase role="keep-together">browser on</phrase> <ulink url="http://localhost:8080"/>.</para>
    <para>Alternatively, if you are familiar with Java application servers
    such as <indexterm id="I_indexterm2_d1e1304" significance="normal"><primary>Jenkins</primary><secondary>running</secondary><tertiary sortas="application">from application server</tertiary></indexterm><indexterm id="I_indexterm2_d1e1311" significance="normal"><primary>Tomcat application server</primary><secondary>deploying Jenkins using</secondary></indexterm><indexterm id="I_indexterm2_d1e1316" significance="normal"><primary>application server</primary><secondary>deploying Jenkins to</secondary></indexterm>Tomcat, you can simply deploy the Jenkins WAR file to your
    application server—with Tomcat, for example, you could simply place the
    <filename moreinfo="none">jenkins.war</filename> file in Tomcat’s
    <filename moreinfo="none">webapps</filename> directory. If you are running
    Jenkins on an application server, the URL that you use to access Jenkins
    will be slightly different. On a default Tomcat installation, for example,
    you can access Jenkins in your web browser on <ulink url="http://localhost:8080/jenkins"/>.</para>
    <para>When <indexterm id="I_indexterm2_d1e1332" significance="normal"><primary>Jenkins</primary><secondary>home page for</secondary></indexterm><indexterm id="I_indexterm2_d1e1337" significance="normal"><primary>home page</primary></indexterm><indexterm id="I_indexterm2_d1e1340" significance="normal"><primary>start page</primary><see>home page</see></indexterm>you open Jenkins in your browser, you should see a screen
    like the one shown in <xref linkend="fig-hudson-start" os=""/>. You are
    now ready to take your first steps with Jenkins!</para>
    <figure float="none" id="fig-hudson-start">
      <title>The Jenkins start page</title>
      <mediaobject id="I_mediaobject2_d1e1351">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0303.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0303.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-first-steps-configuring">
    <title>Configuring the Tools</title>
    <para>Before <indexterm class="startofrange" id="ch02-configure" significance="normal"><primary>configuration</primary></indexterm>we get started, we do need to do a little configuration.
    More precisely, we need to tell Jenkins about the build tools and JDK
    versions we will be using for our builds.</para>
    <para>Click on the <indexterm id="I_indexterm2_d1e1367" significance="normal"><primary>Manage Jenkins screen</primary></indexterm>Manage Jenkins link on the home page (see <xref linkend="fig-hudson-start" os=""/>). This will take you to the Manage
    Jenkins page, the central one-stop-shop for all your Jenkins
    configuration. From this screen, you can configure your Jenkins server,
    install and upgrade plugins, keep track of system load, manage distributed
    build servers, and more! For now, however, we’ll keep it simple. Just
    click on the Configuring System link at the top of the list (see <xref linkend="fig-hudson-manage"/>).</para>
    <figure float="none" id="fig-hudson-manage">
      <title>The Manage Jenkins screen</title>
      <mediaobject id="I_mediaobject2_d1e1378">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0401.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0401.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This will take you to Jenkins’s main configuration screen (see <xref linkend="fig-hudson-configure"/>). From here you can configure everything
    from security configuration and build tools to email servers, version
    control systems and integration with third-party software. The screen
    contains a lot of information, but most of the fields contain sensible
    default values, so you can safely ignore them for now.</para>
    <figure float="0" id="fig-hudson-configure">
      <title>The Configure Jenkins screen</title>
      <mediaobject id="I_mediaobject2_d1e1390">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0402.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0402.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>For now, you will just need to configure the tools required to build
    our sample project. The application we will be building is a Java
    application, built using Maven. So in this case, all we need to do is to
    set up a recent JDK and Maven installation.</para>
    <para>However before we start, take a look at the little blue question
    mark icons lined to the right of the screen. These are<indexterm id="I_indexterm2_d1e1399" significance="normal"><primary>Jenkins</primary><secondary>help icons in</secondary></indexterm> Jenkins’s contextual help buttons. If you are curious about
    a particular field, click on the help icon next to it and Jenkins will
    display a very detailed description about what it is and how it
    works.</para>
    <sect2>
      <title>Configuring Your Maven Setup</title>
      <para><indexterm class="startofrange" id="ch02-maven" significance="normal"><primary>Maven</primary><secondary>installing</secondary></indexterm><indexterm class="startofrange" id="ch02-maven2" significance="normal"><primary>configuration</primary><secondary>Maven</secondary></indexterm><indexterm class="startofrange" id="ch02-maven3" significance="normal"><primary>installation</primary><secondary>Maven</secondary></indexterm><indexterm class="startofrange" id="ch02-maven4" significance="normal"><primary>Maven</primary><secondary>configuring</secondary></indexterm>Our sample project uses Maven, so we will need to install
      and configure Maven first. Jenkins provides great out-of-the-box support
      for Maven. Scroll down until you reach the Maven section in the
      Configure System screen (see <xref linkend="fig-hudson-maven"/>).</para>
      <para>Jenkins provides several options when it comes to configuring
      Maven. If you already have Maven installed on your machine, you can
      simply provide the path in the MAVEN_HOME field. Alternatively, you can
      install a Maven distribution by extracting a zip file located in a
      shared directory, or execute a home-rolled installation script. Or you
      can let Jenkins do all the hard work and download Maven for you. To
      choose this option, just tick the Install automatically checkbox.
      Jenkins will download and install Maven from the Apache website the
      first time a build job needs it. Just choose the Maven version you want
      to install and Jenkins will do the rest. You will also need to give a
      name for your Maven version (imaginatively called “Maven 2.2.1” in the
      example), so that you can refer to it in your build jobs.</para>
      <para>For this to work, you need to have an Internet connection. If you
      are behind a proxy, you’ll need to provide your proxy information—we
      discuss how to set this up in <xref linkend="sect-configuration-proxies"/>.</para>
      <figure float="0" id="fig-hudson-maven">
        <title>Configuring a Maven installation</title>
        <mediaobject id="I_mediaobject2_d1e1441">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0210.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0210.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>One of the nice things about the Jenkins Maven installation
      process is how well it <phrase role="keep-together">works</phrase> with
      remote build agents. Later on in the book, we’ll see how Jenkins can
      also run builds on remote build servers. You can define a standard way
      of installing Maven for all of your build servers (downloading from the
      Internet, unzipping a distribution bundle on a shared server, etc.)—all
      of these options will work when you add a new remote build agent or set
      up a new build server using this Jenkins <indexterm id="I_indexterm2_d1e1451" class="endofrange" startref="ch02-maven" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1453" class="endofrange" startref="ch02-maven2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1455" class="endofrange" startref="ch02-maven3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1457" class="endofrange" startref="ch02-maven4" significance="normal"><primary/></indexterm>configuration.</para>
    </sect2>
    <sect2>
      <title>Configuring the JDK</title>
      <para><indexterm id="I_indexterm2_d1e1464" significance="normal"><primary>JDK (Java Development Kit)</primary><secondary>configuring</secondary></indexterm><indexterm id="I_indexterm2_d1e1469" significance="normal"><primary>configuration</primary><secondary>JDK</secondary></indexterm>Once you have configured your Maven installation, you will
      also need to configure a JDK installation (see <xref linkend="fig-hudson-jdk"/>). Again, if you have a Java JDK (as opposed
      to a Java Runtime Environment—the JDK contains extra development tools
      such as the Java compiler) already installed on your workstation, you
      can simply provide the path to your JDK in the JAVA_HOME field.
      Otherwise, you can ask Jenkins to download the JDK from the <ulink url="http://www.oracle.com/technetwork/java/index.html">Oracle
      website</ulink> the first time a build job requires it. This is similar
      to the automatic Maven installation feature—just pick the JDK version
      you need and Jenkins will take care of all the logistics. However, for
      licensing reasons, you will also need to tick a checkbox to indicate
      that you agree with the Java SDK License Agreement.</para>
      <figure float="0" id="fig-hudson-jdk">
        <title>Configuring a JDK installation</title>
        <mediaobject id="I_mediaobject2_d1e1483">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0211.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0211.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Now go to the bottom of the screen and click on the Save
      button.</para>
    </sect2>
    <sect2>
      <title>Notification</title>
      <para>Another<indexterm id="I_indexterm2_d1e1495" significance="normal"><primary>notifications</primary><secondary>configuring</secondary></indexterm><indexterm id="I_indexterm2_d1e1500" significance="normal"><primary>configuration</primary><secondary>notifications</secondary></indexterm><indexterm id="I_indexterm2_d1e1505" significance="normal"><primary>email notifications</primary><seealso>notifications</seealso></indexterm> important aspect you would typically set up is
      notification. When a Jenkins build breaks, and when it works again, it
      can send out email messages to the team to spread the word. Using
      plugins, you can also get it to send instant messages or SMS messages,
      post entries on Twitter, or get people notified in a few other ways. It
      all depends on what works best for your organizational culture. Email
      notification is easy enough to set up if you know your local SMTP server
      address—just provide this value in the Email Notification section
      towards the bottom of the main configuration page. However, to keep
      things simple, we’re not going to worry about notifications just
      yet.</para>
    </sect2>
    <sect2>
      <title>Setting Up Git</title>
      <para>The <indexterm class="startofrange" id="ch02-git" significance="normal"><primary>Git plugin</primary></indexterm><indexterm class="startofrange" id="ch02-git2" significance="normal"><primary>configuration</primary><secondary>Git</secondary></indexterm><indexterm class="startofrange" id="ch02-git3" significance="normal"><primary>plugins</primary><secondary>Git</secondary></indexterm>last thing we need to configure for this demo is to get
      Jenkins working with Git. Jenkins comes with support for <indexterm id="I_indexterm2_d1e1531" significance="normal"><primary>Subversion</primary><secondary>Jenkins supporting</secondary></indexterm><indexterm id="I_indexterm2_d1e1536" significance="normal"><primary>Jenkins</primary><secondary>version control systems supported by</secondary></indexterm>Subversion and <indexterm id="I_indexterm2_d1e1542" significance="normal"><primary>CVS</primary><secondary>Jenkins supporting</secondary></indexterm><indexterm id="I_indexterm2_d1e1547" significance="normal"><primary>Jenkins</primary><secondary>CVS supported by</secondary></indexterm>CVS out of the box, but you will need to install the
      Jenkins Git plugin to be able to complete the rest of this tutorial.
      Don’t worry, the process is pretty simple. First of all, click on the
      Manage Jenkins link to the left of the screen to go back to the main
      configuration screen (see <xref linkend="fig-hudson-manage"/>). Then
      click on Manage Plugins. This will open the plugin configuration screen,
      which is where you manage the extra features you want to install on your
      Jenkins server. You should see four tabs: Updates, Available, Installed,
      and Advanced (see <xref linkend="fig-jenkins-plugin-manager-installed"/>).</para>
      <figure float="0" id="fig-jenkins-plugin-manager-installed">
        <title>Managing plugins in Jenkins</title>
        <mediaobject id="I_mediaobject2_d1e1561">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0212.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0212.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>For now, just click on the Available tab. Here you will see a very
      long list of available plugins. Find the Git Plugin entry in this list
      and tick the corresponding checkbox (see <xref linkend="fig-jenkins-installing-git"/>), and then scroll down to the
      bottom of the screen and click on Install. This will download and
      install the Jenkins Git plugin into your local Jenkins instance.</para>
      <figure float="0" id="fig-jenkins-installing-git">
        <title>Installing the Git plugin</title>
        <mediaobject id="I_mediaobject2_d1e1573">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0213.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0213.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Once it is done, you will need to restart Jenkins for the changes
      to take effect. To do this, you can simply click on the “Restart Jenkins
      when no jobs are running” button displayed on the installation screen,
      or alternatively shut down and restart Jenkins by hand.</para>
      <para>That is all we need to configure at this stage. You are now ready
      to set up your first Jenkins build <indexterm id="I_indexterm2_d1e1582" class="endofrange" startref="ch02-configure" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1584" class="endofrange" startref="ch02-git" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1586" class="endofrange" startref="ch02-git2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1588" class="endofrange" startref="ch02-git3" significance="normal"><primary/></indexterm>job!</para>
    </sect2>
  </sect1>
  <sect1 id="sect-first-steps-first-job">
    <title>Your First Jenkins Build Job</title>
    <para>Build jobs<indexterm class="startofrange" id="ch02-jobcreate" significance="normal"><primary>build jobs</primary><secondary>creating</secondary></indexterm> are at the heart of the Jenkins build process. Simply put,
    you can think of a Jenkins build job as a particular task or step in your
    build process. This may involve simply compiling your source code and
    running your unit tests. Or you might want a build job to do other related
    tasks, such as running your integration tests, measuring code coverage or
    code quality metrics, generating technical documentation, or even
    deploying your application to a web server. A real project usually
    requires many separate but related build jobs.</para>
    <para>Our sample application is a simple Java implementation of John
    Conway’s <indexterm class="startofrange" id="ch02-game" significance="normal"><primary>Game of Life example application</primary></indexterm>“Game of Life.”<footnote id="footnote-game-of-life"><para>See <ulink url="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"/>.</para></footnote> The Game of Life is a mathematical game which takes place on
    a two dimensional grid of cells, which we will refer to as the Universe.
    Each cell can be either alive or dead. Cells interact with their direct
    neighbors to determine whether they will live or die in the next
    generation of cells. For each new generation of cells, the following rules
    are applied:</para>
    <itemizedlist>
      <listitem>
        <para>Any live cell with fewer than two live neighbors dies of
        underpopulation.</para>
      </listitem>
      <listitem>
        <para>Any live cell with more than three live neighbors dies of
        overcrowding.</para>
      </listitem>
      <listitem>
        <para>Any live cell with two or three live neighbors lives on to the
        next generation.</para>
      </listitem>
      <listitem>
        <para>Any dead cell with exactly three live neighbors becomes a live
        cell.</para>
      </listitem>
    </itemizedlist>
    <para>Our application is a Java module, built using Maven, that implements
    the core business logic of the Game of Life. We’ll worry about the user
    interfaces later on. For now, let’s see how we can automate this build in
    Jenkins. If you are not familiar with Maven, or prefer Ant or another
    build framework—don’t worry! The examples don’t require much knowledge of
    Maven, and we’ll be looking at plenty of examples of using other build
    tools later on in the book.</para>
    <para>For our first build job, we will keep it simple: we are just going
    to compile and test our sample application. Click on the New Job link. You
    should get to a screen similar to <xref linkend="fig-first-build-job"/>.
    Jenkins supports several different types of <indexterm id="I_indexterm2_d1e1633" significance="normal"><primary>build jobs</primary><secondary>types of</secondary></indexterm>build jobs. The two most commonly-used are the freestyle
    builds and the Maven 2/3 builds. The <indexterm id="I_indexterm2_d1e1639" significance="normal"><primary>freestyle build jobs</primary></indexterm>freestyle projects allow you to configure just about any
    sort of build job: they are highly flexible and very configurable. The
    <indexterm id="I_indexterm2_d1e1643" significance="normal"><primary>Maven build jobs</primary></indexterm>Maven 2/3 builds understand the Maven project structure, and
    can use this to let you set up Maven build jobs with less effort and a few
    extra features. There are also plugins that provide support for other
    types of build jobs. Nevertheless, although our project does use Maven, we
    are going to use a<indexterm class="startofrange" id="ch02-freecreate" significance="normal"><primary>freestyle build jobs</primary><secondary>creating</secondary></indexterm> freestyle build job, just to keep things simple and general
    to start with. So choose “Build a freestyle software project”, as shown in
    <xref linkend="fig-first-build-job"/>.</para>
    <para>You’ll <indexterm id="I_indexterm2_d1e1658" significance="normal"><primary>build jobs</primary><secondary>naming</secondary></indexterm>also need to give your build job a sensible name. In this
    case, call it <emphasis>gameoflife-default</emphasis>, as it will be the
    default CI build for our Game of Life project.</para>
    <figure float="0" id="fig-first-build-job">
      <title>Setting up your first build job in Jenkins</title>
      <mediaobject id="I_mediaobject2_d1e1670">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0214.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0214.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Once you click on OK, Jenkins will display the project configuration
    screen (see <phrase role="keep-together"><xref linkend="fig-jenkins-git-new-project"/></phrase>).</para>
    <para>In a nutshell, Jenkins works by checking out the source code of your
    project and building it in its own workspace. So the next thing you need
    to do is to tell Jenkins where it can find the <indexterm id="I_indexterm2_d1e1682" significance="normal"><primary>build jobs</primary><secondary>source code location for</secondary></indexterm>source code for your project. You do this in the<indexterm id="I_indexterm2_d1e1688" significance="normal"><primary>version control systems</primary><secondary>configuring</secondary></indexterm> Source Code Management <indexterm id="I_indexterm2_d1e1694" significance="normal"><primary>Source Code Management</primary><see>SCM; version control systems</see></indexterm><indexterm id="I_indexterm2_d1e1699" significance="normal"><primary>SCM (Source Code Management)</primary><seealso>version control systems</seealso></indexterm>section (see <xref linkend="fig-jenkins-git-new-project"/>). Jenkins<indexterm id="I_indexterm2_d1e1707" significance="normal"><primary>Jenkins</primary><secondary>version control systems supported by</secondary></indexterm> provides support for CVS and Subversion out of the box, and
    many others such as Git, Mercurial, ClearCase, Perforce and many more via
    plugins.</para>
    <para>For this project, we will be getting the source code from the GitHub
    repository we set up earlier. On the Jenkins screen, choose “Git” and
    enter the Repository URL we defined in <xref linkend="sect-git-fork"/>
    (see <xref linkend="fig-jenkins-git-new-project"/>). Make sure this is
    the URL of your fork, and not of the original repository: it should have
    the form
    <emphasis>git@github.com:<replaceable>&lt;username&gt;</replaceable>/game-of-life.git</emphasis>,
    where <replaceable>&lt;username&gt;</replaceable> is the username for your
    own GitHub account. You can leave all of the other options up until here
    with their default values.</para>
    <figure float="0" id="fig-jenkins-git-new-project">
      <title>Telling Jenkins where to find the source code</title>
      <mediaobject id="I_mediaobject2_d1e1732">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0215.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0215.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Once<indexterm id="I_indexterm2_d1e1739" significance="normal"><primary>build jobs</primary><secondary>scheduling</secondary><see>build triggers</see></indexterm><indexterm class="startofrange" id="ch02-trigger2" significance="normal"><primary>build triggers</primary><secondary>configuring</secondary></indexterm> we have told Jenkins where to find the source code for our
    application, we need to tell it how often it should check for updates. We
    want Jenkins to monitor the <phrase role="keep-together">repository</phrase> and start a build whenever any
    changes have been committed. This is a common way to set up a build job in
    a Continuous Integration context, as it provides fast feedback if the
    build fails. Other approaches include building on regular intervals (for
    example, once a day), requiring a user to kick of the build manually, or
    even triggering a build remotely using a “post-commit” hook in your
    SCM.</para>
    <para>We configure all of this in the Build Triggers section (see <xref linkend="fig-new-job-triggers"/>). Pick the Poll SCM option and enter “*
    * * * *” (that’s five asterisks separated by spaces) in the Schedule box.
    Jenkins schedules are configured using the <literal moreinfo="none">cron</literal> syntax,
    well-known in the Unix world. The <literal moreinfo="none">cron</literal> syntax consists
    of five fields separated by white space, indicating respectively <phrase role="keep-together">the</phrase> minute (0–59), hour (0–23), day of the
    month (1–31), month (1–12) and the day of the week (0–7, with 0 and 7
    being Sunday). The star is a wildcard character which accepts any valid
    value for that field. So five stars basically means “every minute of every
    hour of every day.” You can also provide ranges of values: “* 9-17 * * *”
    would mean “every minute of every day, between 9am and 5pm.” You can also
    space out the schedule using intervals: “*/5 * * * *” means “every 5
    minutes,” for example. Finally, there are some other convenient
    short-hands, such as “@daily” and “@hourly”.</para>
    <para>Don’t worry if your Unix skills are a little rusty—if you click on
    the blue question mark icon on the side of the schedule box, Jenkins will
    bring up a very complete <indexterm id="I_indexterm2_d1e1770" class="endofrange" startref="ch02-trigger2" significance="normal"><primary/></indexterm>refresher.</para>
    <figure float="0" id="fig-new-job-triggers">
      <title>Scheduling the build jobs</title>
      <mediaobject id="I_mediaobject2_d1e1776">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0216.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0216.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The<indexterm class="startofrange" id="ch02-stepadd" significance="normal"><primary>build jobs</primary><secondary>steps in, adding</secondary></indexterm> next step is to configure the actual build itself. In a
    freestyle build job, you can break down your build job into a number of
    build steps. This makes it easier to organize builds in clean, separate
    stages. For example, a build might run a suite of functional tests in one
    step, and then tag the build in a second step if all of the functional
    tests succeed. In technical terms, a build step might involve invoking an
    Ant task or a Maven target, or running a shell script. There are also
    Jenkins plugins that let you use additional types of build steps: Gant,
    Grails, Gradle, Rake, Ruby, MSBuild and many other build tools are all
    supported.</para>
    <para><indexterm id="I_indexterm2_d1e1790" significance="normal"><primary>Maven</primary><secondary sortas="build steps">build steps in freestyle build
        jobs</secondary></indexterm><indexterm id="I_indexterm2_d1e1795" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Maven build steps</tertiary></indexterm>For now, we just want to run a simple Maven build. Scroll
    down to the Build section and click on the “Add build step” and choose
    “Invoke top-level Maven targets” (see <xref linkend="fig-new-job-build-step"/>). Then enter “clean package” in the
    Goals field. If you are not familiar with Maven, this will delete any
    previous build artifacts, compile our code, run our unit tests, and
    generate a JAR file.</para>
    <figure float="none" id="fig-new-job-build-step">
      <title>Adding a build step</title>
      <mediaobject id="I_mediaobject2_d1e1808">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0217.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0217.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>By default, this build job will fail if the code does not compile or
    if any of the unit tests fail. That’s the most fundamental thing that
    you’d expect of any build server. But <phrase role="keep-together">Jenkins</phrase> also does a great job of helping you
    display your test results and test result trends.</para>
    <para>The<indexterm id="I_indexterm2_d1e1820" significance="normal"><primary>build jobs</primary><secondary>reports resulting from</secondary><see>reporting</see></indexterm><indexterm id="I_indexterm2_d1e1827" significance="normal"><primary>reporting</primary><secondary>test results</secondary><tertiary>JUnit reports</tertiary></indexterm><indexterm id="I_indexterm2_d1e1834" significance="normal"><primary>tests</primary><secondary>reports from</secondary><tertiary>JUnit reports</tertiary></indexterm> de facto standard for test reporting in the Java world is
    an <indexterm id="I_indexterm2_d1e1842" significance="normal"><primary>XML format for test reports</primary><see>JUnit reports</see></indexterm>XML format used by JUnit.<indexterm id="I_indexterm2_d1e1848" significance="normal"><primary>JUnit reports</primary><secondary>format for</secondary></indexterm> This format is also used by many other Java testing tools,
    such as TestNG, Spock and Easyb. Jenkins understands this format, so if
    your build produces JUnit XML test results, Jenkins can generate nice
    graphical test reports and statistics on test results over time, and also
    let you view the details of any test failures. Jenkins also keeps track of
    how long your tests take to run, both globally, and per test—this can come
    in handy if you need to track down performance issues.</para>
    <para>So the next thing we need to do is to get Jenkins to keep tabs on
    our unit tests.</para>
    <para><indexterm id="I_indexterm2_d1e1858" significance="normal"><primary>JUnit reports</primary><secondary>configuring in freestyle build job</secondary></indexterm>Go to the Post-build Actions section (see <xref linkend="fig-new-job-test-reports"/>) and tick “Publish JUnit test result
    report” checkbox. When Maven runs unit tests in a project, it
    automatically generates the XML test reports in a directory called
    <filename moreinfo="none">surefire-reports</filename> in the <filename moreinfo="none">target</filename> directory. So enter
    “**/target/surefire-reports/*.xml” in the “Test report XMLs” field. The
    two asterisks at the start of the path (“**”) are a best practice to make
    the configuration a bit more robust: they allow Jenkins to find the target
    directory no matter how we have configured Jenkins to check out the source
    code.</para>
    <para>Another<indexterm id="I_indexterm2_d1e1874" significance="normal"><primary>build jobs</primary><secondary>binary artifacts from</secondary><see>binary artifacts</see></indexterm><indexterm id="I_indexterm2_d1e1881" significance="normal"><primary>archives of binary artifacts</primary></indexterm><indexterm id="I_indexterm2_d1e1884" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary></indexterm> thing you often want to do is to archive your build
    results. Jenkins can store a copy of the binary artifacts generated by
    your build, allowing you to download the binaries produced by a build
    directly from the build results page. It will also post the latest binary
    artifacts on the project home page, which is a convenient way to
    distribute the latest and greatest version of your application. You can
    activate this option by ticking the “Archive the artifacts” checkbox and
    indicating which binary artifacts you want Jenkins to archive. In <xref linkend="fig-new-job-test-reports"/>, for example, we have configured
    Jenkins to store all of the JAR files generated by this <indexterm id="I_indexterm2_d1e1892" class="endofrange" startref="ch02-jobcreate" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e1894" class="endofrange" startref="ch02-stepadd" significance="normal"><primary/></indexterm>build job.</para>
    <figure float="0" id="fig-new-job-test-reports">
      <title>Configuring JUnit test reports and artifact archiving</title>
      <mediaobject id="I_mediaobject2_d1e1900">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0218.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0218.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Now we’re done—just click on the Save button at the bottom of the
    screen. Our build job <indexterm id="I_indexterm2_d1e1907" class="endofrange" startref="ch02-freecreate" significance="normal"><primary/></indexterm>should now be ready to run. So let’s see it in
    action!</para>
  </sect1>
  <sect1 id="sect-first-steps-first-job-in-action">
    <title>Your First Build Job in Action</title>
    <para>Once you save your new build job, Jenkins will display the home page
    for this job (see <xref linkend="fig-new-job-running"/>). This is where
    Jenkins displays details about the latest build results and the build
    history.</para>
    <para>If <indexterm id="I_indexterm2_d1e1919" significance="normal"><primary>build jobs</primary><secondary>status of, while running</secondary></indexterm>you wait a minute or so, the build should kick off
    automatically—you can see the stripy progress bar in the Build History
    section in the bottom left hand corner of <xref linkend="fig-new-job-running"/>. Or, <indexterm id="I_indexterm2_d1e1927" significance="normal"><primary>build jobs</primary><secondary>triggering manually</secondary></indexterm><indexterm id="I_indexterm2_d1e1932" significance="normal"><primary>build triggers</primary><secondary>manual</secondary></indexterm>if you are impatient, you can also trigger the build
    manually using the Build Now button.</para>
    <figure float="0" id="fig-new-job-running">
      <title>Your first build job running</title>
      <mediaobject id="I_mediaobject2_d1e1941">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0219.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0219.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The<indexterm id="I_indexterm2_d1e1948" significance="normal"><primary>build history</primary><secondary>results summary for</secondary></indexterm><indexterm id="I_indexterm2_d1e1953" significance="normal"><primary>build jobs</primary><secondary>history of</secondary><see>build history</see></indexterm> build will also now figure proudly on your Jenkins server’s
    home page (see <xref linkend="fig-hudson-dashboard"/>). This page shows a
    summary of all of your build jobs, including the current build status and
    general state of heath of each of your builds. It tells you when each
    build ran successfully for the last time, and when it last failed, and
    also the result of the last build.</para>
    <para>Once of Jenkins’s specialities is the way it lets you get an idea of
    build behavior over time. For example, Jenkins uses a weather metaphor to
    help give you an idea of the stability of your builds. Essentially, the
    more your builds fail, the worse the weather gets. This helps you get an
    idea of whether a particular broken build is an isolated event, or if the
    build is breaking on a regular basis, in which case it might need some
    special attention.</para>
    <para>You can also manually<indexterm id="I_indexterm2_d1e1967" significance="normal"><primary>build jobs</primary><secondary>triggering manually</secondary></indexterm><indexterm id="I_indexterm2_d1e1972" significance="normal"><primary>build triggers</primary><secondary>manual</secondary></indexterm> trigger a build job here, using the build schedule button
    (that’s the one that looks a bit like a green play button on top of a
    clock).</para>
    <figure float="0" id="fig-hudson-dashboard">
      <title>The Jenkins dashboard</title>
      <mediaobject id="I_mediaobject2_d1e1981">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0220.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0220.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>When<indexterm id="I_indexterm2_d1e1988" significance="normal"><primary>build jobs</primary><secondary>success of, indicator for</secondary></indexterm> the build finishes, the ball in the Build History box
    becomes solid blue. This means the build was a success. Build <indexterm id="I_indexterm2_d1e1994" significance="normal"><primary>build jobs</primary><secondary>failed</secondary><tertiary>indicator for</tertiary></indexterm>failures are generally indicated by a red ball. For some
    types of project, you can also distinguish between a build error (such as
    a compiler error), indicated by a red ball, and other sorts of build
    failures, such as unit test failures or insufficient code coverage, which
    are indicated by a yellow ball. There are also some other details about
    the latest test results, when the last build was run, and so on. But
    before we look at the details, let’s get back to the core business model
    of a Continuous Integration server—kicking off builds when someone changes
    the code!</para>
    <para>We<indexterm class="startofrange" id="ch02-failure" significance="normal"><primary>build jobs</primary><secondary>failed</secondary><tertiary>example of</tertiary></indexterm> are going to commit a code change to GitHub and see what
    happens, using the source code we checked out in <xref linkend="sect-git-fork"/>. We now have Jenkins configured to monitor our
    GitHub fork, so if we make any changes, Jenkins should be able to pick
    them up.</para>
    <para>So let’s make a change. The idea is to introduce a code change that
    will cause the unit tests to fail. If your Java is a bit rusty, don’t
    worry, you won’t need to know any Java to be able to break the build—just
    follow the instructions!</para>
    <para>Now in normal development, you would first modify the unit test that
    describes this behaviour. Then you would verify that the test fails with
    the existing code, and implement the code to ensure that the test passes.
    <emphasis>Then</emphasis> you would commit your changes to your version
    control system, allowing Jenkins to build them. However this would be a
    poor demonstration of how Jenkins handles unit test failures. So in this
    example, we will, against all best practices, simply modify the
    application code directly.</para>
    <para>First of all, open the <filename moreinfo="none">Cell.java</filename> file, which you will find in the
    <filename moreinfo="none">gameoflife-core/src/main/java/com/wakaleo/gameoflife/domain</filename>
    directory. Open this file in your favorite text editor. You should see
    something like this:</para>
    <programlisting id="I_programlisting2_d1e2030" format="linespecific">package com.wakaleo.gameoflife.domain;

public enum Cell {
    LIVE_CELL("*"), DEAD_CELL(".");

    private String symbol;

    private Cell(String symbol) {
        this.symbol = symbol;
    }

    @Override
    public String toString() {
        return symbol;
    }

    static Cell fromSymbol(String symbol) {
        Cell cellRepresentedBySymbol = null;
        for (Cell cell : Cell.values()) {
            if (cell.symbol.equals(symbol)) {
                cellRepresentedBySymbol = cell;
                break;
            }
        }
        return cellRepresentedBySymbol;
    }

    public String getSymbol() {
        return symbol;
    }
}</programlisting>
    <para>The application can print the state of the grid as a text array.
    Currently, the application prints our live cells as an asterisk
    (<literal moreinfo="none">*</literal>), and dead cells appear as a minus character
    (<literal moreinfo="none">–</literal>). So a five-by-five grid containing a single living
    cell in the center would look like this:</para>
    <screen format="linespecific">-----
--*--
-----</screen>
    <para>Now users have asked for a change to the application—they want
    pluses (<literal moreinfo="none">+</literal>) instead of stars! So we are going to make a
    slight change to the <code>Cell</code> class method, and rewrite it as
    follows (the modifications are in <userinput moreinfo="none">bold</userinput>):</para>
    <programlisting id="I_programlisting2_d1e2053" format="linespecific">package com.wakaleo.gameoflife.domain;

public enum Cell {
    <userinput moreinfo="none">LIVE_CELL("+")</userinput>, DEAD_CELL(".");

    private String symbol;

    private Cell(String symbol) {
        this.symbol = symbol;
    }

    @Override
    public String toString() {
        return symbol;
    }

    static Cell fromSymbol(String symbol) {
        Cell cellRepresentedBySymbol = null;
        for (Cell cell : Cell.values()) {
            if (cell.symbol.equals(symbol)) {
                cellRepresentedBySymbol = cell;
                break;
            }
        }
        return cellRepresentedBySymbol;
    }

    public String getSymbol() {
        return symbol;
    }
}</programlisting>
    <para>Save this change, and then commit them to the local Git repository
    by running <literal moreinfo="none">git commit</literal>:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">git commit -a -m "Changes stars to pluses"</userinput>
[master 61ce946] Changes stars to pluses
 1 files changed, 1 insertions(+), 1 deletions(-)</screen>
    <para>This will commit the changes locally, but since Git is a distributed
    repository, you now have to push these changes through to your fork on
    GitHub. You do this by running <literal moreinfo="none">git push</literal>:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">git push</userinput>
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (11/11), 754 bytes, done.
Total 11 (delta 4), reused 0 (delta 0)
To git@github.com:john-smart/game-of-life.git
   7882d5c..61ce946  master -&gt; master</screen>
    <para>Now go back to the Jenkins web page. After a minute or so, a new
    build should kick off, and fail. In fact, there are several other places
    which are affected by this change, and the regression tests related to
    these features are now failing. On the build job home page, you will see a
    second build in the <indexterm id="I_indexterm2_d1e2081" significance="normal"><primary>build jobs</primary><secondary>failed</secondary><tertiary>indicator for</tertiary></indexterm>build history with an ominous red ball (see <xref linkend="fig-new-job-failed"/>)—this tells you that the latest build has
    failed.</para>
    <para>You <indexterm id="I_indexterm2_d1e2093" significance="normal"><primary>build history</primary><secondary>results summary for</secondary></indexterm>might also notice some clouds next to the Build History
    title—this is the same “weather” icon that we saw on the home page, and
    serves the same purpose—to give you a general idea of how stable your
    build is over time.</para>
    <figure float="none" id="fig-new-job-failed">
      <title>A failed build</title>
      <mediaobject id="I_mediaobject2_d1e2102">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0221.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0221.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>If <indexterm class="startofrange" id="ch02-details" significance="normal"><primary>build history</primary><secondary>details regarding</secondary></indexterm><indexterm class="startofrange" id="ch02-details2" significance="normal"><primary>reporting</primary><secondary>test results</secondary></indexterm><indexterm class="startofrange" id="ch02-details3" significance="normal"><primary>tests</primary><secondary>reports from</secondary></indexterm>you click on the new build history entry, Jenkins will give
    you some more details about what went wrong (see <xref linkend="fig-new-job-failure-details"/>). Jenkins tells us that there
    were 11 new test failures in this build, something which can be seen at a
    glance in the <indexterm id="I_indexterm2_d1e2127" significance="normal"><primary>Test Result Trend graph</primary></indexterm>Test Result Trend graph—red indicates test failures. You can
    even see which tests are failing, and how long they have been
    broken.</para>
    <figure float="none" id="fig-new-job-failure-details">
      <title>The list of all the broken tests</title>
      <mediaobject id="I_mediaobject2_d1e2134">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0222.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0222.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>If you want to know exactly what went wrong, that’s easy enough to
    figure out as well. If you click on the failed test classes, Jenkins
    brings up the actual details of the test failures (see <xref linkend="fig-hudson-new-job-test-failure-details"/>), which is a great
    help when it comes to reproducing and fixing the issue.</para>
    <figure float="none" id="fig-hudson-new-job-test-failure-details">
      <title>Details about a failed test</title>
      <mediaobject id="I_mediaobject2_d1e2146">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0223.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0223.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <?dbfo-need height=”1in”?>
    <para>Jenkins displays a host of information about the failed test in a
    very readable form, including the error message the test produced, the
    stack trace, how long the test has been broken, and how long it took to
    run. Often, this in itself is enough to put a developer on the right track
    towards<indexterm id="I_indexterm2_d1e2154" class="endofrange" startref="ch02-failure" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e2156" class="endofrange" startref="ch02-details" significance="normal"><primary/></indexterm> fixing<indexterm id="I_indexterm2_d1e2159" class="endofrange" startref="ch02-details2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e2161" class="endofrange" startref="ch02-details3" significance="normal"><primary/></indexterm> the issue.</para>
    <para>Now let’s fix the build. To make things simple, we’ll just back out
    our changes and recommit the code in its original state (the end users
    just changed their mind about the asterisks, anyway). So just undo the
    changes you made to the <literal moreinfo="none">Cell</literal> class (again, the changes
    are highlighted in <userinput moreinfo="none">bold</userinput>):</para>
    <programlisting id="I_programlisting2_d1e2172" format="linespecific">package com.wakaleo.gameoflife.domain;

public enum Cell {
    <userinput moreinfo="none">LIVE_CELL("*")</userinput>, DEAD_CELL(".");

    private String symbol;

    private Cell(String symbol) {
        this.symbol = symbol;
    }

    @Override
    public String toString() {
        return symbol;
    }

    static Cell fromSymbol(String symbol) {
        Cell cellRepresentedBySymbol = null;
        for (Cell cell : Cell.values()) {
            if (cell.symbol.equals(symbol)) {
                cellRepresentedBySymbol = cell;
                break;
            }
        }
        return cellRepresentedBySymbol;
    }

    public String getSymbol() {
        return symbol;
    }
}</programlisting>
    <para>When you’ve done this, commit your changes again:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">git commit -a -m "Restored the star"</userinput>
[master bc924be] Restored the star
 1 files changed, 1 insertions(+), 1 deletions(-)
$ <userinput moreinfo="none">git push</userinput>
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (11/11), 752 bytes, done.
Total 11 (delta 4), reused 6 (delta 0)
To git@github.com:john-smart/game-of-life.git
   61ce946..bc924be  master -&gt; master</screen>
    <para>Once you’ve committed these changes, Jenkins should pick them up and
    kick off a build. Once this is done, you will be able to see the fruit of
    your work on the build job home page (see <xref linkend="fig-new-job-fixed-build"/>)—the build status is blue again and
    all is well. Also notice the way we are building up a trend graph showing
    the number of succeeding unit tests over time—this sort of report really
    is one of Jenkins’s strong points.</para>
    <figure float="none" id="fig-new-job-fixed-build">
      <title>Now the build is back to normal</title>
      <mediaobject id="I_mediaobject2_d1e2195">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0224.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0224.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-first-steps-javadocs">
    <title>More Reporting—Displaying Javadocs</title>
    <para><indexterm class="startofrange" id="ch02-javadoc" significance="normal"><primary>Javadocs</primary></indexterm><indexterm id="I_indexterm2_d1e2207" significance="normal"><primary>build jobs</primary><secondary>steps in, adding</secondary></indexterm><indexterm class="startofrange" id="ch02-javadoc2" significance="normal"><primary>build jobs</primary><secondary>Javadocs generation in</secondary></indexterm><indexterm id="I_indexterm2_d1e2217" significance="normal"><primary>documentation</primary><see>Javadocs</see></indexterm><indexterm class="startofrange" id="ch02-javadoc3" significance="normal"><primary>reporting</primary><secondary>Javadocs API documentation</secondary></indexterm>For many Java projects, Javadoc comments are an important
    source of low-level technical documentation. There are even tools, such as
    UmlGraph, that let you produce Javadoc with embedded UML diagrams to give
    you a better picture of how the classes fit together in the application.
    This sort of technical documentation has the advantage of being cheap to
    produce, accurate and always up-to-date.</para>
    <para>Jenkins can integrate Javadoc API documentation directly into the
    Jenkins website. This way, everyone can find the latest Javadoc easily, in
    a well known place. Often, this sort of task is performed in a separate
    build job, but for simplicity we are going to add another build step to
    the <emphasis>gameoflife-default</emphasis> build job to generate and
    display Javadoc documention for the Game of Life API.</para>
    <para>Start off by going into the “gameoflife-default” configuration
    screen again. Click on “Add build step”, and add a new build step to
    “Invoke top level Maven targets” (see <xref linkend="fig-hudson-freestyle-javadoc-build-step"/>). In the Goals field,
    place <literal moreinfo="none">javadoc:javadoc</literal>—this will tell Maven to generate
    the Javadoc documentation.</para>
    <figure float="0" id="fig-hudson-freestyle-javadoc-build-step">
      <title>Adding a new build step and report to generate Javadoc</title>
      <mediaobject id="I_mediaobject2_d1e2243">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0225.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0225.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Now go to the “Post-build Action” and tick the “Publish Javadoc”
    checkbox. This project is a multimodule project, so a separate
    subdirectory is generated for each module (core, services, web and so
    forth). For this example, we are interested in <phrase role="keep-together">displaying</phrase> the documentation for the core
    module. In the Javadoc directory field, enter
    <userinput moreinfo="none">gameoflife-core/target/site/apidocs</userinput>—this is where
    Maven will place the Javadocs it generates for the core module. Jenkins
    may display an error message saying that this directory doesn’t exist at
    first. Jenkins is correct—this directory won’t exist until we run the
    <literal moreinfo="none">javadoc:javadoc</literal> goal, but since we haven’t run this
    command yet we can safely ignore the message at this stage.</para>
    <para>If you tick “Retain Javadoc for each successful build”, Jenkins will
    also keep track of the Javadocs for previous builds—not always useful, but
    it can come in handy at times.</para>
    <para>Now trigger a build manually. You can do this either from the build
    job’s home page (using the Build Now link), or directly from the server
    home page. Once the build is finished, open the build job summary page.
    You should now see a Javadoc link featuring prominently on the screen—this
    link will open the latest version of the Javadoc documentation (see <xref linkend="fig-hudson-javadoc-results"/>). You will also see this link on
    the build details page, where it will point to the Javadoc for that
    particular build, if you have asked Jenkins to store Javadoc for
    <indexterm id="I_indexterm2_d1e2265" class="endofrange" startref="ch02-javadoc" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e2267" class="endofrange" startref="ch02-javadoc2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e2269" class="endofrange" startref="ch02-javadoc3" significance="normal"><primary/></indexterm>each build.</para>
    <figure float="0" id="fig-hudson-javadoc-results">
      <title>Jenkins will add a Javadoc link to your build results</title>
      <mediaobject id="I_mediaobject2_d1e2275">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0226.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0226.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-first-steps-metrics">
    <title>Adding Code Coverage and Other Metrics</title>
    <para><indexterm class="startofrange" id="ch02-coberta1" significance="normal"><primary>code coverage metrics</primary><secondary sortas="Cobertura">with Cobertura</secondary></indexterm><indexterm class="startofrange" id="ch02-coberta2" significance="normal"><primary>Cobertura</primary></indexterm><indexterm class="startofrange" id="ch02-coberta4" significance="normal"><primary>reporting</primary><secondary>code coverage metrics</secondary></indexterm><indexterm id="I_indexterm2_d1e2297" significance="normal"><primary>build jobs</primary><secondary>code coverage metrics in</secondary><see>code coverage metrics</see></indexterm>As we mentioned earlier, reporting is one of Jenkins’s
    strong points. We have seen how easy it is to display test results and to
    publish Javadocs, but you can also publish a large number of other very
    useful reports using Jenkins’s plugins.</para>
    <para>Plugins<indexterm class="startofrange" id="ch02-plugin" significance="normal"><primary>plugins</primary><secondary>installing</secondary></indexterm><indexterm id="I_indexterm2_d1e2312" significance="normal"><primary>installation</primary><secondary>plugins</secondary></indexterm><indexterm id="I_indexterm2_d1e2317" significance="normal"><primary>installation</primary><secondary>plugins</secondary><seealso>specific plugins</seealso></indexterm> are another one of Jenkins’s selling points—there are
    plugins for doing just about anything, from integrating new build tools or
    version control systems to <phrase role="keep-together">notification</phrase> mechanisms and reporting. In
    addition, Jenkins plugins are very easy to install and integrate smoothly
    into the existing Jenkins architecture.</para>
    <para>To see how the plugins work, we are going to integrate code coverage
    metrics using the Cobertura plugin. Code coverage is an indication of how
    much of your application code is actually executed during your tests—it
    can be a useful tool in particular for finding areas of code that have not
    been tested by your test suites. It can also give some indication as to
    how well a team is applying good testing practices such as Test-Driven
    Development or Behavior-Driven Development.</para>
    <para><ulink url="http://cobertura.sourceforge.net">Cobertura</ulink> is
    an open source code coverage tool that works well with both Maven and
    Jenkins. Our Maven demonstration project is already configured to record
    code coverage metrics, so all we need to do is to install the Jenkins
    Cobertura plugin and generate the code coverage metrics for Jenkins to
    record and display.</para>
    <figure float="0" id="fig-hudson-plugin-manager">
      <title>Jenkins has a large range of plugins available</title>
      <mediaobject id="I_mediaobject2_d1e2337">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0227.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0227.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>To install a new plugin, go to the Manage Jenkins page and click on
    the Manage Plugins entry. This will display a list of the available
    plugins as well as the plugins already installed on your server (see <xref linkend="fig-hudson-plugin-manager"/>). If your build server doesn’t have
    an Internet connection, you can also manually install a plugin by
    downloading the plugin file elsewhere and uploading it to your Jenkins
    installation (just open the Advanced tab in <xref linkend="fig-hudson-plugin-manager"/>), or by copying the plugin to the
    <filename moreinfo="none">$JENKINS_HOME/plugins</filename>
    directory.</para>
    <para>In our case, we are interested in the Cobertura plugin, so go to the
    Available tab and scroll down until you find the Cobertura Plugin entry in
    the Build Reports section. Click on the checkbox and then click on the
    Install button at the bottom of the screen.</para>
    <para>This will download and install the plugin for you. Once it is done,
    you will need to restart your Jenkins instance to see the fruits of your
    labor. When you have restarted Jenkins, go back to the Manage Plugins
    screen and click on the Installed tab—there should now be a Cobertura
    Plugin entry in the list of installed plugins on this<indexterm id="I_indexterm2_d1e2355" class="endofrange" startref="ch02-plugin" significance="normal"><primary/></indexterm> page.</para>
    <para>Once you have made sure the plugin was successfully installed, go to
    the configuration page for the <command moreinfo="none">gameoflife-default</command> build
    job.</para>
    <para>To <indexterm id="I_indexterm2_d1e2365" significance="normal"><primary>build jobs</primary><secondary>steps in, adding</secondary></indexterm>set up code coverage metrics in our project, we need to do
    two things. First we need to generate the Cobertura coverage data in an
    XML form that Jenkins can use; then we need to configure Jenkins to
    display the coverage reports.</para>
    <para>Our Game of Life project already has been configured to generate XML
    code coverage reports if we ask it. All you need to do is to run
    <literal moreinfo="none">mvn cobertura:cobertura</literal> to generate the reports in XML
    form. Cobertura can also generate HTML reports, but in our case we will be
    letting Jenkins take care of the reporting, so we can save on build time
    by not generating the For this example, for simplicity, we will just add
    the <literal moreinfo="none">cobertura:cobertura</literal> goal to the second build step
    (see <xref linkend="fig-hudson-cobertura-build-step"/>). You could also
    add a new build step just for the code coverage metrics. In a real-world
    project, code quality metrics like this are typically placed in a distinct
    build job, which is run less frequently than the default build.</para>
    <figure float="0" id="fig-hudson-cobertura-build-step">
      <title>Adding another Maven goal to generating test coverage
      metrics</title>
      <mediaobject id="I_mediaobject2_d1e2385">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0228.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0228.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Next, we need to tell Jenkins to keep track of our code coverage
    metrics. Scroll down to the “Post-build Actions” section. You should see a
    new checkbox labeled Publish Cobertura Reports. Jenkins will often add UI
    elements like this when you install a new plugin. When you tick this box,
    Jenkins will display the configuration options for the Cobertura plugin
    that we installed earlier (see <xref linkend="fig-hudson-cobertura-config"/>).</para>
    <para>Like most of the code-quality related plugins in Jenkins, the
    Cobertura plugin lets you fine-tune not only the way Jenkins displays the
    report data, but also how it interprets the data. In the Coverage Metrics
    Targets section, you can define what you consider to be the minimum
    acceptable levels of code coverage. In <xref linkend="fig-hudson-cobertura-config"/>, we have configured<indexterm id="I_indexterm2_d1e2398" significance="normal"><primary>unstable builds</primary><secondary>indicator for</secondary></indexterm><indexterm id="I_indexterm2_d1e2403" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>indicator for</tertiary></indexterm> Jenkins to list any builds with less than 50% test coverage
    as “unstable” (indicated by a yellow ball), and notify the team
    accordingly.</para>
    <figure float="0" id="fig-hudson-cobertura-config">
      <title>Configuring the test coverage metrics in Jenkins</title>
      <mediaobject id="I_mediaobject2_d1e2414">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0229.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0229.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This fine-tuning often comes in handy in real-world builds. For
    example, you may want to impose a special code coverage constraint in
    release builds, to ensure high code coverage in release versions. Another
    strategy that can be useful for legacy projects is to gradually increase
    the minimum tolerated code coverage level over time. This way you can
    avoid having to retro-fit unit tests on legacy code just to raise the code
    coverage, but you do encourage all new code and bug fixes to be well
    tested.</para>
    <para>Now trigger a build manually. The first time you run the build job
    with Cobertura reporting activated, you will see coverage statistics for
    your build displayed on the build home page, along with a Coverage Report
    link when you can go for more details (see <xref linkend="fig-hudson-initial-coverage-report"/>). The Cobertura report
    shows different types of code coverage for the build we just ran. Since we
    have only run the test coverage metrics once, the coverage will be
    displayed as red and green bars.</para>
    <figure float="none" id="fig-hudson-initial-coverage-report">
      <title>Jenkins displays code coverage metrics on the build home
      page</title>
      <mediaobject id="I_mediaobject2_d1e2428">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0230.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0230.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>If you click on the Coverage Report icon, you will see code coverage
    for each package in your application, and even drill down to see the code
    coverage (or lack thereof) for an individual class (see <xref linkend="fig-hudson-code-coverage-class"/>). When you get to this level,
    Jenkins displays both the overall coverage statistics for the class, and
    also highlights the lines that were executed in green, and those that
    weren’t in red.</para>
    <para>This reporting gets better with time. Jenkins not only reports
    metrics data for the latest build, but also keeps track of metrics over
    time, so that you can see how they evolve throughout the life of the
    project.</para>
    <para>For example, if you drill down into the coverage reports, you will
    notice that certain parts of this code are not<indexterm id="I_indexterm2_d1e2441" class="endofrange" startref="ch02-game" significance="normal"><primary/></indexterm> tested (for example the <literal moreinfo="none">Cell.java</literal> class
    in <xref linkend="fig-hudson-code-coverage-class"/>).</para>
    <figure float="0" id="fig-hudson-code-coverage-class">
      <title>Jenkins lets you display code coverage metrics for packages and
      classes</title>
      <mediaobject id="I_mediaobject2_d1e2453">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0231.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0231.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Code coverage metrics are a great way to isolate code that has not
    been tested, in order to add extra tests for corner cases that were not
    properly tested during the initial development, for example. The Jenkins
    code coverage graphs are also a great way of keeping track of your code
    coverage metrics as the project grows. Indeed, as you add new tests, you
    will notice that Jenkins will display a graph of code coverage over time,
    not just the latest results (see <xref linkend="fig-hudson-code-coverage-graph"/>).</para>
    <figure float="0" id="fig-hudson-code-coverage-graph">
      <title>Jenkins also displays a graph of code coverage over time</title>
      <mediaobject id="I_mediaobject2_d1e2465">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0232.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0232.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Note that our objective here is not to improve the code coverage
    just for the sake of improving code coverage—we are adding an extra test
    to verify some code that was not previously tested, and as a result the
    code coverage goes up. There is a subtle but important difference
    here—code coverage, as with any other metric, is very much a means to an
    end (high code quality and low maintenance costs), and not an end in
    itself.</para>
    <para>Nevertheless, <indexterm id="I_indexterm2_d1e2474" class="endofrange" startref="ch02-coberta1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e2476" class="endofrange" startref="ch02-coberta2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm2_d1e2478" class="endofrange" startref="ch02-coberta4" significance="normal"><primary/></indexterm>metrics like this can give you a great insight into the
    health of your project, and Jenkins presents them in a particularly
    accessible way.</para>
    <para>This is just one of the code quality metrics plugins that have been
    written for Jenkins. There are many more (over fifty reporting plugins
    alone at the time of writing). We’ll look at some more of them in <xref linkend="chapter-code-quality"/>.</para>
  </sect1>
  <sect1 id="I_sect12_d1e2485">
    <title id="sect-first-steps-conclusion">Conclusion</title>
    <para>In this chapter, we have gone through what you need to know to get
    started with Jenkins. You should be able to set up a new build job, and
    setting up reporting on JUnit test results and javadocs. And you have seen
    how to add a reporting plugin and keep tabs on code coverage. Well done!
    But there’s still a lot more to learn about Jenkins—in the following
    chapters, we will be looking at how Jenkins can help you improve your
    build automation process in many other areas as well.</para>
  </sect1>
</chapter>
