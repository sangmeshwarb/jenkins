<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-maintaining-jenkins">
	<title>Maintenir Jenkins</title>
	<sect1 id="sect-maint-introduction">
		<title>Introduction</title>
		<para>
			<indexterm class="startofrange" id="ch13-maint"
				significance="normal">
				<primary>maintenance</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-maint2"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance de</secondary>
			</indexterm>
			Dans ce chapitre, nous allons discuter de quelques trucs et astuces que
			vous pourriez trouver utile lors de la maintenance d'une instance
			Jenkins conséquente. Nous regarderons des choses comme limiter et
			surveiller l'espace disque, comment donner assez de mémoire à Jenkins
			et comment archiver les tâches de build ou les migrer d'un serveur à un
			autre. Certains de ces sujets sont abordés ailleurs dans le livre,
			mais ici nous allons regarder ces éléments du point de vue d'un
			administrateur système.
		</para>
	</sect1>
	<sect1 id="sect-maint-disk-space">
		<title>Surveillance de l'espace disque</title>
		<para>
			L'historique des builds
			<indexterm class="startofrange" id="ch13-monitor1"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance de</secondary>
				<tertiary>Surveillance de l'espace disque</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-monitor2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>Surveillance de l'espace disque</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-monitor3"
				significance="normal">
				<primary>espace disque</primary>
				<secondary>surveillance</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-monitor4"
				significance="normal">
				<primary>historique des builds</primary>
				<secondary>utilisation disque de</secondary>
			</indexterm>
			prend de l'espace disque. De plus, Jenkins analyse les builds
			précédents lorsqu'il charge la configuration d'un projet. Ainsi, le
			chargement d'une tâche avec un millier de builds archivés prendra bien
			plus de temps qu'une tâche n'en n'ayant que 50. Si vous avez un gros
			serveur Jenkins avec des dizaines ou des milliers de tâches, le temps
			total est proportionellement multiplié.
		</para>
		<para>
			La façon la plus simple de plafonner l'utilisation de l'espace disque
			est probablement de limiter le nombre de builds qu'un projet conserve
			dans son historique. Cela se configure en cochant la case "Supprimer
			les anciens builds" en haut de la page de configuration d'un projet
			(voir
			<xref linkend="fig-maintenance-discard-old-builds" />
			). Si vous dites à Jenkins de ne garder que les 20 derniers builds,
			il commencera à effacer les plus vieux builds une fois ce nombre
			atteint. Vous pouvez limiter le nombre d'anciens builds conservés par
			un nombre de builds ou par date (par exemple les builds de moins de
			30 jours). Jenkins fait cela intelligemment: il gardera toujours le
			dernier build réussi au sein de son historique, ainsi vous ne perdrez
			jamais votre dernier build réussi.
		</para>
		<figure float="0" id="fig-maintenance-discard-old-builds">
			<title>Suppression des anciens builds</title>
			<mediaobject id="I_mediaobject13_d1e17727">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1301.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1301.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Le problème avec la suppresion des anciens builds est que vous
			perdez l'historique des builds par la même occasion. Pourtant,
			Jenkins utilise cet historique pour réaliser différents graphiques
			sur les résultats des tests et les métriques de build. Limiter le
			nombre de build conservé à 20, par exemple, implique que Jenkins
			affichera des graphiques contenant seulement 20 points. Cela peut
			être un peu limité. Cette sorte d'information peut être très utile
			aux développeurs. Il est souvent intéressant de pouvoir afficher
			l'évolution des métriques sur l'ensemble de la vie du projet, et pas
			seulement sur les 2 dernières semaines.
		</para>
		<para>
			Heuresement, Jenkins a un mécanisme à même de rendre les développeurs
			et les administraturs systèmes heureux. En général, les éléments
			prenant le plus de place sont les artefacts de build : fichiers JAR,
			WAR et ainsi de suite. L'historique de build en elle-même est
			principalement constituée de fichiers de log XML, qui ne prennent pas trop de
			place. Si vous cliquez sur le button "Avancé...", Jenkins vous
			offre
			la possibilité de supprimer les artefacts mais pas les données
			du
			build. Dans
			<xref linkend="fig-maintenance-discard-old-builds-advanced" />
			, par exemple, nous avons configuré Jenkins pour qu'il garde les
			artefacts 7 jours au maximum. Cette option est vraiment pratique si
			vous avez besoin de limiter l'utilisation du disque tout en désirant
			fournir l'ensemble des métriques pour les équipes de développement.
		</para>
		<figure float="none" id="fig-maintenance-discard-old-builds-advanced">
			<title>Supprimer les anciens builds — options avancées</title>
			<mediaobject id="I_mediaobject13_d1e17741">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1302.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1302.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>N'hésitez pas à être drastique, en gardant un nombre maximal
			d'artefact assez faible. Souvenez vous que Jenkins gardera toujours
			le dernier build stable et le dernier réussi, quelque soit sa
			configuration. Ainsi, vous aurez toujours au moins le dernier build
			réussi (à moins bien sûr qu'il n'y ait pas encore eu de build
			réussi). Jenkins offre également de marquer un build particulier à
			"Conserver ce build sans limite de temps", afin que certains builds
			importants ne puissent être supprimés automatiquement.
		</para>
		<sect2>
			<title>Utiliser le plugin "Disk Usage"</title>
			<para>
				Le plugin Disk Usage
				<indexterm class="startofrange" id="ch13-usage1"
					significance="normal">
					<primary>plugins</primary>
					<secondary>Disk Usage</secondary>
				</indexterm>
				<indexterm class="startofrange" id="ch13-usage2"
					significance="normal">
					<primary>plugin Disk Usage</primary>
				</indexterm>
				est un des plus utiles pour un administrateur Jenkins. Ce plugin
				conserve et reporte l'espace disque utilisé par vos projets. Il vous
				permet de repérer et corriger les projets qui utilisent trop
				d'espace.
			</para>
			<para>
				Vous pouvez installer le plugin Disk Usage de la façon habituelle,
				depuis l'écran "Gestion des plugins". Après installation du plugin
				et redémarrage de Jenkins, le plugin Disk Usage enregistre la
				quantité d'espace disque utilisée par chaque projet. Il ajoute
				également un lien "Disk usage" sur la page "Administrer Jenkins". Ce
				lien vous permet d'afficher la quantité totale d'espace utilisé par
				vos projets (voir
				<xref linkend="fig-maintenance-disk-usage" />
				).
			</para>
			<figure float="none" id="fig-maintenance-disk-usage">
				<title>Voir l'utilisation d'espace disque</title>
				<mediaobject id="I_mediaobject13_d1e17769">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1303.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1303.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>La liste est triée par utilisation totale d'espace disque,
				ainsi les projets utilisant le plus d'espace apparaissent en haut. La
				liste fournit deux valeurs par projet. La colonne "Builds" indique
				l'espace disque total utilisé par l'historique des builds, tandis
				que la colonne "Workspace" est l'espace disque utilisé pour
				construire le projet. Pour les projets en cours, l'espace utilisé
				par l'espace de travail tend à être relativement stable, tandis que
				la valeur pour l'historique des builds croit au cours du temps,
				parfois à une vitesse excessivement rapide, à moins que vous ne
				fassiez quelque chose. Vous pouvez garder sous contrôle l'espace
				disque utilisé par l'historique d'un projet en limitant le nombre de
				builds conservés et en faisant attention à quels artefacts sont
				conservés.
			</para>
			<para>
				Pour se faire une idée sur la vitesse à laquelle l'espace disque est
				utilisé, vous pouvez aussi afficher l'espace disque utilisé par
				chaque projet au cours du temps. Pour faire cela, vous devez
				configurer le plugin sur la page "Configurer le système" (voir
				<xref linkend="fig-maintenance-disk-usage-project" />
				).
			</para>
			<figure float="0" id="fig-maintenance-disk-usage-project">
				<title>Affichage de l'utilisation disque d'un projet</title>
				<mediaobject id="I_mediaobject13_d1e17783">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1304.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1304.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Cela va enregistrer et afficher combien d'espace disque vos projets
				consomment au cours du temps. Le plugin "Disk Usage" affiche un
				graphique de l'utlisation du disque au cours du temps (voir
				<xref linkend="fig-maintenance-project-disk-usage" />
				) qui donne un bon aperçu de la vitesse à laquelle votre projet
				consomme l'espace disque, ou au contraire si l'espace utilisé est
				stable au cours
				<indexterm id="I_indexterm13_d1e17792" class="endofrange"
					startref="ch13-usage1" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17794" class="endofrange"
					startref="ch13-usage2" significance="normal">
					<primary />
				</indexterm>
				du temps.
			</para>
			<figure float="none" id="fig-maintenance-project-disk-usage">
				<title>Affichage de l'espace disque d'un projet au cours du temps
				</title>
				<mediaobject id="I_mediaobject13_d1e17800">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1305.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1305.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
		</sect2>
		<sect2>
			<title>Disk Usage et les projets Jenkins de type Apache Maven</title>
			<para>
				Si vous
				<indexterm class="startofrange" id="ch13-musage"
					significance="normal">
					<primary>tâches de build Maven</primary>
					<secondary>utilisation du disque des</secondary>
				</indexterm>
				utilisez les tâches de build Maven, il y a des détails
				supplémentaires que vous devriez connaître. Dans Jenkins, les tâches de build
				Maven archivent automatiquement, par défaut, les artefacts du
				build. Cela peut être différent de vos attentes.
			</para>
			<para>Le problème est que ces artefacts SNAPSHOT prennent de la
				place, beaucoup même. Sur un projet actif, Jenkins est susceptible
				de réaliser plusieurs builds par heure. Stocker de façon permanente
				chacun des fichiers JAR générés pour chaque build peut être vraiment
				couteux. Le problème s'amplifie si vous avez des projets
				multimodules. En effet, Jenkins archive les artefacts générés pour
				chaque module.
			</para>
			<para>En fait, si vous avez besoin d'archiver vos artefacts SNAPSHOT
				Maven, il est probablement plus avisé de les déployer directement
				dans votre gestionnaire de dépôt local. Nexus Pro, par exemple,
				peut être configuré pour faire cela. Artifactory peut être configuré
				pour supprimer les vieux artefacts SNAPSHOT.
			</para>
			<para>
				Heuresement, vous pouvez configurer Jenkins pour réaliser cela.
				Allez dans la section "Buid" de l'écran de configuration de votre
				tâche et cliquez sur le bouton "Avancé...". Des champs supplémentaires
				sont alors affichés, comme montré dans
				<xref linkend="fig-jenkins-maven-no-archives" />
				.
			</para>
			<figure float="none" id="fig-jenkins-maven-no-archives">
				<title>Tâches de build Maven—options avancées</title>
				<mediaobject id="I_mediaobject13_d1e17827">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1306.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1306.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Si vous cochez l'option “Désactive l'archivage automatique des artefacts”,
				Jenkins ne stockera pas les fichiers Jar généré par les builds de
				votre projet. C'est une bonne façon de rendre heureux votre
				administrateur système.
			</para>
			<para>
				Notez que parfois vous avez
				<emphasis>vraiment</emphasis>
				besoin d'archiver les artefacts Maven. Par exemple, cela s'avère
				souvent utiles quand vous implémentez un séquenceur de build 
				(voir
				<xref linkend="sect-build-pipelines" />
				). Dans ce cas, vous pouvez toujours choisir, manuellement, les 
				artefacts nécessaires, et alors utiliser l'option "Supprimer les
				anciens builds" pour définir la durée
				<indexterm id="I_indexterm13_d1e17841" class="endofrange"
					startref="ch13-musage" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17843" class="endofrange"
					startref="ch13-monitor1" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17845" class="endofrange"
					startref="ch13-monitor2" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17847" class="endofrange"
					startref="ch13-monitor3" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17849" class="endofrange"
					startref="ch13-monitor4" significance="normal">
					<primary />
				</indexterm>
				de conservation.
			</para>
		</sect2>
	</sect1>
	<sect1 id="sect-maint-server-load">
		<title>Surveiller la charge serveur</title>
		<para>
			Jenkins
			<indexterm class="startofrange" id="ch13-server1"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance de</secondary>
				<tertiary>surveiller la charge serveur</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-server2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>surveiller la charge serveur</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-server3"
				significance="normal">
				<primary>serveur de build</primary>
				<secondary>surveiller la charge du</secondary>
			</indexterm>
			inclut une surveillance des activités serveur. Sur l'écran "Administrer Jenkins", 
			cliquez sur l'icône "Statistiques d'utilisation". Cela affiche un
			graphique de la charge serveur au cours du temps pour le noeud maître
			(voir
			<xref linkend="fig-jenkins-load-statistics" />
			). Ce graphique contient trois métriques: nombre total d'exécuteurs,
			nombre d'exécuteurs occupés et longueur de la queue.
		</para>
		<para>
			Le
			<command moreinfo="none">nombre total d'exécuteurs</command>
			(la ligne bleue) inclut les exécuteurs sur les noeuds maître et
			esclaves. Ce chiffre peut varier quand les esclaves sont mis allumés
			ou éteints, et est un indicateur utile pour déterminer si la gestion
			dynamique des esclaves fonctionnent.
		</para>
		<para>
			Le
			<command moreinfo="none">nombre d'exécuteurs occupés</command>
			(la ligne rouge) indique le nombre d'exécuteurs en train de réaliser
			des buids. Vous devriez vous assurer que vous avez une capacité suffisante
			en réserve afin de supporter les pics de builds. Si tous vos
			exécuteurs sont occupés de façon permanente, vous devriez ajouter
			plus d'exécuteurs et/ou de noeuds esclaves.
		</para>
		<para>
			La
			<command moreinfo="none">longueur de la queue</command>
			(la ligne grise) est le nombre de tâches de build attendant d'être
			exécutées. Les tâches de build sont mises en attente lorsque tous les
			exécuteurs sont occupés. Cette métrique n'inclut pas les tâches en
			attente qu'un build en amont soit fini. Ainsi, elle donne une idée
			raisonnable du moment où votre serveur pourrait bénéficier de plus de
			capacités.
		</para>
		<figure float="0" id="fig-jenkins-load-statistics">
			<title>Statistiques de charge Jenkins</title>
			<mediaobject id="I_mediaobject13_d1e17895">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1307.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1307.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Vous pouvez obtenir un graphique similaire pour les noeuds
			esclaves, en utilisant le bouton "Statistiques d'utilisation" dans la page de
			détails du noeud esclave.
		</para>
		<para>
			Une autre possibilité est d'installer le plugin Monitoring. Ce
			plugin utilise JavaMelody afin de réaliser des rapports HTML
			complets sur l'état de votre serveur de build. Les rapports
			incluent la charge système et processeur, les temps moyen de réponse
			et l'utilisation de la mémoire (voir
			<xref linkend="fig-jenkins-monitoring-pluging" />
			). Une fois ce plugin installé, vous pouvez accéder aux graphiques
			JavaMelody depuis la page "Administrer Jenkins", en utilisant les entrées
			du menu
			<indexterm id="I_indexterm13_d1e17906" class="endofrange"
				startref="ch13-server1" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e17908" class="endofrange"
				startref="ch13-server2" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e17910" class="endofrange"
				startref="ch13-server3" significance="normal">
				<primary />
			</indexterm>
			"Monitoring of Hudson/Jenkins master" ou "Hudson/Jenkins nodes".
		</para>
		<figure float="0" id="fig-jenkins-monitoring-pluging">
			<title>Le plugin Jenkins Monitoring</title>
			<mediaobject id="I_mediaobject13_d1e17916">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1308.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1308.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
	</sect1>
	<sect1 id="sect-maint-backups">
		<title>Sauvegarde de votre configuration</title>
		<para>
			Sauvegarder
			<indexterm class="startofrange" id="ch13-backups"
				significance="normal">
				<primary>sauvegardes</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-backups2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>sauvegardes</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-backups3"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance de</secondary>
				<tertiary>sauvegardes</tertiary>
			</indexterm>
			vos données est une pratique universellement recommandée, et vos serveurs
			Jenkins ne devraient pas y faire exception. Par chance, sauvergarder
			Jenkins est relativement aisé. Dans cette section nous allons
			regarder plusieurs façons de réaliser cela.
		</para>
		<sect2>
			<title>Fondamentaux de la sauvegarde Jenkins</title>
			<para>
				Dans la plus simple des configurations, il suffit de sauvegarder
				périodiquement votre dossier
				<filename moreinfo="none">JENKINS_HOME</filename>
				.
				Il contient la configuration de toutes vos tâches de build, les
				configurations de vos noeuds esclaves et l'historique des builds. La
				sauvegarde peut se faire pendant que Jenkins tourne. Il n'y a pas
				besoin de couper votre serveur pendant la sauvegarde.
			</para>
			<para>
				L'inconvénient de cette approche est que le dossier
				<filename moreinfo="none">JENKINS_HOME</filename>
				peut contenir un volume très important de données (voir
				<xref linkend="sec-hudson-home-directory-contents" />
				). Si cela devient un problème, vous pouvez en gagner un peu en ne
				sauvegardant pas les dossiers suivants, qui contiennent des données
				aisément recrées à la demande par Jenkins :
			</para>
			<variablelist>
				<varlistentry>
					<term>
						<filename moreinfo="none">$JENKINS_HOME/war</filename>
					</term>
					<listitem>
						<para>Le fichier WAR eclaté</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<filename moreinfo="none">$JENKINS_HOME/cache</filename>
					</term>
					<listitem>
						<para>Outils téléchargés</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<filename moreinfo="none">$JENKINS_HOME/tools</filename>
					</term>
					<listitem>
						<para>Outils décompressés</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Vous pouvez aussi être sélectif concernant ce que vous sauvegarder
				dans vos tâches de build.
				Le dossier
				<filename moreinfo="none">$JENKINS_HOME/jobs</filename>
				contient la configuration de la tâche, l'historique des builds et les
				fichiers archivés pour chacun de vos builds. La structure d'un
				dossier de tâche de build est présentée dans
				<xref linkend="fig-jenkins-build-directory" />
				.
			</para>
			<figure float="none" id="fig-jenkins-build-directory">
				<title>Le dossier des builds</title>
				<mediaobject id="I_mediaobject13_d1e17989">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1309.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1309.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Pour savoir comment optimiser vos sauvegardes Jenkins, vous devez
				comprendre comment sont organisés les dossiers de tâche de build. Au sein
				du dossier
				<emphasis>jobs</emphasis>
				, il y a un dossier pour chaque tâche de build. Ce dossier contient deux
				dossiers :
				<filename moreinfo="none">builds</filename>
				et
				<filename moreinfo="none">workspace</filename>
				. Il n'y a pas besoin de sauvegarder le dossier
				<filename moreinfo="none">workspace</filename>
				, vu qu'il sera simplement restauré via une simple récupération
				si Jenkins constate son absence.
			</para>
			<para>
				Au contraire, le dossier
				<filename moreinfo="none">builds</filename>
				requiert plus d'attention. Il contient l'historique de vos résultats
				de build et de vos artefacts générés précédement, avec un dossier
				horodaté pour chaque build précédent.
				Si vous n'êtes pas intéressés par la restauration de votre historique
				des builds ou d'anciens artefacts, vous n'avez pas besoin de sauver
				ce dossier.
				Si vous l'êtes, continuez à lire! Dans chacun de ces dossiers,
				vous trouverez l'historique des builds (stockés sous la forme de
				fichiers XML, par exemple les résultats des tests JUnit)
				et les artefacts archivés. Jenkins utilise les fichiers texte et XML
				pour réaliser les graphiques affichés sur le tableau de bord des tâche de build. 
				Le dossier
				<filename moreinfo="none">archive</filename>
				contient les fichiers binaires ayant été générés et stockés par les
				builds précédents. Les binaires peuvent vous être importants ou non,
				mais ils peuvent prendre beaucoup de place. Aussi, si vous les
				excluez de vos sauvegardes, vous pourriez économiser beaucoup
				d'espace.
			</para>
			<para>
				De même qu'il est sage de réaliser des sauvegardes fréquentes, il
				est également sage de tester votre procédure de sauvegarde. Avec
				Jenkins, cela est facile à faire.
				Les répertoires racine de Jenkins sont totalement portables, pour tester
				votre sauvegarde, il suffit donc de l'extraire dans un dossier
				temporaire et de lancer une instance
				Jenkins. Par exemple, imaginons que vous ayez extrait votre
				sauvegarde dans un dossier temporaire nommé
				<filename moreinfo="none">/tmp/jenkins-backup</filename>
				. Pour tester cette sauvegarde, assigner le chemin du dossier
				temporaire à la variable
				<filename moreinfo="none">JENKINS_HOME</filename>
				:
			</para>
			<programlisting id="I_programlisting13_d1e18024"
				format="linespecific">
				$
				<userinput moreinfo="none">export
					JENKINS_HOME=/tmp/jenkins-backup</userinput>
			</programlisting>
			<para>Puis démarrer Jenkins sur un port différent et regardez s'il
				fonctionne :
			</para>
			<programlisting id="I_programlisting13_d1e18031"
				format="linespecific">
				$
				<userinput moreinfo="none">java -jar jenkins.war --httpPort=8888</userinput>
			</programlisting>
			<para>Vous pouvez maintenant voir Jenkins tourner sur ce port et
				vérifier que votre sauvegarde fonctionne correctement.</para>
		</sect2>
		<sect2>
			<title>Utilisation du Backup Plugin</title>
			<para>
				L'approche
				<indexterm id="I_indexterm13_d1e18042" significance="normal">
					<primary>Backup plugin</primary>
				</indexterm>
				<indexterm id="I_indexterm13_d1e18045" significance="normal">
					<primary>plugins</primary>
					<secondary>Backup</secondary>
				</indexterm>
				décrite dans la section précédente est suffisamment simple pour
				s'intégrer dans vos procédures normales de sauvegardes, mais vous
				pourriez préférer quelque chose de plus spécifique à Jenkins. Le
				plugin Backup (voir
				<xref linkend="fig-jenkins-backup-manager" />
				) fournit une interface utilisateur simple que vous pouvez utiliser pour
				sauvegarder et restaurer vos configurations et données Jenkins.
			</para>
			<figure float="none" id="fig-jenkins-backup-manager">
				<title>Le plugin Jenkins Backup Manager</title>
				<mediaobject id="I_mediaobject13_d1e18056">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1310.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1310.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Ce plugin vous permet de configurer et de lancer des sauvegardes tant des
				configurations de vos tâches de build que de votre historique des
				builds. L'écran "Configuration" vous donne un important contrôle sur les
				éléments à sauvegarder (voir
				<xref linkend="fig-jenkins-backup-config" />
				). Vous pouvez choisir de seulement sauvegarder les fichiers XML de
				configuration, ou de sauvegarder avec l'historique des builds.
				Vous pouvez aussi choisir de sauvegarder (ou non) les artefacts Maven
				automatiquement générés (dans de nombreux processus de build, ces
				artefacts sont disponibles dans votre Entreprise Repository Manager
				local). Vous pouvez aussi sauvegarder les espaces de travail des
				tâches (généralement non nécessaire, comme discuté plus haut) et toutes
				empreintes numériques générées.
			</para>
			<figure float="none" id="fig-jenkins-backup-config">
				<title>Configurer Jenkins Backup Manager</title>
				<mediaobject id="I_mediaobject13_d1e18068">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1311.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1311.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Vous pouvez déclencher une sauvegarde manuellement, depuis l'écran
				"Gestionnaire de backup" (accessible depuis l'écran "Administrer Jenkins").
				La sauvegarde prend du temps et stoppe Jenkins durant cette période (à moins
				de désactiver cette option dans la
				<phrase role="keep-together">configuration</phrase>
				de la sauvegarde).
			</para>
			<para>
				A l'heure où ces lignes sont écrites, il n'est pas possible de
				planifier cette opération depuis Jenkins, mais vous pouvez démarrer
				la sauvegarde en invoquant l'adresse correspondante (par exemple
				<ulink url="http://localhost:8080/backup/backup" />
				si votre instance Jenkins tourne localment sur le port 8080). Dans
				un environnement unix, par exemple, cela serait généralement fait
				via une tâche cron en utilisant un outil tel que
				<literal moreinfo="none">wget</literal>
				ou
				<literal moreinfo="none">curl</literal>
				pour démarrer la sauvegarde.
			</para>
		</sect2>
		<sect2>
			<title>Des sauvegardes automatisées plus légères</title>
			<para>
				Si tout
				<indexterm id="I_indexterm13_d1e18093" significance="normal">
					<primary>plugin Thin Backup</primary>
				</indexterm>
				<indexterm id="I_indexterm13_d1e18096" significance="normal">
					<primary>plugins</primary>
					<secondary>Thin Backup</secondary>
				</indexterm>
				<indexterm id="I_indexterm13_d1e18101" significance="normal">
					<primary>sauvegardes plus légères</primary>
				</indexterm>
				ce que vous voulez sauvegarder est votre configuration des tâches de build,
				le plugin Backup Manager peut être considéré excessif. Une
				autre option est d'utiliser le plugin "Thin Backup", qui permet de
				planifier des sauvegardes complètes et incrémentales de vos fichiers
				de configuration.
				Vu qu'ils ne sauvegardent pas votre historique des
				builds ou vos artefacts, ces sauvegardes sont très rapides et peuvent
				ainsi être réalisées sans stopper le serveur pour les réaliser.
			</para>
			<para>
				Tout comme le plugin Backup, ce plugin ajoute une icône dans la page
				"Administrer Jenkins". De là, vous pouvez configurer et planifier
				les sauvegardes de votre configuration, déclencher une sauvegarde
				immédiate ou restaurer une sauvegarde précédente. La configuration
				est sans détours (voir
				<xref linkend="fig-lightweight-backup-config" />
				). Elle implique simplement de configurer des sauvegardes complètes
				et incrémentales en utilisant une syntaxe similaire à celle de cron
				et de fournir un dossier où stocker les sauvegardes.
			</para>
			<figure float="none" id="fig-lightweight-backup-config">
				<title>Configurer le plugin Thin Backup</title>
				<mediaobject id="I_mediaobject13_d1e18112">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1312.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1312.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Pour restaurer une configuration précédente, aller simplement à la
				page "Restore" et choisissez la date de la configuration que vous
				voulez réappliquer (voir
				<xref linkend="fig-restore-light-plugin" />
				). Une fois la configuration précédente restaurée, vous devez
				recharger la configuration Jenkins depuis le disque
				<indexterm id="I_indexterm13_d1e18121" class="endofrange"
					startref="ch13-backups" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e18123" class="endofrange"
					startref="ch13-backups2" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e18125" class="endofrange"
					startref="ch13-backups3" significance="normal">
					<primary />
				</indexterm>
				ou redémarrer Jenkins.
			</para>
			<figure float="none" id="fig-restore-light-plugin">
				<title>Restaurer une configiuratiopn précédente</title>
				<mediaobject id="I_mediaobject13_d1e18131">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1313.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1313.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
		</sect2>
	</sect1>
	<sect1 id="sect-maint-archiving-jobs">
		<title>Archiver les tâches de build</title>
		<para>
			Une autre façon
			<indexterm class="startofrange" id="ch13-arc1"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>archiver les tâches de build</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-arc2"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance de</secondary>
				<tertiary>archiver les tâches de build</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-arc3"
				significance="normal">
				<primary>archiver les tâches de build</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-arc4"
				significance="normal">
				<primary>tâches de build</primary>
				<secondary>archiver</secondary>
			</indexterm>
			d'aborder la problématique de l'espace disque est de supprimer ou
			d'archiver les projets qui ne sont plus actifs. Archiver un projet
			vous permet de le restaurer aisément ultérieurement afin de consulter
			ses données ou artefacts. Archiver un projet est facile : il suffit
			de déplacer le répertoire de celui-ci en dehors du répertoire des
			tâches. Bien sûr, généralement, le répertoire de la tâche est en premier
			lieu compressé dans un fichier ZIP ou une tarball.
		</para>
		<para>
			Dans l'exemple qui suit, nous voulons archiver le project
			<emphasis>tweeter-default</emphasis>
			. En premier lieu, nous nous rendons dans le répertoire
			<filename moreinfo="none">jobs</filename>
			de Jenkins et y créons une "tarball" (archive compressée) du
			répertoire
			<filename moreinfo="none">tweeter-default</filename>
			se trouvant dans le répertoire des tâches.
		</para>
		<screen format="linespecific">
			$
			<userinput moreinfo="none">cd $JENKINS_HOME/jobs</userinput>
			$
			<userinput moreinfo="none">ls</userinput>
			gameoflife-default tweeter-default
			$
			<userinput moreinfo="none">tar czf tweeter-default.tgz
				tweeter-default</userinput>
			$
			<userinput moreinfo="none">ls</userinput>
			gameoflife-default tweeter-default tweeter-default.tgz
		</screen>
		<para>Si le projet n'est pas en cours de construction par Jenkins,
			vous pouvez alors le supprimer en toute sécurité et déplacer
			l'archive vers son lieu de stockage :
			</para>
		<screen format="linespecific">
			$
			<userinput moreinfo="none">rm -Rf tweeter-default</userinput>
			$
			<userinput moreinfo="none">mv tweeter-default.tgz
				/data/archives/jenkins</userinput>
		</screen>
		<para>
			Une fois cela réalisé, vous pouvez tout simplement recharger la
			configuration depuis le disque dans l'écran "Administrer Jenkins"
			(voir
			<xref linkend="fig-maintenance-reload-configuration" />
			). Le projet archivé va dispairaitre instantanément de votre tableau
			de bord.
		</para>
		<figure float="none" id="fig-maintenance-reload-configuration">
			<title>Recharger la configuration à partir du disque</title>
			<mediaobject id="I_mediaobject13_d1e18203">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1314.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1314.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			Sur une machine Windows, vous pouvez faire exactement la même chose en
			créant un fichier ZIP du
			<indexterm id="I_indexterm13_d1e18210" class="endofrange"
				startref="ch13-arc1" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18212" class="endofrange"
				startref="ch13-arc2" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18214" class="endofrange"
				startref="ch13-arc3" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18216" class="endofrange"
				startref="ch13-arc4" significance="normal">
				<primary />
			</indexterm>
			répertoire du projet.
		</para>
	</sect1>
	<sect1 id="sect-maint-migrating-jobs">
		<title>Migrer les tâches de build</title>
		<para>
			Il arrive
			<indexterm class="startofrange" id="ch13-migrate1"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance de</secondary>
				<tertiary>migrer les tâches de build</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-migrate2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>migrer les tâches de build</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-migrate3"
				significance="normal">
				<primary>migrer les tâches de build</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-migrate4"
				significance="normal">
				<primary>tâches de build</primary>
				<secondary>migrer</secondary>
			</indexterm>
			que vous ayez à déplacer ou copier des tâches de build Jenkins d'une
			instance Jenkins à une autre sans copier toute la configuration de
			Jenkins. Par exemple, vous pourriez migrer vos tâches de build vers une
			instance Jenkins sur une machine flambant neuve, avec une
			configuration système différente de celle de la machine initiale. Ou
			vous pourriez être en train de restaurer une vieille archive de
			tâche de build.
		</para>
		<para>
			Comme nous l'avons vu, Jenkins stocke toutes les données nécessaires
			pour un projet au sein d'un sous-répertoire du répertoire
			<filename moreinfo="none">jobs</filename>
			dans votre répertoire racine de Jenkins. Ce sous-répertoire est aisé
			à
			<phrase role="keep-together">identifier — </phrase>
			il a le même nom que votre projet. D'ailleurs, cela explique pourquoi
			vos noms de projets ne doivent pas contenir d'espaces, spécialement
			si Jenkins tourne sous Unix ou Linux — cela rend la maintenance et les
			tâches d'administrtions bien plus aisées si les noms de projet sont
			également des fichiers Unix correctement nommés.
		</para>
		<para>
			Vous pouvez copier ou déplacer des tâches de build entre instances de
			projets assez simplement en copiant ou déplaçant les répertoires des
			tâches de build dans la nouvelle instance Jenkins. Le répertoire de la tâche du
			projet est autonome — il contient tant la configuration complète du
			projet que son historique des builds. Il est également possible de
			copier des répertoires de tâches de build dans une instance Jenkins en
			cours de fonctionnement. Toutefois, si vous effacez également ces
			répertoires du serveur originel, vous devriez en premier stopper ce
			dernier. Vous n'avez même pas besoin de redémarrer la nouvelle
			instance Jenkins pour voir le résultat de votre import, allez
			simplement à l'écran "Administrer Jenkins" et cliquez sur "Recharger
			la configuration à partir du disque". Cela chargera les nouvelles tâches de build
			et les rendra immédiatement visible sur le tableau de bord Jenkins.
		</para>
		<para>
			Il y a quelques précautions à prendre toutefois. Si vous migrez vos
			tâches vers une installation toute fraîche de Jenkins, souvenez vous
			d'installer ou de migrer les plugins de votre précédent serveur. Les
			plugins se trouvent dans le répertoire
			<filename moreinfo="none">plugins</filename>
			, il suffit donc de simplement copier tout le contenu de ce
			répertoire dans le répertoire correspondant à votre nouvelle
			instance.
		</para>
		<para>
			Bien sûr, vous pourriez être en train de migrer les tâches de build vers
			une nouvelle instance présicément
			<emphasis>parce que</emphasis>
			la configuration des plugins est problématique. Certains plugins
			peuvent parfois être un peu bogués, et vous pourriez vouloir une
			installation propre avec des plugins bien précis. Dans ce cas, vous
			pourriez avoir à retravailler certaines configurations de projets une
			fois ceux-ci importés.
		</para>
		<para>
			L'explication de cela est simple. Quand vous utilisez un plugin dans
			un projet, le fichier
			<filename moreinfo="none">config.xml</filename>
			du projet est mis à jour avec des champs de configuration spécifiques
			au plugin. Si, pour quelques raisons que ce soit, vous devez migrer des
			projets vers une installation Jenkins
			<emphasis>sans</emphasis>
			ces plugins, Jenkins ne comprendra pas les parties correspondantes de
			la configuration de ces projets. La même chose peut également arriver
			si les versions des plugins sont très différentes et que le format
			des données de configuration a changé.
		</para>
		<para>Si vous migrez des tâches vers une instance Jenkins avec une
			configuration différente, il est également intéressant de garder un
			oeil sur les logs systèmes. Les configurations de plugin invalides
			sont généralement visibles via des alertes ou des exceptions.
			Bien que non fatal, ces messages d'erreurs indiquent souvent que le plugin ne
			fonctionnera pas comme attendu, voir pas du tout.
			</para>
		<para>
			Jenkins offre des fonctionnalités utiles pour vous aider à migrer les
			configurations de vos projets. Si Jenkins trouve des données qu'il
			considère invalides, il vous le fera savoir. Sur l'écran "Administrer
			Jenkins", vous aurez des messages comme celui dans
			<xref linkend="fig-jenkins-new-version" />
			.
		</para>
		<figure float="0" id="fig-jenkins-new-version">
			<title>Jenkins vous informe si vos données ne sont pas compatibles
				avec la version actuelle</title>
			<mediaobject id="I_mediaobject13_d1e18282">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1315.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1315.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			Plusieurs options s'offrent alors à vous. Vous pouvez laisser la
			configuration en l'état, par exemple si vous souhaitez revenir à une
			version précédente de votre instance Jenkins. Vous pouvez
			aussi laisser Jenkins ignorer les champs qu'il ne peut lire. Si vous
			retenez cette option, Jenkins affichera un écran avec plus de détails
			sur l'erreur et il pourra même, si vous le souhaitez, vous aider à
			nettoyer votre fichier de configuration (voir
			<xref linkend="fig-jenkins-manage-old-data" />
			).
		</para>
		<figure float="0" id="fig-jenkins-manage-old-data">
			<title>Gestion de configuration périmée</title>
			<mediaobject id="I_mediaobject13_d1e18295">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1316.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1316.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Cet écran donne plus de détails sur le projet contenant les
			données périmées ainsi que le message d'erreur obtenu. Cela offre
			plusieurs possibilités. Si vous êtes sûr de ne plus avoir besoin du
			plugin ayant originellement créé ces données, vous pouvez supprimer
			les champs fautifs en toute sécurité en cliquant sur le bouton
			"Discard Unreadable Data". Il est aussi possible que ces données
			appartiennent à un plugin qui n'a pas encore été installé sur cette
			instance Jenkins. Dans ce cas, installez le plugin et tout devrait
			aller bien. Enfin, vous pouvez toujours choisir de laisser les
			données redondantes et de vivre avec le message d'erreur, au moins
			jusqu'à ce que vous soyez sûr de ne plus avoir à migrer ces données
			vers l'ancien serveur.
</para>
		<para>Cependant, Jenkins ne détecte pas toujours toutes les erreurs et
			inconsistences. Il est toujours utile de garder un oeil sur les
			fichiers de log lorsque que vous migrez vos tâches de build. Par
			exemple, ce qui suit est un exemple réel d'un fichier de log Jenkins
			montrant ce qu'il peut arriver pendant une migration :</para>
		<screen format="linespecific">Mar 16, 2010 2:05:06 PM
			hudson.util.CopyOnWriteList$ConverterImpl unmarshal
			WARNING: Failed to resolve class com.thoughtworks.xstream.mapper.CannotResolveClassException:
			hudson.plugins.cigame.GamePublisher :
			hudson.plugins.cigame.GamePublisher
			at
			com.thoughtworks.xstream.mapper.DefaultMapper.realClass(DefaultMapper.java:68)
			at
			com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:38)
			at
			com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass(DynamicProxyMapper.java:71)
			at
			com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:38)</screen>
		<para>
			Cette erreur nous informe que Jenkins ne peut trouver une classe
			appelée
			<literal moreinfo="none">hudson.plugins.cigame.GamePublisher
			</literal>
			. En fait, l'installation cible n'a pas le plugin "CI Game". Et dans
			ce cas (comme cela arrive parfois), aucun message d'alerte n'est
			apparu sur la page "Administrer Jenkins". Par conséquent, Jenkins n'a
			pas été capable de corriger le fichier de configuration par lui même.
		</para>
		<para>La solution la plus simple, dans ce cas, serait d'installer le
			plugin "CI Game". Mais que faire si on ne veut pas installer ce
			plugin? Nous pourrions laisser les fichiers de configuration en
			l'état, mais cela pourrait cacher des erreurs plus importantes
			ultérieurement. Il serait mieux de les nettoyer.</para>
		<para>
			Dans ce cas, il faut inspecter et modifier les fichiers de
			configuration du projet à la main. Sur cette machine Unix, j'ai juste
			utilisé
			<literal moreinfo="none">grep</literal>
			pour trouver tous les fichiers de configuration contenant "cigame" :
		</para>
		<screen format="linespecific">
			$
			<userinput moreinfo="none">cd $JENKINS_HOME/jobs</userinput>
			$
			<userinput moreinfo="none">grep cigame */config.xml</userinput>
			project-a/config.xml: &lt;hudson.plugins.cigame.GamePublisher/&gt;
			project-b/config.xml: &lt;hudson.plugins.cigame.GamePublisher/&gt;
			project-c/config.xml: &lt;hudson.plugins.cigame.GamePublisher/&gt;
		</screen>
		<para>
			Dans ces fichiers
			<emphasis>config.xml</emphasis>
			, j'ai trouvé une référence au plugin CI Game dans la section
			<literal moreinfo="none">&lt;publishers&gt;</literal>
			, là où se trouve généralement les configurations des plugins
			réalisant des rapports :
		</para>
		<programlisting id="I_programlisting13_d1e18334"
			format="linespecific">&lt;maven2-moduleset&gt;
			...
			&lt;publishers&gt;
			&lt;hudson.plugins.cigame.GamePublisher/&gt;
			&lt;hudson.plugins.claim.ClaimPublisher/&gt;
			&lt;/publishers&gt;
			...
			&lt;/maven2-moduleset&gt;</programlisting>
		<para>Pour résoudre le problème, il suffit de supprimer la ligne
			incriminée:</para>
		<programlisting id="I_programlisting13_d1e18339"
			format="linespecific">&lt;maven2-moduleset&gt;
			...
			&lt;publishers&gt;
			&lt;hudson.plugins.claim.ClaimPublisher/&gt;
			&lt;/publishers&gt;

			...
			&lt;/maven2-moduleset&gt;</programlisting>
		<para>
			L'emplacement précis des données de configuration du plugin varie en
			fonction du plugin, mais en général les fichiers
			<filename moreinfo="none">config.xml</filename>
			sont relativement lisibles. Les mettre à jour manuellement n'est pas
			trop compliqué.
		</para>
		<para>
			Au final, migrer des tâches de build entre des instances Jenkins n'est pas
			si dur. Vous avez juste besoin de connaitre quelques astuces pour les cas
			particuliers, et, si vous savez où regarder, Jenkins fournit de beaux
			outils pour rendre
			<indexterm id="I_indexterm13_d1e18348" class="endofrange"
				startref="ch13-migrate1" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18350" class="endofrange"
				startref="ch13-migrate2" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18352" class="endofrange"
				startref="ch13-migrate3" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18354" class="endofrange"
				startref="ch13-migrate4" significance="normal">
				<primary />
			</indexterm>
			le processus
			<indexterm id="I_indexterm13_d1e18357" class="endofrange"
				startref="ch13-maint2" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18359" class="endofrange"
				startref="ch13-maint" significance="normal">
				<primary />
			</indexterm>
			aisé.
		</para>
	</sect1>
	<sect1 id="sect-maint-conclusion">
		<title>Conclusion</title>
		<para>Dans ce chapitre, nous avons abordé certains éléments à
			connaitre afin d'administrer votre serveur Jenkins, notamment la
			surveillance de l'espace disque et de la charge du serveur, comment
			sauvegarder vos tâches de build et les fichiers de configuration, ainsi que
			comment migrer vos tâches de build en toute sécurité.
</para>
	</sect1>
</chapter>

