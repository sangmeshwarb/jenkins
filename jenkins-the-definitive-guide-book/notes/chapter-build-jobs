Hudson - Setting up your build jobs

- Introduction

Build jobs are the basic currency of a Continuous Integration server. A build job is a particular way of building, testing, deploying or otherwise doing something with your project. Build jobs come in a variety of forms: you may want to compile and unit test your application, report on code quality metrics related to the source code, generate documentation, bundle up an application for a release, deploy it to production, run an automated smoke test, or do any number of other such tasks. 

- Different types of build jobs

Hudson supports several different types of build job. 

  - The 'free-style software project' is a general-purpose build job, which provides a maximum of flexibility.

  - The 'maven2 project' is a build job adapted to Maven 2 (and Maven 3) projects. Hudson understands Maven pom files and project structures, including multi-module projects, and can use the information gleaned from the pom file to reduce the work you need to do to set up your project

The other two build jobs are more specialized:
  - The 'Monitor an external job' build job lets you keep an eye on non-interactive processes, such as cron jobs.
  - The 'multi-configuration project' lets you run the same build job in many different configurations. This can be useful for testing an application in many different environments, with different databases, and so on.

- Setting up freestyle build jobs

	- 
	- Integrating with source code repositories
	

	
- Discarding Old Builds and managing disk space
	Build jobs can consume a lot of disk space, especially if you store the build artifacts (the binary files, such as JARs, WARs, TARs etc., generated by your build job). Even without artifacts, keeping a record of every build job consumes additional disk space and memory, which may or may not be justified, depending on the nature of your build job. For example, for a code quality metrics build that reports on static analysis and code coverage metrics over time, you might want to keep a record of the builds for the duration of the project, whereas, for a build job that automatically deploys an application to a test server, keeping the build history and artifacts for posterity might be less important.
	
	The 'Discard Old Builds' option lets you limit the number of builds you record in the build history. You can either tell Hudson to only keep recent builds (Hudson will delete builds after a certain number of days), or to keep no more than a specified number of builds. If a certain build has particular sentimental value, you can always tell Hudson to keep it forever. In addition, Hudson will never delete the last stable and successful builds, no matter how old they are. For example, if you limit Hudson to only keep the last twenty builds, and your last successful build was thirty builds ago, Hudson will still keep the successful build job as well as the last twenty failing builds.
	
- Disabling builds
	
	islington
	
- Building other project types
	- Gant, Grails

- Dependencies between build jobs

- Setting up Maven build jobs
	
- Build environment variables
	- Standard build environment variables
	- Using the SETENV plugin

- Parameterized builds

- Multi-configuration build jobs