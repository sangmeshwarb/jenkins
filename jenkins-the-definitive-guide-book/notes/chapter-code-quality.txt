Write the code quality chapter. 

This chapter needs to contain stuff on code-quality related report plugins like:
* Violations
* Cobertura
* Clover
* Checkstyle, Dry, Findbugs, PMD, Task Scanner, Compiler Warnings
* Static Code Analysis Plug-ins
* Serenity

It also needs to explain the idea of a dedicated code quality build, and the idea of a zero-tolerance code quality policy (code quality build that fails if there are issues).

It also should talk about Sonar integration. 

We should also cover non-Java tools:
* Ruby metrics plugin for Ruby projects
* Code Scanner plugin for C++

Plan

* Why monitor code quality
* What aspects of code quality can you monitor?
* Installing the code quality plugins
* Monitoring coding standards and copy-paste with Checkstyle
* Monitoring potential bugs with Findbugs
* Monitoring code coverage with Cobertura
* Advanced code coverage with Clover
* Keeping tabs on compiler warnings
* Keeping track of TODOs, FIXMEs and so on
* More advanced analysis
* Integrating with Sonar
  * Introducing Sonar
  * Installing Sonar
  * Using Sonar with Hudson
  * Using Sonar as the reference for checkstyle and PMD rulesets 

------------------

# Introduction

Few would deny the importance of writing quality code. High quality code contains less bugs, and is easier to understand and to maintain. However, the precise definitions of code quality can be more subjective, varying between organizations, teams, and even individuals within a team. 

This is where coding standards come into play. In many cases, agreeing on a set of standards, and applying them, is more important than the standards themselves. Indeed, one of the most important aspects of quality code is that it is easy to read and to understand. If developers within a team all apply the same coding standards and practices, the code will be more readable, at least for members of that team. And if the standards are commonly used within the industry, the code will also be more readable for new developers arriving on the team. 

Coding standards include both esthetic aspects such as code layout and formatting, naming conventions, and so forth, as well as potentially bad practices such as missing curly brackets after a condition in Java. Consistent coding style lowers maintenance costs, make code clearer and more readable, and makes it easier to work on code written by other team members.

Only an experienced developer can really judge code quality in all its aspects. That is the role of code reviews and, among other things, practices like pair programming. In particular, only a human eye can decide if a piece of code is truly well written, and if it actually does what the requirements ask of it. However, code quality metrics tools can help a great deal. In fact it is unrealistic to try to enforce coding standards *without* the use of such tools. 

These tools analyze your application source code or byte code, and check whether the code respects certain rules. Code quality metrics can encompass many aspects of code quality, from coding standards and best practices right through to code coverage, with everything from compiler warnings to TODO comments in between. Certain metrics concentrate on measurable characteristics of your code base, such as the number of lines of code (NLOC), average code complexity, or the number of lines per class. Others focus on more sophisticated static analysis, or on looking for potential bugs or poor practices in your code.

There are a wide range of code quality reporting plugins available for Hudson. Many are for Java static analysis tools, such as Checkstyle, PMD, Findbugs, Cobertura and JDepend. Others, such as fxcop and NCover, are focused on .NET applications. 

With all of these tools, you need to configure your build job to generate the code quality metrics data before Hudson can produce any reports.

The notable exception to this rule is Sonar. Sonar can extract code quality metrics from any Maven project, with no additional configuration required in your Maven project. This is great when you have large numbers of existing Maven projects that you need to integrate into Hudson, and you want to configure consistent code quality reporting across all of your projects.



Why Monitor Code Quality
	- Enforce coding standards within a project or across an organization
	- Consistent coding style (naming conventions, code layout, etc...) lowers maintenance costs and makes it easier to work on code written by other team members
	- Avoid potential maintenance issues - example of missing brackets
	- Detect architectural issues - checkstyle packages rules
	- Detect bugs earlier - example of real errors detected by FindBugs
	- Keep tabs on developer-written tags (TODOs, etc)
	
What Aspects of Code Quality can you measure
	- Coding standards
	- Poor coding practices
	- Potential bugs
	- Compiler warnings
	- TODOs and FIXMEs


	
- Code Quality strategies
	- Passive monitoring
		- Keep graphs of code quality metrics, but don't enforce the rules in any real way. Easy to implement but not very effective.
	- Active Monitoring
		- Keep graphs of code quality, and review them with team members
		
	- Active Monitoring _ IDE integration
		- Use IDE plugins so that developers can see and apply coding standards directly from within the IDE
		


Coding standards metrics with Checkstyle


- Java best practices with PMD

- Duplicated code with CPD

- Potential bugs with Findbugs

- Summarizing static analysis reporting with the 'Static Analysis Trend' graph


- Code coverage with Cobertura

- [Advanced code coverage with Clover]

- Reporting on dependency analysis and code metrics (jdepend)

- Reporting on open tasks

- Reporting on compiler warnings


