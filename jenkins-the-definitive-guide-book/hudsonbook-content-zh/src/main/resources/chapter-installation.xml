<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Installing Hudson</title>

  <sect1>
    <title>Introduction</title>

    <para><indexterm>
        <primary>installation</primary>
      </indexterm>One of the first things you will probably notice about
    Hudson is how easy it is to install. Indeed, in less than five minutes,
    you can have a Hudson server up and running. However, as always, in the
    real world, things aren't always that simple, and there are a few details
    you should take into account when installing your Hudson server for
    production use. In this chapter, we look at how to install Hudson onto
    both your local machine and onto a fully fledged build server. We will
    also look at how to take care of your Hudson installation once it's up and
    running, and how to perform basic maintenance tasks such as backups and
    upgrades.</para>
  </sect1>

  <sect1>
    <title>Downloading and Installing Hudson</title>

    <para>Hudson is easy to install, and can run just about anywhere. You can
    run it either as a stand-alone application, or deployed on a conventional
    Java application server such as Tomcat or JBoss. This first option makes
    it easy to install and try out on your local machine, and you can be up
    and running with a bare-bones installation in a matter of minutes.</para>

    <para>Since Hudson is a Java application, you will need a recent version
    of Java on your machine. More precisely, you will need at least Java 5. In
    fact, on your build server, you will almost certainly need the full
    features of the Java Development Kit (JDK) 5.0 or better to execute your
    builds. If you're not sure, you can check the version of Java on your
    machine by executing the "java -version" command:<screen>$ java -version
java version "1.6.0_17"
Java(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025)
Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101, mixed mode)</screen>Hudson
    is distributed in the form of a bundled Java web application (a WAR file).
    You can download the latest version from the Hudson web site (<ulink
    url="https://hudson-ci.org"></ulink> - see <xref
    linkend="fig-hudson-home-page" />) or from the book web site. Hudson is a
    dynamic project, and new releases come out at a regular rate.</para>

    <para>At the time of writing, there was no slick graphical installer for
    Hudson, even for Windows - installation remains a largely manual process.
    There are however native packages for several Linux distributions,
    including Ubuntu, RedHat (including CentOS and Fedora) and OpenSolaris. We
    discuss how to install Hudson on Ubuntu and Redhat below.</para>

    <para>If you are not installing Hudson using one of the native packages,
    you simply download the latest binary distribution from the Hudson
    website. Once you have downloaded the latest and greatest Hudson release,
    you place it in an appropriate directory on your build server. On a
    Windows environment, you might put it in a directory called
    <filename>C:\Tools\Hudson</filename> (it's a good idea
    <emphasis>not</emphasis> to place Hudson in a directory containing spaces
    in the path, such as <filename>C:\Program Files</filename>, as this can
    cause problems for Hudson in some circumstances). On a Linux or Unix box,
    it might go in <filename>/usr/local/hudson</filename>,
    <filename>/opt/hudson</filename>, or in some other directory, depending on
    your local conventions and on the whim of your system
    administrator.</para>

    <figure id="fig-hudson-home-page">
      <title>You can download Hudson from the Hudson website</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-home-page.png" width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Before we go any further, let's just start up Hudson and take a
    look. If you didn't try this out in the previous chapter, now is the time
    to get your hands dirty. Open a console in the directory containing the
    <filename>hudson.war</filename> file and run the following
    command:<screen>$ <command>java -jar hudson.war</command>
[Winstone 2008/07/01 20:54:53] - Beginning extraction from war file
...
1/07/2008 20:55:08 hudson.model.Hudson load
INFO: Took 35 ms to load
...
[Winstone 2008/07/01 20:55:08] - HTTP Listener started: port=8080
[Winstone 2008/07/01 20:55:08] - Winstone Servlet Engine v0.9.10 running: controlPort=d
isabled
[Winstone 2008/07/01 20:55:08] - AJP13 Listener started: port=8009</screen></para>

    <para>Hudson should now be running on port 8080. Open your browser at
    <ulink url="http://localhost:8080"></ulink> and take a look. (see <xref
    linkend="fig-hudson-starting-page" />).</para>

    <figure id="fig-hudson-starting-page">
      <title>The Hudson start page</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-start.png" width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1>
    <title>Preparing a build server for Hudson</title>

    <para>Installing Hudson on your local development machine is one thing,
    but installing Hudson on a proper build server deserves a little more
    forethought and planning.</para>

    <para>Before you start your installation, the first thing you will need is
    a build server. To work well, Hudson needs both processor power and
    memory. Hudson itself is a relatively modest Java web application.
    However, in most configurations, at least some of the builds will be run
    on the principal build server. Builds tend to be both memory and
    processor-intensive operations, and Hudson can be configured to run
    several builds in parallel. Depending on the number of build jobs you are
    managing, Hudson will also need memory of it's own for its own internal
    use. The amount of memory required will depend largely on the nature of
    your builds, but memory is cheap these days, and it's best not to be
    stingy.</para>

    <para>A build server also needs CPU horsepower. As a rule of thumb, you
    will need one processor per parallel build, though, in practice, you can
    capitalize on I/O delays to do a little better than this. It is also in
    your best interest to dedicate your build server as much as possible to
    the task of running continuous builds. In particular, you should avoid
    memory or CPU-intensive applications such as test servers, heavily-used
    enterprise applications, enterprise databases such as Oracle, enterprise
    mail servers, and so on.</para>

    <para>One very practical option available in many organizations today is
    to use a virtual machine. This way, you can choose the amount of memory
    and number of processors you think appropriate for your initial
    installation, and easily add more memory and processors later on as
    required. However, if you are using a virtual machine, make sure that it
    has enough memory to support the maximum number of parallel builds you
    expect to be running. The memory usage of a Continuous Integration server
    is best described as spiky - Hudson will be creating additional JVMs as
    required for its build jobs, and these need memory.</para>

    <para>Another useful approach is to set up multiple build machines. Hudson
    makes it quite easy to set up 'slaves' on other machines that can be used
    to run additional build jobs. The slaves remain inactive until a new build
    job is requested - then the main Hudson installation dispatches the build
    job to the slave and reports on the results. This is a great way to absorb
    sudden spikes of build activity, for example just before a major release
    of your principal product. It is also a useful strategy if certain
    heavy-weight builds tend to "hog" the main build server - just put them on
    their own dedicated build agent! We will look at how to do this in detail
    later on in the book.</para>

    <para><indexterm>
        <primary>installation</primary>

        <secondary>Husdon system user</secondary>
      </indexterm>If you are installing Hudson on a Linux or Unix build
    server, it is a good idea to create a special user (and user group) for
    Hudson. This makes it easier to monitor at a glance the system resources
    being used by the Hudson builds, and to troubleshoot problematic builds in
    real conditions. The native binary installation packages discussed below
    do this for you. If you did not use one of these, you can create a
    dedicated hudson user from the command line as shown here:</para>

    <para><screen>$ <command>sudo groupadd build</command>
$ <command>sudo useradd --create-home --shell /bin/bash --groups build hudson</command></screen></para>

    <para>The exact details may vary depending on your environment. For
    example, you may prefer to use a graphical administration console instead
    of the command line, or, on a Debian-based Linux server (such as Ubuntu),
    you might use the more user-friendly <command>adduser</command> and
    <command>addgroup</command> commands.</para>

    <para>In most environments, you will need to configure Java correctly for
    this user. For example, you can do this by defining the
    <filename>JAVA_HOME</filename> and <filename>PATH</filename> variables in
    the <filename>.bashrc</filename> file, as shown here:</para>

    <programlisting>export JAVA_HOME=/usr/local/java/jdk1.6.0
export PATH=$JAVA_HOME/bin:$PATH</programlisting>

    <para>You will now be able to use this user to run Hudson in an isolated
    environment.</para>
  </sect1>

  <sect1 id="sec-hudson-home-directory">
    <title>The Hudson home directory</title>

    <para><indexterm>
        <primary>home directory</primary>
      </indexterm><indexterm>
        <primary>HUDSON_HOME</primary>
      </indexterm>Before we install Hudson, however, there are some things you
    need to know about how Hudson stores its data. Indeed, no matter where you
    store the Hudson WAR file, Hudson keeps all its important data in a
    special separate directory called the Hudson home directory. Here, Hudson
    stores information about your build server configuration, your build jobs,
    build artifacts, user accounts, and other useful information, as well as
    any plugins you may have installed. The Hudson home directory format is
    backward compatible across versions, so you can freely update or reinstall
    your Hudson executable without affecting your Hudson home
    directory.</para>

    <para>Needless to say, this directory will need a lot of disk
    space.</para>

    <para>By default, the Hudson home directory will be called
    <filename>.hudson,</filename> and will be placed in your home directory.
    For example, if you are running a machine under Windows 7, if your
    username is "john", you would find the Hudson home directory under
    <filename>C:\Users\john\.hudson</filename>. Under Windows XP, it would be
    <filename>C:\Documents and Settings\John\.hudson</filename>. On a Linux
    machine, it would most likely be under
    <filename>/home/john/.hudson</filename>. And so on.</para>

    <para>You can force Hudson to use a different directory as its home
    directory by defining the <code>HUDSON_HOME</code> environment variable.
    You may need to do this on a build server to conform to local directory
    conventions or to make your system administrator happy. For example, if
    your Hudson WAR file is installed in
    <filename>/usr/local/hudson</filename>, and the Hudson home directory
    needs to be in the <filename>/data/hudson</filename> directory, you might
    write a startup script along the following lines:</para>

    <programlisting>export HUDSON_BASE=/usr/local/hudson
export HUDSON_HOME=/var/hudson-data
java -jar ${HUDSON_BASE}/hudson.war</programlisting>

    <para>If you are running Hudson in a Java EE container such as Tomcat or
    JBoss, you can configure the webapp to expose its own environments
    variables. For example, if you are using Tomcat, you could create a file
    called <filename>hudson.xml</filename> in the
    <filename>$CATALINA_BASE/conf/localhost</filename> directory.</para>

    <para><programlisting>&lt;Context docBase="../hudson.war"&gt;
  &lt;Environment name="HUDSON_HOME" type="java.lang.String" 
               value="/data/hudson" override="true"/&gt;
&lt;/Context&gt;</programlisting></para>
  </sect1>

  <sect1>
    <title>Installing Hudson on Debian or Ubuntu</title>

    <para><indexterm>
        <primary>installation</primary>

        <secondary>Debian</secondary>
      </indexterm><indexterm>
        <primary>installation</primary>

        <secondary>Ubuntu</secondary>
      </indexterm><indexterm>
        <primary>installation</primary>

        <secondary>Linux</secondary>
      </indexterm>If you are installing Hudson on Debian and Ubuntu, it is
    convenient to install the native binary package for these platforms. This
    is easy enough to do, though these binaries are not provided in the
    standard repositories because of the high frequency of updates. First, you
    need to add the key to your system as shown here:<screen>$ <command>wget -O - http://hudson-ci.org/debian/hudson-ci.org.key \
</command>&gt; <command>| sudo apt-key add -</command></screen>Then you need
    to add the following entry to your
    <filename>/etc/apt/sources.list</filename> file:<screen>$ <command>deb http://hudson-ci.org/debian binary/</command></screen></para>

    <para>If you don't have a JDK already installed, you will need to install
    it:<screen>$ <command>sudo apt-get install sun-java6-jdk</command></screen></para>

    <para>Finally, you need to update your package index and install
    Hudson:<screen>$ <command>sudo apt-get update</command>
$ <command>sudo apt-get install hudson</command></screen>This will install
    Hudson as a service, with a correctly configured startup script in
    <filename>/etc/init.d/hudson</filename> and a corresponding system user
    called '<filename>hudson</filename>'. By default, you will find the Hudson
    WAR file in <filename>/usr/share/hudson</filename> and the Hudson home
    directory in <filename>/var/lib/hudson</filename>.</para>

    <para>To start or stop Hudson, simply invoke this script<screen>$ <command>sudo /etc/init.d/hudson start</command>
</screen></para>

    <para>Hudson will now be running on the default port of 8080 (<ulink
    url="http://localhost:8080/"></ulink>).</para>

    <para>You can stop Hudson as follows:<screen>$ <command>sudo /etc/inid.d/hudson stop</command></screen></para>

    <para>Hudson will write log files to
    <filename>/var/log/hudson/hudson.log</filename>. You can also fine-tune
    the configuration parameters in the
    <filename>/etc/default/hudson</filename> file. This is useful if you need
    to modify the Java startup arguments (JAVA_ARGS). You can also use this
    file to configure arguments that will be passed to Hudson in this file,
    such as the HTTP port or web application context (see <xref
    linkend="sect-running-hudson-standalone" />).</para>
  </sect1>

  <sect1 id="sect-hudson-redhat">
    <title>Installing Hudson on Redhat, Fedora or CentOS</title>

    <para><indexterm>
        <primary>installation</primary>

        <secondary>Redhat</secondary>
      </indexterm><indexterm>
        <primary>installation</primary>

        <secondary>Fedora</secondary>
      </indexterm><indexterm>
        <primary>installation</primary>

        <secondary>CentOS</secondary>
      </indexterm><indexterm>
        <primary>installation</primary>

        <secondary>Linux</secondary>
      </indexterm>There are also native binary packages available for Redhat,
    Fedora and CentOS. First you need to set up the repository as
    follows:<screen>$ <command>sudo wget -O /etc/yum.repos.d/hudson.repo \
  http://hudson-ci.org/redhat/hudson.repo</command>
$ <command>sudo rpm --import http://hudson-ci.org/redhat/hudson-ci.org.key</command></screen></para>

    <para>On a fresh installation, you may need to install the JDK:<screen>$ <command>sudo yum install java-1.6.0-openjdk</command></screen></para>

    <para>Next, you can install the package as shown here:<screen>$ <command>sudo yum install hudson</command></screen></para>

    <para>This will install the latest version of Hudson into the
    <filename>/usr/lib/hudson</filename> directory. The default Hudson home
    directory will be in <filename>/var/lib/hudson</filename>.</para>

    <para>Now you can start Hudson using the 'service' command:<screen>$ <command>sudo service hudson start</command></screen></para>

    <para>Hudson will now be running on the default port of 8080 (<ulink
    url="http://localhost:8080/"></ulink>).</para>

    <para>Hudson's configuration parameters are placed in the
    <filename>/etc/sysconfig/hudson</filename> file. However at the time of
    writing the configuration options are more limited than those provided by
    the Ubuntu package: you can define the HTTP port using the HUDSON_PORT
    parameter, for example, but to specify an application context you need to
    modify the startup script by hand. The principle configuration options are
    listed here:</para>

    <itemizedlist>
      <listitem>
        <para>HUDSON_JAVA_CMD: The version of Java you want to use to run
        Hudson; </para>
      </listitem>

      <listitem>
        <para>HUDSON_JAVA_OPTIONS: Command-line options to pass to Java, such
        as memory options.</para>
      </listitem>

      <listitem>
        <para>HUDSON_PORT: The port that Hudson will to run on.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Installing Hudson on SUSE or OpenSUSE</title>

    <para>Binary packages are also available for SUSE and OpenSUSE, so the
    installation process on these platforms is straightforward. First, you
    need to add the Hudson repository to the SUSE repository list:<screen>$ <command>sudo rpm --import http://hudson-ci.org/redhat/hudson-ci.org.key</command></screen></para>

    <para>Then you need to download the latest Hudson RPM package from the
    Hudson web site:</para>

    <para><screen>$ <command>sudo wget -O /tmp/hudson.rpm http://hudson-ci.org/latest/opensuse/hudson.rpm</command></screen>Finally,
    you simply install the Hudson RPM file using the <command>zypper</command>
    command:<screen>$ <command>sudo zypper install /tmp/hudson.rpm</command>
Loading repository data...
Reading installed packaged...
Resolving package dependencies...

The following NEW packages are going to be installed:
  hudson java-1.6.0-sun


2 new packages to install.
...
Continue? [y/n/?] (y):
...
Installing hudson-1.360-1.1 [done]
Additional rpm output:
hudson                   0:off  1:off  2:off  3:on   4:off  5:on   6:off</screen></para>

    <para>As you can gather from the console output, this will install both
    Hudson and the latest JDK from Sun, if the latter is not already
    installed. OpenSuse installations typically have the OpenJDK version of
    Java, but Hudson prefers the Sun variety. When it downloads the Sun JDK,
    it will prompt you to validate the Sun Java license before continuing with
    the installation.</para>

    <para>This installation process will also create a
    <filename>hudson</filename> user and install Hudson as a service, so that
    it will start up automatically whenever the machine boots. To start Hudson
    manually, you can invoke the hudson startup script in the
    <filename>/etc/init.d</filename> directory:<screen>$ <command>sudo /etc/init.d/hudson hudson start</command></screen></para>

    <para>Hudson will now be running on the default port of 8080 (<ulink
    url="http://localhost:8080/"></ulink>).</para>

    <para>The configuration options are similar to the Redhat installation
    (see <xref linkend="sect-hudson-redhat" />). You can define a limited
    number of configuration variables in the
    <filename>/etc/sysconfig/hudson</filename> file, but for any advanced
    configuration options, you need to modify the startup script in
    <filename>/etc/init.d/hudson</filename>.</para>

    <para>The <command>zypper</command> tool also makes it easy to update your
    Hudson instance:</para>

    <para><screen>$ <command>sudo zypper update hudson</command></screen>This
    will download and install the latest version of Hudson from the Hudson web
    site.</para>
  </sect1>

  <sect1 id="sect-running-hudson-standalone">
    <title>Running Hudson as a stand-alone application</title>

    <para><indexterm>
        <primary>installation</primary>

        <secondary>Standalone</secondary>
      </indexterm>You can run the Hudson server in one of two ways: either as
    a stand-alone application, or deployed as a standard web application onto
    a Java Servlet container or application server such as Tomcat, JBoss or
    GlassFish. Both approaches have their pros and cons, so we will look at
    both here.</para>

    <para>Hudson comes bundled as a WAR file that you can run directly using
    an embedded servlet container. Hudson uses the lightweight Winstone
    serlvet engine to allow you to run the server out-of-the-box, without
    having to configure a web server yourself. This is probably the easiest
    way to get started, allowing you to be up and running with Hudson in a
    matter of minutes. It is also a very flexible option, and provides some
    extra features unavailable if you deploy Hudson to a conventional
    application server. In particular, if you are running Hudson as a
    stand-alone server, you will be able to install plugins and upgrades on
    the fly, and restart Hudson directly from the administration
    screens.</para>

    <para>To run Hudson using the embedded servlet container, just go to the
    command line and type the following:<screen>C:\Program Files\Hudson&gt;<command>java -jar hudson.war</command>
[Winstone 2008/07/01 20:54:53] - Beginning extraction from war file
[Winstone 2008/07/01 20:55:07] - No webapp classes folder found - C:\Users\john\.hudson
\war\WEB-INF\classes
hudson home directory: C:\Users\john\.hudson
...
1/07/2008 20:55:08 hudson.model.Hudson load
INFO: Took 35 ms to load
...
[Winstone 2008/07/01 20:55:08] - HTTP Listener started: port=8080
[Winstone 2008/07/01 20:55:08] - Winstone Servlet Engine v0.9.10 running: controlPort=d
isabled
[Winstone 2008/07/01 20:55:08] - AJP13 Listener started: port=8009</screen></para>

    <para>In a Linux environment, the procedure is similar. Note how we start
    the Hudson server from with the 'hudson' user account we created
    earlier.<screen>john@lambton:~$ <command>sudo su - hudson</command>
hudson@lambton:~$ <command>java -jar /usr/local/hudson/hudson.war</command> 
[Winstone 2008/07/16 02:11:24] - Beginning extraction from war file
[Winstone 2008/07/16 02:11:27] - No webapp classes folder found - /home/hudson/.hudson/
war/WEB-INF/classes
hudson home directory: /home/hudson/.hudson
...
[Winstone 2008/07/16 02:11:31] - HTTP Listener started: port=8080
[Winstone 2008/07/16 02:11:31] - AJP13 Listener started: port=8009
[Winstone 2008/07/16 02:11:31] - Winstone Servlet Engine v0.9.10 running: controlPort=d
isabled</screen></para>

    <para>This will start the embedded servlet engine in the console window.
    The Hudson web application will now be available on port 8080. When you
    run Hudson using the embedded server, there is no web application context,
    so you access Hudson directly using the server URL (e.g. <ulink
    url="http://localhost:8080"></ulink>).</para>

    <para>To stop Hudson, just press Control-C.</para>

    <para><indexterm>
        <primary>configuration</primary>

        <secondary>--httpPort</secondary>
      </indexterm>By default, Hudson will run on the 8080 port. If this
    doesn't suit your environment, you can specify the port manually, using
    the <command>--httpPort</command> option:<screen>$ java -jar hudson.war --httpPort=8081</screen></para>

    <para>In a real-world architecture, Hudson may not be the only web
    application running on your build server. Depending on the capacity of
    your server, Hudson may have to cohabit with other web applications or
    Maven repository managers, for example. If you are running Hudson along
    side another application server, such as Tomcat, Jetty or Glassfish, you
    will also need to override the ajp13 port, using the <indexterm>
        <primary>configuration</primary>

        <secondary>--ajp13Port</secondary>
      </indexterm><command>--ajp13Port</command> option:<screen>$ java -jar hudson.war --httpPort=8081 --ajp13Port=8010</screen></para>

    <para>Some other useful options are:<variablelist>
        <varlistentry>
          <term>--prefix</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>--prefix</secondary>
              </indexterm><indexterm>
                <primary>configuration</primary>

                <secondary>context path</secondary>
              </indexterm>This option lets you define a context path for your
            Hudson server. By default Hudson will run on the port 8080 with no
            context path (<ulink url="http://localhost:8080"></ulink>).
            However, if you use this option, you can force Hudson to use
            whatever context path suits you, e.g:<screen>$ java -jar hudson.war --prefix=hudson</screen>In
            this case, Hudson will be accessible on <ulink
            url="http://localhost:8080/hudson"></ulink>.</para>

            <para>This option is often used when integrating a stand-alone
            instance of Hudson with Apache.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--daemon</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>--daemon</secondary>
              </indexterm>If you are running Hudson on a Unix machine, you can
            use this option to start Hudson as a background task, running as a
            unix daemon.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--logfile</term>

          <listitem>
            <para><indexterm>
                <primary>configuration</primary>

                <secondary>--logfile</secondary>
              </indexterm>By default, Hudson writes its logfile into the
            current directory. However, on a server, you often need to write
            your log files into a predetermined directory. You can use this
            option to redirect your messages to some other file: <screen>$ java -jar hudson.war --logfile=/var/log/hudson.log</screen></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Stopping Hudson using Control-C is a little brutal, of course - in
    practice, you would set up a script to start and stop your server
    automatically.</para>

    <para>If you are running Hudson using the embedded Winstone application
    server, you can also restart and shutdown Hudson elegantly by calling the
    Winstone server directly. To do this, you need to specify the controlPort
    option when you start Hudson, as shown here:<screen>$ java -jar hudson.war --controlPort=8001</screen></para>

    <para>A slightly more complete example in a Unix environment might look
    like this:</para>

    <para><screen>$ nohup java -jar hudson.war --controlPort=8001 &gt; /var/log/hudson.log 2&gt;&amp;1 &amp;</screen>The
    key here is the <command>controlPort</command> option. This option gives
    you the means of stopping or restarting Hudson directly via the Winstone
    tools. The only problem is that you need a matching version of the
    Winstone JAR file. Fortunately, one comes bundled with your Hudson
    installation, so you don't have to look far.</para>

    <para>To restart the server, you can run the following command:</para>

    <para><screen>$ java -cp $HUDSON_HOME/war/winstone.jar winstone.tools.WinstoneControl reload: --host=localhost --port=8001 </screen>And
    to shut it down completely, you can use the following:</para>

    <para><screen>$ java -cp $HUDSON_HOME/war/winstone.jar winstone.tools.WinstoneControl shutdown --host=localhost --port=8001 </screen></para>

    <para>Another way to shut down Hudson cleanly is to invoke the special
    "/exit" URL, as shown here:</para>

    <para><screen>$ wget http://localhost:8080/exit</screen>On a real server,
    you would typically have set up security, so that only a system
    administrator could access this URL. In this case, you will need to
    provide a username and a password:</para>

    <para><screen>$ wget --user=admin --password=secret http://localhost:8080/exit</screen>Note
    that you can actually do this from a different server, not just the local
    machine:</para>

    <para><screen>$ wget --user=admin --password=secret http://localhost:8080/exit</screen></para>

    <para>Note that while both these methods will shut down Hudson relatively
    cleanly (more so than killing the process directly, for example), they
    will interrupt any builds in progress. So it is recommended practice to
    prepare the shutdown cleanly by using the 'Prepare for Shutdown' button on
    the 'Manage Hudson' screen (see <xref
    linkend="sect-configuration-manage-hudson" />).</para>

    <para>Running Hudson as a stand-alone application may not be to everyone's
    taste. For a production server, you might want to take advantage of the
    more sophisticated monitoring and administration features of a full blown
    Java application server such as JBoss, Glassfish or WebSphere Application
    Server. And system administrators may be wary of the relatively
    little-known Winstone server, or may simply prefer Hudson to fit into a
    known pattern of Java web application development. If this is the case,
    you may prefer to, or be obliged to, deploy Hudson as a standard Java web
    application. We look at this option in the following section.</para>
  </sect1>

  <sect1>
    <title>Running Hudson behind an Apache server</title>

    <para>If you are running Hudson in a Unix environment, you may want to
    hide it behind an Apache HTTP server in order to harmonize the server URLs
    and simplify maintenance and access. This way, users can access the Hudson
    server using a URL like <ulink
    url="http://myserver.myorg.com/hudson"></ulink> rather than <ulink
    url="http://myserver.myorg.com:8081"></ulink>.</para>

    <para>One way to do this is to use the Apache <command>mod_proxy</command>
    and <command>mod_proxy_ajp</command> modules. These modules let you use
    implement proxying on your Apache server using the AJP13 (Apache JServer
    Protocol version 1.3). Using this module, Apache will transfer requests to
    particular URL patterns on your Apache server (running on port 80)
    directly to the Hudson server running on a different port. So when a user
    opens a URL like <ulink url="http://www.myorg.com/hudson"></ulink>, Apache
    will transparently forward traffic to your Hudson server running on <ulink
    url="http://buildserver.myorg.com:8081/hudson"></ulink>.Technically, this
    is known as "Reverse Proxying", as the client has no knowledge that the
    server is doing any proxying, or where the proxied server is located. So
    you can safely tuck your Hudson server away behind a firewall, while still
    providing broader access to your Hudson instance via the public-facing
    URL.</para>

    <para>The exact configuration of this module will vary depending on the
    details of your Apache version and installation details, but one possible
    approach is shown here.</para>

    <para>First of all, if you are running Hudson as a stand-alone
    application, make sure you start up Hudson using the
    <command>--prefix</command> option. The prefix you choose must match the
    suffix in the public-facing URL you want to use. So if you want to access
    Hudson via the URL <ulink
    url="http://myserver.myorg.com/hudson"></ulink>,you will need to provide
    'hudson' as a prefix:<screen>$ java -jar hudson.war --httpPort=8081 --ajp13Port=8010 --prefix=hudson</screen></para>

    <para>If you are running Hudson on an application server such as Tomcat,
    it will already be running under a particular web context ("/hudson" by
    default).</para>

    <para>Next, make sure the <command>mod_proxy</command> and
    <command>mod_proxy_ajp</command> modules are activated. In your
    <filename>httpd.conf</filename> file (often in the
    <filename>/etc/httpf/conf</filename> directory), you should have the
    following line:</para>

    <para><screen>LoadModule proxy_module modules/mod_proxy.so</screen>The
    proxy is actually configured in the <filename>proxy_ajp.conf</filename>
    file (often in the <filename>/etc/httpd/conf.d</filename> directory). Note
    that the name of the proxy path ("/hudson" in this example) must match the
    prefix or web context that Hudson is using. An example of such a
    configuration file is given here:</para>

    <para><screen>LoadModule proxy_ajp_module modules/mod_proxy_ajp.so

ProxyPass         /hudson  http://localhost:8081/hudson
ProxyPassReverse  /hudson  http://localhost:8081/hudson
ProxyRequests     Off</screen>Once this is done, you just need to restart your
    Apache server:<screen>$ sudo /etc/init.d/httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]</screen></para>

    <para>Now you should be able to access your Hudson server using a URL like
    <ulink url="http://myserver.myorg.com/hudson"></ulink>.</para>
  </sect1>

  <sect1>
    <title>Running Hudson on an application server</title>

    <para><indexterm>
        <primary>installation</primary>

        <secondary>on an application server</secondary>
      </indexterm>Since Hudson is distributed as an ordinary WAR file, it is
    easy to deploy it on any standard Java application server such as Tomcat,
    Jetty or Glassfish. Running Hudson on an application server is arguably
    more complicated to setup and to maintain. You also loose certain nice
    administration features such as the ability to upgrade Hudson or restart
    the server directly from within Hudson. On the other hand, your system
    administrators might be more familiar with maintaining an application
    running on Tomcat or Glassfish than on the more obscure Winstone
    server.</para>

    <para>Let's look at how you would typically deploy Hudson onto a Tomcat
    server. The easiest approach is undoubtedly to simply unzip the Tomcat
    binary distribution onto your disk (if it is not already installed) and
    copy the <filename>hudson.war</filename> file into the Tomcat
    <filename>webapps</filename> directory. You can download the Tomcat
    binaries from the Tomcat web site (<ulink
    url="http://tomcat.apache.org"></ulink>).</para>

    <para>You start Tomcat by running the <filename>startup.bat</filename> or
    <filename>startup.sh</filename> script in the Tomcat bin directory. Hudson
    will be available when you start Tomcat. You should note that, in this
    case, Hudson will be executed in its own web application context
    (typically "hudson"), so you will need to include this in the URL you use
    to access your Hudson server (e.g. <ulink
    url="http://localhost:8080/hudson"></ulink>).</para>

    <para>However, this approach is not necessarily the most flexible or
    robust option. If your build server is a Windows box, for example, you
    probably should install Tomcat as a Windows service, so that you can
    ensure that it starts automatically whenever the server reboots.
    Similarly, if you are installing Tomcat in a Unix environment, it should
    be set up as a service.</para>
  </sect1>

  <sect1>
    <title>Memory considerations</title>

    <para>Continuous Integration servers use a lot of memory. This is the
    nature of the beast - builds will consume memory, and multiple builds
    being run in parallel will consume still more memory. So you should ensure
    that your build server has enough RAM to cope with however many builds you
    intend to run simultaneously.</para>

    <para>Hudson naturally needs RAM to run, but if you need to support a
    large number of build processes, it is not enough just to give Hudson a
    lot of memory. In fact Hudson spans a new Java process each time it kicks
    off a build, so during a large build, the build process needs the memory,
    not Hudson.</para>

    <para>You can define build-specific memory options for your Hudson build
    jobs - we will see how to do this later on in the book. However if you
    have a lot of builds to maintain, you might want to define the JAVA_OPTS,
    MAVEN_OPTS and ANT_OPTS environment variables to be used as default values
    for your builds. The JAVA_OPTS options will apply for the main Hudson
    process, whereas the other two options will be used when Hudson kicks off
    new JVM processes for Maven and Ant build jobs respectively.</para>

    <para>Here is an example of how these variables might be configured on a
    Unix machine in the <filename>.profile</filename> file:</para>

    <programlisting>export JAVA_OPTS=-Djava.awt.headless=true -Xmx512m -DHUDSON_HOME=/data/hudson
export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=256m"
export ANT_OPTS="-Xmx512m -XX:MaxPermSize=256m"</programlisting>
  </sect1>

  <sect1>
    <title>Installing Hudson as a Windows service</title>

    <para>If you are running a production installation of Hudson on a Windows
    box, it is essential to have it running as a Windows service. This way,
    Hudson will automatically start whenever the server reboots, and can be
    managed using the standard Windows administration tools.</para>

    <para>One of the advantages of running Hudson on an application server
    such as Tomcat is that it is generally fairly easy to configure these
    servers to run as a Windows service. However, it is also fairly easy to
    install Hudson as a service, without having to install Tomcat.</para>

    <para>Hudson has a very convenient feature designed to make it easy to
    install Hudson as a Windows servers. There is currently no graphical
    installer that does this for you, but you get the next best thing - a
    web-based graphical installer.</para>

    <para>First, you need to start the Hudson server on your target machine.
    The simplest approach is to run Hudson using Java Web Start (see <xref
    linkend="fig-hudson-java-web-start" />). Alternatively, you can do this by
    downloading Hudson and running it from the command line, as we discussed
    earlier:<screen>C:\hudson&gt; <command>java -jar hudson.war</command></screen></para>

    <para>This second option is useful if the default Hudson port (8080) is
    already being used by another application. It doesn't actually matter
    which port you use - you can change this later.</para>

    <figure id="fig-hudson-java-web-start">
      <title>Starting Hudson using Java Web Start</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-webstart.png" width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Once you have Hudson running, connect to this server and go to the
    Manage Hudson screen. Here you will find an "Install as Windows Service"
    button. This will create a Hudson service on the server that will
    automatically start and stop Hudson in an orderly manner (see <xref
    linkend="fig-hudson-windows-service" />).</para>

    <para>Hudson will prompt you for an installation directory. This will be
    the Hudson home directory (HUDSON_HOME). The default value is the default
    HUDSON_HOME value: a directory called ".hudson" in the current user's home
    directory. This is often not a good choice for a Windows installation.
    When running Hudson on Windows XP, you should avoid installing your Hudson
    home directory anywhere near your "<filename>C:\Documents And
    Settings</filename>" directory - not only is it a ridiculously long name,
    the spaces can wreak havoc with your Ant and Maven builds and any tests
    using classpath-based resources. It is much better to use a short and
    sensible name such as "<filename>C:\hudson</filename>". The Vista and
    Windows 7 home directory paths like <filename>"C:\Users\john"</filename>
    will also work fine.</para>

    <figure id="fig-hudson-windows-service">
      <title>Installing Hudson as a Windows Service</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-install-as-windows-service.png"
                     width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>A short home directory path is sometimes required for other reasons,
    too. On many versions of Windows (Windows XP, Windows Server 2003,...),
    file path lengths are limited to around 260 characters. If you combine a
    nested Hudson work directory and a deep class path, you can often overrun
    this, which will result in very obscure build errors. To minimize the
    risks of over-running the Windows file path limits, you need to redefine
    the HUDSON_HOME environment variable to point to a shorter path in the
    <filename>hudson.xml</filename> file, as we discussed above.</para>

    <para>This approach won't always work with Windows Vista or Windows 7. An
    alternative strategy is to use the hudson.exe program that the Web Start
    installation process will have installed in the directory you specified
    above. Open the command line prompt as an administrator (right-click, "Run
    as administrator") and to run the <filename>hudson.exe</filename>
    executable with the "install" option:<screen>C:\hudson&gt; <command>hudson.exe install</command></screen></para>

    <para>This basic installation will work fine in a simple context, but you
    will often need to fine-tune your service. For example, by default, the
    Hudson service will be running under the local System account. However, if
    you are using Maven, Hudson will need an <filename>.m2</filename>
    directory and a <filename>settings.xml</filename> file in the home
    directory. Similarly, if you are using Groovy, you might need a
    <filename>.groovy/lib</filename> directory. And so on. To allow this, and
    to make testing your Hudson install easier, make sure you run this service
    under a real user account with the correct development environment set up
    (see <xref linkend="fig-hudson-windows-service-config" />). Alternatively,
    run the application as the system user, but use the System Information
    page in Hudson to check the <filename>${user.dir}</filename> directory,
    and place any files that must be placed in the user home directory
    here.</para>

    <figure id="fig-hudson-windows-service-config">
      <title>Configuring the Hudson Windows Service</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-windows-service.png"
                     width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You configure the finer details of the Hudson service in a file
    called <filename>hudson.xml</filename>, in the same directory as your
    <filename>hudson.war</filename> file. Here you can configure (or
    re-configure) ports, JVM options, an the Hudson work directory. In the
    following example, we give Hudson a bit more memory and get it to run on
    port 8081:</para>

    <programlisting>&lt;service&gt;
  &lt;id&gt;hudson&lt;/id&gt;
  &lt;name&gt;Hudson&lt;/name&gt;
  &lt;description&gt;This service runs the Hudson continuous integration system&lt;/description&gt;
  &lt;env name="HUDSON_HOME" value="D:\hdn" /&gt;
  &lt;executable&gt;java&lt;/executable&gt;
  &lt;arguments&gt;-Xrs -Xmx512m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle 
  -jar "%BASE%\hudson.war" --httpPort=8081 --ajp13Port=8010&lt;/arguments&gt;
&lt;/service&gt;</programlisting>

    <para>Finally, if you need to uninstall the Hudson service, you can do one
    of two things. The simplest is to run the Hudson executable with the
    "uninstall" option: <screen>C:/hudson&gt;<command>hudson.exe uninstall</command></screen></para>

    <para>The other option is to use the Windows service tool
    <command>sc</command>:<screen>C:/&gt;<command>sc delete hudson</command></screen></para>
  </sect1>

  <sect1 id="sec-hudson-home-directory-contents">
    <title>What's in the Hudson home directory</title>

    <para><indexterm>
        <primary>home directory</primary>
      </indexterm><indexterm>
        <primary>HUDSON_HOME</primary>
      </indexterm>The Hudson home directory contains all the details of your
    Hudson server configuration, details that you configure in the "Manage
    Hudson" screen. These configuration details are stored in the form of a
    set of XML files. Much of the core configuration, for example, is stored
    in the <filename>config.xml</filename> file. Other tools-specific
    configuration is stored in other appropriately-named XML files: the
    details of your Maven installations, for example, are stored in a file
    called <filename>hudson.tasks.Maven.xml</filename>. You rarely need to
    modify these files by hand, though occasionally it can come in
    handy.</para>

    <para>The Hudson home directory also contains a number of sub-directories
    (see <xref lang="" linkend="fig-hudson-home-directory" />). Not all of the
    files and directories will be present after a fresh installation, as some
    are created when required by Hudson. And if you look at an existing Hudson
    installation, you will see additional XML files relating to Hudson
    configuration and plugins.</para>

    <figure id="fig-hudson-home-directory">
      <title>The Hudson Home Directory</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-home-directory.png"
                     width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The main directories are described in more detail in <xref
    linkend="hudson-home-directory-structure" />.<table
        id="hudson-home-directory-structure">
        <title>The Hudson home directory structure</title>

        <tgroup cols="2">
          <colspec align="left" colwidth="100" />

          <colspec align="left" />

          <thead>
            <row>
              <entry>Directory</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>.hudson</entry>

              <entry>The default Hudson home directory</entry>
            </row>

            <row>
              <entry>fingerprints</entry>

              <entry>This directory is used by Hudson to keep track of
              artifact fingerprints. We look at how to track artifacts later
              on in the book.</entry>
            </row>

            <row>
              <entry>jobs</entry>

              <entry>This directory contains configuration details about the
              build jobs that Hudson manages, as well as the artifacts and
              data resulting from these builds. We look at this directory in
              detail below.</entry>
            </row>

            <row>
              <entry>plugins</entry>

              <entry>This directory contains any plugins that you have
              installed. Plugins allow you to extend Hudson by adding extra
              feature. Note that, with the exception of the core Hudson
              plugins Hudson core plugins (subversion, cvs, ssh-slaves, maven,
              and scid-ad), plugins are not stored with the hudson executable,
              or in the expanded web application directory. This means that
              you can update your Hudson executable and not have to re-install
              all your plugins.</entry>
            </row>

            <row>
              <entry>updates</entry>

              <entry>This is an internal directory used by Hudson to store
              information about available plugin updates.</entry>
            </row>

            <row>
              <entry>userContent</entry>

              <entry>You can use this directory to place your own custom
              content onto your Hudson server. You can access files in this
              directory at <ulink
              url="http://myserver/hudson/userContent"></ulink> (if you are
              running Hudson on an application server) or <ulink
              url="http://myserver/userContent"></ulink> (if you are running
              in stand-alone mode)</entry>
            </row>

            <row>
              <entry>users</entry>

              <entry>If you are using the native Hudson user database, user
              accounts will be stored in this directory.</entry>
            </row>

            <row>
              <entry>war</entry>

              <entry>This directory contains the expanded web application.
              When you start Hudson as a stand-alone application, it will
              extract the web application into this directory.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>The "jobs" directory is a crucial part of the Hudson directory
    structure, and deserves a bit more attention. You can see an example of a
    real Hudson jobs directory in <xref lang=""
    linkend="fig-hudson-jobs-directory" />.</para>

    <figure id="fig-hudson-jobs-directory">
      <title>The Hudson Jobs Directory</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-job-directories.png"
                     width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>This directory contains a sub-directory for each Hudson build job
    being managed by this instance of Hudson. Each job directory in turn
    contains two sub-directories: <filename>builds</filename> and
    <filename>workspace</filename>, along with some other files. In
    particular, it contains the build job <filename>config.xml</filename>
    file, which contains, as you might expect, the configuration details for
    this build job. There are also some other files used internally b<xref
    linkend="fig-hudson-jobs-directory-details" />y Hudson, that you usually
    wouldn't touch, such as the nextBuildNumber file (which contains the
    number that will be assigned to the next build in this build job), as well
    as symbolic links to the most recent successful build and the last stable
    one. A successful build is one that does not have any compilation errors.
    A stable build is a successful build that has passed whatever quality
    criteria you may have configured, such as unit tests, code coverage and so
    forth.</para>

    <para>Both the <filename>build</filename> and the
    <filename>workspace</filename> directories are important. The
    <filename>workspace</filename> directory is where Hudson builds your
    project: it contains the source code Hudson checks out, plus any files
    generated by the build itself. This workspace is reused for each
    successive build - there is only ever one <filename>workspace</filename>
    directory per project, and the disk space it requires tends to be
    relatively stable.</para>

    <para>The <filename>builds</filename> directory contains a history of the
    builds executed for this job. You rarely need to intervene directly in
    these directories, but it can be useful to know what they contain. You can
    see a real example of the builds directory in <xref
    linkend="fig-hudson-jobs-directory-details" />, where three builds have
    been performed. Hudson stores build history and artifacts for each build
    it performs in a directory labeled with a timestamp ('2010-03-12_20-42-05'
    and so forth in <xref linkend="fig-hudson-jobs-directory-details" />). It
    also contains symbolic links with the actual build numbers that point to
    the build history directories.</para>

    <figure id="fig-hudson-jobs-directory-details">
      <title>The builds directory</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-job-directory-details.png"
                     width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Each build directory contains information such as the build result
    log file, the Subversion revision number used for this build (if you are
    using Subversion), the changes that triggered this build, and any other
    data or metrics that you have asked Hudson to keep track of. For example,
    if your build job keeps track of unit test results or test coverage
    metrics, this data will be stored here for each build. The build directory
    also contains any artifacts you are storing - binary artifacts, but also
    other generated files such as javadoc or code coverage metrics. Some types
    of build jobs, such as the Hudson Maven build jobs, will also archive
    binary artifacts by default.</para>

    <para>The size of the "build" directory will naturally grow over time, as
    the build history cumulates. You will probably want to take this into
    account when designing your build server directory structure, especially
    if your build server is running in a Unix-style environment with multiple
    disk partitions. A lot of this data takes the form of text or XML files,
    which does not consume a large amount of extra space for each build.
    However, if your build archives some of your build artifacts, such as JAR
    or WAR files, they too will be stored here. The size of these artifacts
    should be factored into your disk space requirements. We will see later on
    how to limit the number of builds stored for a particular build job is
    space is an issue. Limiting the number of build jobs that Hudson stores is
    always a trade-off between disk space and keeping useful build statistics,
    as Hudson does rely on this build history for its powerful reporting
    features.</para>

    <para>Hudson uses the files in this directory extensively to display build
    history and metrics data, so you should be particularly careful not to
    delete any of the build history directories without knowing exactly what
    you are doing.</para>
  </sect1>

  <sect1>
    <title>Backing up your Hudson data</title>

    <para><indexterm>
        <primary>backups</primary>
      </indexterm>It is important to ensure that your Hudson data is regularly
    backed up. This applies in particular to the Hudson home directory, which
    contains your server configuration details as well as your build artifacts
    and build histories. This directory should be backed up frequently and
    automatically. The Hudson executable itself is less critical, as it can
    easily be reinstalled without affecting your build environment.</para>
  </sect1>

  <sect1>
    <title>Upgrading your Hudson installation</title>

    <para><indexterm>
        <primary>upgrading hudson</primary>
      </indexterm><indexterm>
        <primary>installation</primary>

        <secondary>upgrading</secondary>
      </indexterm>Upgrading Hudson is easy - you simply replace your local
    copy of the <filename>hudson.war</filename> file and restart Hudson.
    However you should make sure there are no builds running when you restart
    your server. Since your build environment configuration details, plugins
    and build history are stored in the Hudson home directory, upgrading your
    Hudson executable will have no impact on your installation. You can always
    check what version of Hudson you are currently running by referring to the
    version number in the bottom right corner of every screen.</para>

    <para>If you are running Hudson as a stand-alone instance, you can also
    upgrade your Hudson installation directly from the web interface, in the
    'Manage Hudson' section. Hudson will indicate if a more recent version is
    available, and give you the option to either download it manually or
    upgrade automatically (see <xref lang=""
    linkend="fig-hudson-upgrade" />).</para>

    <figure id="fig-hudson-upgrade">
      <title>Upgrading Hudson from the web interface</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/hudson-upgrade.png" width="4.3in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Once Hudson has downloaded the upgrade, you can also tell it to
    restart when no jobs are running. This is probably the most convenient way
    to upgrade Hudson, although it will not work in all environments. In
    particular, you need to be running Hudson as a stand-alone application,
    and the user running Hudson needs to have read-write access to the
    <filename>hudson.war</filename> file.</para>

    <para>If you are running Hudson on an application server such as Tomcat or
    JBoss, you might need to do a bit more tidying up when you upgrade your
    Hudson instance. Tomcat, for example, places compiled JSP pages in the
    <filename>CATALINA_BASE/work</filename> directory. When you upgrade your
    Hudson version, these files need to be removed to prevent the possibility
    of any stale pages being served.</para>

    <para>Any plugins you have installed will be unaffected by your Hudson
    upgrades. However, plugins can also be upgraded, independently of the main
    Hudson executable. You upgrade your plugins directly in the Hudson web
    application, using the Hudson Plugin Manager. We discuss plugins in more
    detail further on in this book.</para>
  </sect1>

  <sect1>
    <title>Conclusion</title>

    <para>In this chapter, we have seen how to install and run Hudson in
    different environments, and a few basic tips on how to maintain your
    Hudson installation once running. Hudson is easy to install, both as a
    stand-alone application and as a WAR file deployed to an existing
    application server. The main things you need to consider when choosing a
    build server to host Hudson are CPU, memory, and disk space.</para>
  </sect1>
</chapter>
